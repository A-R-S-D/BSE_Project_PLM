
KQ130F_STM32F030_modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b8c  08004b8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b8c  08004b8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  20000070  08004c0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001490  08004c0c  00021490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f22  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf7  00000000  00000000  00039fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015152  00000000  00000000  00040740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4d4  00000000  00000000  00055892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077ca9  00000000  00000000  0006fd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  000e7a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a58 	.word	0x08004a58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004a58 	.word	0x08004a58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	0018      	movs	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	b002      	add	sp, #8
 8000232:	bd80      	pop	{r7, pc}

08000234 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b002      	add	sp, #8
 8000244:	bd80      	pop	{r7, pc}

08000246 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0018      	movs	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	b002      	add	sp, #8
 800026e:	bd80      	pop	{r7, pc}

08000270 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d005      	beq.n	800028c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	2203      	movs	r2, #3
 800028a:	4798      	blx	r3
    }
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}

08000296 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	425a      	negs	r2, r3
 80002a4:	4153      	adcs	r3, r2
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <_ZNK6KQ130FMUlPhhE_clES_h>:
extern UART_HandleTypeDef huart2;

uint8_t helloWorld[] = "hello world!\n\r";

Enc::RSA rsaEnc();
PLM::PLModem<512> KQ130F(&huart2, [](uint8_t* frame, const uint8_t len)
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	701a      	strb	r2, [r3, #0]
								{ HAL_UART_Transmit(&huart1, (uint8_t*)"RX", 2, 500); });
 80002be:	23fa      	movs	r3, #250	; 0xfa
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4904      	ldr	r1, [pc, #16]	; (80002d4 <_ZNK6KQ130FMUlPhhE_clES_h+0x24>)
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <_ZNK6KQ130FMUlPhhE_clES_h+0x28>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	f003 f890 	bl	80033ec <HAL_UART_Transmit>
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b004      	add	sp, #16
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	08004a70 	.word	0x08004a70
 80002d8:	200004e8 	.word	0x200004e8

080002dc <_ZNSt8functionIFvPhhEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	0018      	movs	r0, r3
 80002e8:	f7ff ffc2 	bl	8000270 <_ZNSt14_Function_baseD1Ev>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	0018      	movs	r0, r3
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_hE_EvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	003b      	movs	r3, r7
 8000302:	7019      	strb	r1, [r3, #0]
      function(_Functor __f)
      : _Function_base()
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	0018      	movs	r0, r3
 8000308:	f7ff ffa6 	bl	8000258 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 800030c:	003b      	movs	r3, r7
 800030e:	0018      	movs	r0, r3
 8000310:	f000 f83e 	bl	8000390 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE21_M_not_empty_functionIS2_EEbRKT_>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d00f      	beq.n	8000338 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_hE_EvvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000318:	687c      	ldr	r4, [r7, #4]
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	f000 f840 	bl	80003a2 <_ZSt4moveIRN6KQ130FMUlPhhE_EEONSt16remove_referenceIT_E4typeEOS4_>
 8000322:	0003      	movs	r3, r0
 8000324:	0019      	movs	r1, r3
 8000326:	0020      	movs	r0, r4
 8000328:	f000 f844 	bl	80003b4 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_hE_EvvEET_+0x4c>)
 8000330:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_hE_EvvEET_+0x50>)
 8000336:	609a      	str	r2, [r3, #8]
	  }
      }
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	0018      	movs	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	b003      	add	sp, #12
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	080003db 	.word	0x080003db
 8000348:	08000417 	.word	0x08000417

0800034c <_ZN3PLM7PLModemILj512EEC1EP20__UART_HandleTypeDefSt8functionIFvPhhEE>:
		rxFunc _rxCallback;
		UART_HandleTypeDef* _modemCom;


	public:
		PLModem(UART_HandleTypeDef* hu, rxFunc  func) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2281      	movs	r2, #129	; 0x81
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	4694      	mov	ip, r2
 8000360:	4463      	add	r3, ip
 8000362:	0018      	movs	r0, r3
 8000364:	f000 f89b 	bl	800049e <_ZNSt8functionIFvPhhEEC1Ev>
			this->_modemCom = hu;
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	2385      	movs	r3, #133	; 0x85
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	68b9      	ldr	r1, [r7, #8]
 8000370:	50d1      	str	r1, [r2, r3]
			this->_rxCallback = func;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	2281      	movs	r2, #129	; 0x81
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	4694      	mov	ip, r2
 800037a:	4463      	add	r3, ip
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	0011      	movs	r1, r2
 8000380:	0018      	movs	r0, r3
 8000382:	f000 f899 	bl	80004b8 <_ZNSt8functionIFvPhhEEaSERKS2_>
		}
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	0018      	movs	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}

08000390 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	  { return true; }
 8000398:	2301      	movs	r3, #1
 800039a:	0018      	movs	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_ZSt4moveIRN6KQ130FMUlPhhE_EEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	0018      	movs	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	0018      	movs	r0, r3
 80003c2:	f7ff ffee 	bl	80003a2 <_ZSt4moveIRN6KQ130FMUlPhhE_EEONSt16remove_referenceIT_E4typeEOS4_>
 80003c6:	0001      	movs	r1, r0
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	1c22      	adds	r2, r4, #0
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 f88e 	bl	80004ee <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b003      	add	sp, #12
 80003d8:	bd90      	pop	{r4, r7, pc}

080003da <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_hE_EE9_M_invokeERKSt9_Any_dataOS0_Oh>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80003da:	b5b0      	push	{r4, r5, r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 f898 	bl	800051e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE14_M_get_pointerERKSt9_Any_data>
 80003ee:	0004      	movs	r4, r0
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 f8a7 	bl	8000546 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80003f8:	0005      	movs	r5, r0
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 f8ab 	bl	8000558 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000402:	0003      	movs	r3, r0
 8000404:	001a      	movs	r2, r3
 8000406:	0029      	movs	r1, r5
 8000408:	0020      	movs	r0, r4
 800040a:	f000 f8ae 	bl	800056a <_ZSt10__invoke_rIvRN6KQ130FMUlPhhE_EJS0_hEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>
				     std::forward<_ArgTypes>(__args)...);
 800040e:	46c0      	nop			; (mov r8, r8)
      }
 8000410:	46bd      	mov	sp, r7
 8000412:	b004      	add	sp, #16
 8000414:	bdb0      	pop	{r4, r5, r7, pc}

08000416 <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_hE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000416:	b590      	push	{r4, r7, lr}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch (__op)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d10b      	bne.n	8000444 <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_hE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x2e>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f8b9 	bl	80005a6 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhhE_EEERT_v>
 8000434:	0004      	movs	r4, r0
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	0018      	movs	r0, r3
 800043a:	f000 f870 	bl	800051e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE14_M_get_pointerERKSt9_Any_data>
 800043e:	0003      	movs	r3, r0
 8000440:	6023      	str	r3, [r4, #0]
	    break;
 8000442:	e006      	b.n	8000452 <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_hE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3c>
	    _Base::_M_manager(__dest, __source, __op);
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781a      	ldrb	r2, [r3, #0]
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	0018      	movs	r0, r3
 800044e:	f000 f8b7 	bl	80005c0 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8000452:	2300      	movs	r3, #0
      }
 8000454:	0018      	movs	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	b005      	add	sp, #20
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <_ZNSt8functionIFvPhhEE4swapERS2_>:
      void swap(function& __x) noexcept
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f000 f8df 	bl	8000630 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3308      	adds	r3, #8
 8000476:	001a      	movs	r2, r3
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	3308      	adds	r3, #8
 800047c:	0019      	movs	r1, r3
 800047e:	0010      	movs	r0, r2
 8000480:	f000 f901 	bl	8000686 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	330c      	adds	r3, #12
 8000488:	001a      	movs	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	330c      	adds	r3, #12
 800048e:	0019      	movs	r1, r3
 8000490:	0010      	movs	r0, r2
 8000492:	f000 f922 	bl	80006da <_ZSt4swapIPFvRKSt9_Any_dataOPhOhEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}

0800049e <_ZNSt8functionIFvPhhEEC1Ev>:
      function() noexcept
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff fed5 	bl	8000258 <_ZNSt14_Function_baseC1Ev>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_ZNSt8functionIFvPhhEEaSERKS2_>:
      operator=(const function& __x)
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	2408      	movs	r4, #8
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 f926 	bl	800071c <_ZNSt8functionIFvPhhEEC1ERKS2_>
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff ffc0 	bl	800045c <_ZNSt8functionIFvPhhEE4swapERS2_>
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	f7ff fefc 	bl	80002dc <_ZNSt8functionIFvPhhEED1Ev>
	return *this;
 80004e4:	687b      	ldr	r3, [r7, #4]
      }
 80004e6:	0018      	movs	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b007      	add	sp, #28
 80004ec:	bd90      	pop	{r4, r7, pc}

080004ee <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	0018      	movs	r0, r3
 8000500:	f7ff ff4f 	bl	80003a2 <_ZSt4moveIRN6KQ130FMUlPhhE_EEONSt16remove_referenceIT_E4typeEOS4_>
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff fe94 	bl	8000234 <_ZNSt9_Any_data9_M_accessEv>
 800050c:	0003      	movs	r3, r0
 800050e:	0019      	movs	r1, r3
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fe85 	bl	8000220 <_ZnwjPv>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b004      	add	sp, #16
 800051c:	bd80      	pop	{r7, pc}

0800051e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800051e:	b580      	push	{r7, lr}
 8000520:	b084      	sub	sp, #16
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	0018      	movs	r0, r3
 800052a:	f000 f919 	bl	8000760 <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhhE_EEERKT_v>
 800052e:	0003      	movs	r3, r0
 8000530:	60fb      	str	r3, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	0018      	movs	r0, r3
 8000536:	f000 f920 	bl	800077a <_ZSt11__addressofIKN6KQ130FMUlPhhE_EEPT_RS3_>
 800053a:	0003      	movs	r3, r0
 800053c:	46c0      	nop			; (mov r8, r8)
	}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}

08000546 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZSt10__invoke_rIvRN6KQ130FMUlPhhE_EJS0_hEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800056a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	60f8      	str	r0, [r7, #12]
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	607a      	str	r2, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f907 	bl	800078c <_ZSt7forwardIRN6KQ130FMUlPhhE_EEOT_RNSt16remove_referenceIS3_E4typeE>
 800057e:	0004      	movs	r4, r0
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ffdf 	bl	8000546 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8000588:	0005      	movs	r5, r0
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff ffe3 	bl	8000558 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000592:	0003      	movs	r3, r0
 8000594:	002a      	movs	r2, r5
 8000596:	0021      	movs	r1, r4
 8000598:	1c30      	adds	r0, r6, #0
 800059a:	f000 f900 	bl	800079e <_ZSt13__invoke_implIvRN6KQ130FMUlPhhE_EJS0_hEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b005      	add	sp, #20
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005a6 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhhE_EEERT_v>:
      _M_access()
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff fe3f 	bl	8000234 <_ZNSt9_Any_data9_M_accessEv>
 80005b6:	0003      	movs	r3, r0
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b002      	add	sp, #8
 80005be:	bd80      	pop	{r7, pc}

080005c0 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d018      	beq.n	8000608 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x48>
 80005d6:	dc1d      	bgt.n	8000614 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d002      	beq.n	80005e2 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d00c      	beq.n	80005fa <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3a>
 80005e0:	e018      	b.n	8000614 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ffde 	bl	80005a6 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhhE_EEERT_v>
 80005ea:	0004      	movs	r4, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff95 	bl	800051e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE14_M_get_pointerERKSt9_Any_data>
 80005f4:	0003      	movs	r3, r0
 80005f6:	6023      	str	r3, [r4, #0]
	      break;
 80005f8:	e00c      	b.n	8000614 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	1c2a      	adds	r2, r5, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f8ef 	bl	80007e4 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8000606:	e005      	b.n	8000614 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1c21      	adds	r1, r4, #0
 800060c:	0018      	movs	r0, r3
 800060e:	f000 f901 	bl	8000814 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8000612:	46c0      	nop			; (mov r8, r8)
	  return false;
 8000614:	2300      	movs	r3, #0
	}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b004      	add	sp, #16
 800061c:	bdb0      	pop	{r4, r5, r7, pc}

0800061e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ffee 	bl	800061e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000642:	0002      	movs	r2, r0
 8000644:	2408      	movs	r4, #8
 8000646:	193b      	adds	r3, r7, r4
 8000648:	ca03      	ldmia	r2!, {r0, r1}
 800064a:	c303      	stmia	r3!, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ffe5 	bl	800061e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000654:	0002      	movs	r2, r0
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	ca03      	ldmia	r2!, {r0, r1}
 800065a:	c303      	stmia	r3!, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff ffdd 	bl	800061e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000664:	0002      	movs	r2, r0
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	ca03      	ldmia	r2!, {r0, r1}
 800066a:	c303      	stmia	r3!, {r0, r1}
    }
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b005      	add	sp, #20
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}

08000686 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff ffee 	bl	8000674 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8000698:	0003      	movs	r3, r0
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ffe7 	bl	8000674 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80006a6:	0003      	movs	r3, r0
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80006ae:	230c      	movs	r3, #12
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff ffde 	bl	8000674 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80006b8:	0003      	movs	r3, r0
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	601a      	str	r2, [r3, #0]
    }
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_ZSt4moveIRPFvRKSt9_Any_dataOPhOhEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	0018      	movs	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <_ZSt4swapIPFvRKSt9_Any_dataOPhOhEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff ffee 	bl	80006c8 <_ZSt4moveIRPFvRKSt9_Any_dataOPhOhEEONSt16remove_referenceIT_E4typeEOSA_>
 80006ec:	0003      	movs	r3, r0
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff ffe7 	bl	80006c8 <_ZSt4moveIRPFvRKSt9_Any_dataOPhOhEEONSt16remove_referenceIT_E4typeEOSA_>
 80006fa:	0003      	movs	r3, r0
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000702:	230c      	movs	r3, #12
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ffde 	bl	80006c8 <_ZSt4moveIRPFvRKSt9_Any_dataOPhOhEEONSt16remove_referenceIT_E4typeEOSA_>
 800070c:	0003      	movs	r3, r0
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	601a      	str	r2, [r3, #0]
    }
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZNSt8functionIFvPhhEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff fd95 	bl	8000258 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f87d 	bl	8000830 <_ZNKSt8functionIFvPhhEEcvbEv>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d00d      	beq.n	8000756 <_ZNSt8functionIFvPhhEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	6839      	ldr	r1, [r7, #0]
 8000742:	2202      	movs	r2, #2
 8000744:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	68da      	ldr	r2, [r3, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	609a      	str	r2, [r3, #8]
    }
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhhE_EEERKT_v>:
      _M_access() const
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fd6b 	bl	8000246 <_ZNKSt9_Any_data9_M_accessEv>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}

0800077a <_ZSt11__addressofIKN6KQ130FMUlPhhE_EEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZSt7forwardIRN6KQ130FMUlPhhE_EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}

0800079e <_ZSt13__invoke_implIvRN6KQ130FMUlPhhE_EJS0_hEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800079e:	b5b0      	push	{r4, r5, r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	240c      	movs	r4, #12
 80007a6:	193c      	adds	r4, r7, r4
 80007a8:	7020      	strb	r0, [r4, #0]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ffea 	bl	800078c <_ZSt7forwardIRN6KQ130FMUlPhhE_EEOT_RNSt16remove_referenceIS3_E4typeE>
 80007b8:	0005      	movs	r5, r0
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fec2 	bl	8000546 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80007c2:	0003      	movs	r3, r0
 80007c4:	681c      	ldr	r4, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fec5 	bl	8000558 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80007ce:	0003      	movs	r3, r0
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	001a      	movs	r2, r3
 80007d4:	0021      	movs	r1, r4
 80007d6:	0028      	movs	r0, r5
 80007d8:	f7ff fd6a 	bl	80002b0 <_ZNK6KQ130FMUlPhhE_clES_h>
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b004      	add	sp, #16
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}

080007e4 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	701a      	strb	r2, [r3, #0]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ffb3 	bl	8000760 <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhhE_EEERKT_v>
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fd19 	bl	8000234 <_ZNSt9_Any_data9_M_accessEv>
 8000802:	0003      	movs	r3, r0
 8000804:	0019      	movs	r1, r3
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fd0a 	bl	8000220 <_ZnwjPv>
	}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhhE_EE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	003b      	movs	r3, r7
 800081e:	7019      	strb	r1, [r3, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f815 	bl	8000852 <_ZNSt9_Any_data9_M_accessIN6KQ130FMUlPhhE_EEERT_v>
	}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZNKSt8functionIFvPhhEEcvbEv>:
      explicit operator bool() const noexcept
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff fd2b 	bl	8000296 <_ZNKSt14_Function_base8_M_emptyEv>
 8000840:	0003      	movs	r3, r0
 8000842:	001a      	movs	r2, r3
 8000844:	2301      	movs	r3, #1
 8000846:	4053      	eors	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}

08000852 <_ZNSt9_Any_data9_M_accessIN6KQ130FMUlPhhE_EEERT_v>:
      _M_access()
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fce9 	bl	8000234 <_ZNSt9_Any_data9_M_accessEv>
 8000862:	0003      	movs	r3, r0
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}

0800086c <_ZN3PLM7PLModemILj512EED1Ev>:
	class PLModem {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2281      	movs	r2, #129	; 0x81
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	4694      	mov	ip, r2
 800087c:	4463      	add	r3, ip
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fd2c 	bl	80002dc <_ZNSt8functionIFvPhhEED1Ev>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <_Z41__static_initialization_and_destruction_0ii>:

	  HAL_UART_Transmit(&huart2, helloWorld, sizeof(helloWorld), 1000);
	  HAL_UART_Transmit(&huart1, helloWorld, sizeof(helloWorld), 1000);

  }
}
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d114      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d110      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x3a>
								{ HAL_UART_Transmit(&huart1, (uint8_t*)"RX", 2, 500); });
 80008a8:	2508      	movs	r5, #8
 80008aa:	197b      	adds	r3, r7, r5
 80008ac:	1c21      	adds	r1, r4, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fd22 	bl	80002f8 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_hE_EvvEET_>
 80008b4:	002c      	movs	r4, r5
 80008b6:	193a      	adds	r2, r7, r4
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fd45 	bl	800034c <_ZN3PLM7PLModemILj512EEC1EP20__UART_HandleTypeDefSt8functionIFvPhhEE>
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fd09 	bl	80002dc <_ZNSt8functionIFvPhhEED1Ev>
PLM::PLModem<512> KQ130F(&huart2, [](uint8_t* frame, const uint8_t len)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d103      	bne.n	80008e0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ffc6 	bl	800086c <_ZN3PLM7PLModemILj512EED1Ev>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b006      	add	sp, #24
 80008e6:	bdb0      	pop	{r4, r5, r7, pc}
 80008e8:	0000ffff 	.word	0x0000ffff
 80008ec:	2000056c 	.word	0x2000056c
 80008f0:	2000008c 	.word	0x2000008c

080008f4 <_GLOBAL__sub_I_helloWorld>:
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <_GLOBAL__sub_I_helloWorld+0x14>)
 80008fa:	0019      	movs	r1, r3
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ffc7 	bl	8000890 <_Z41__static_initialization_and_destruction_0ii>
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	0000ffff 	.word	0x0000ffff

0800090c <_GLOBAL__sub_D_helloWorld>:
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <_GLOBAL__sub_D_helloWorld+0x14>)
 8000912:	0019      	movs	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ffbb 	bl	8000890 <_Z41__static_initialization_and_destruction_0ii>
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	0000ffff 	.word	0x0000ffff

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a06      	ldr	r2, [pc, #24]	; (800094c <vApplicationGetIdleTaskMemory+0x28>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2240      	movs	r2, #64	; 0x40
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b004      	add	sp, #16
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	200002a4 	.word	0x200002a4
 8000950:	20000350 	.word	0x20000350

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b5b0      	push	{r4, r5, r7, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fd6d 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f851 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 fa33 	bl	8000dcc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000966:	f000 f9a9 	bl	8000cbc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800096a:	f000 f8e5 	bl	8000b38 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800096e:	f000 f9d7 	bl	8000d20 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000972:	f000 fa05 	bl	8000d80 <MX_DMA_Init>
  MX_CRC_Init();
 8000976:	f000 f8bf 	bl	8000af8 <MX_CRC_Init>
  MX_RTC_Init();
 800097a:	f000 f93d 	bl	8000bf8 <MX_RTC_Init>
  MX_IWDG_Init();
 800097e:	f000 f91b 	bl	8000bb8 <MX_IWDG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000982:	213c      	movs	r1, #60	; 0x3c
 8000984:	187b      	adds	r3, r7, r1
 8000986:	4a19      	ldr	r2, [pc, #100]	; (80009ec <main+0x98>)
 8000988:	ca31      	ldmia	r2!, {r0, r4, r5}
 800098a:	c331      	stmia	r3!, {r0, r4, r5}
 800098c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800098e:	c331      	stmia	r3!, {r0, r4, r5}
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2100      	movs	r1, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f003 f8f2 	bl	8003b82 <osThreadCreate>
 800099e:	0002      	movs	r2, r0
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <main+0x9c>)
 80009a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityNormal, 0, 256, myTask02Buffer, &myTask02ControlBlock);
 80009a4:	2120      	movs	r1, #32
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <main+0xa0>)
 80009aa:	ca31      	ldmia	r2!, {r0, r4, r5}
 80009ac:	c331      	stmia	r3!, {r0, r4, r5}
 80009ae:	ca31      	ldmia	r2!, {r0, r4, r5}
 80009b0:	c331      	stmia	r3!, {r0, r4, r5}
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 f8e1 	bl	8003b82 <osThreadCreate>
 80009c0:	0002      	movs	r2, r0
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <main+0xa4>)
 80009c4:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadStaticDef(myTask03, StartTask03, osPriorityNormal, 0, 256, myTask03Buffer, &myTask03ControlBlock);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <main+0xa8>)
 80009ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009cc:	c313      	stmia	r3!, {r0, r1, r4}
 80009ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009d0:	c313      	stmia	r3!, {r0, r1, r4}
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	601a      	str	r2, [r3, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2100      	movs	r1, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 f8d1 	bl	8003b82 <osThreadCreate>
 80009e0:	0002      	movs	r2, r0
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <main+0xac>)
 80009e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009e6:	f003 f8c4 	bl	8003b72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009ea:	e7fe      	b.n	80009ea <main+0x96>
 80009ec:	08004a98 	.word	0x08004a98
 80009f0:	20000700 	.word	0x20000700
 80009f4:	08004ab4 	.word	0x08004ab4
 80009f8:	200009b0 	.word	0x200009b0
 80009fc:	08004ad0 	.word	0x08004ad0
 8000a00:	20000e60 	.word	0x20000e60

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b095      	sub	sp, #84	; 0x54
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	2420      	movs	r4, #32
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2330      	movs	r3, #48	; 0x30
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 ff49 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2310      	movs	r3, #16
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f003 ff41 	bl	80048ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2310      	movs	r3, #16
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f003 ff3a 	bl	80048ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a38:	f001 fa46 	bl	8001ec8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <SystemClock_Config+0xec>)
 8000a3e:	6a1a      	ldr	r2, [r3, #32]
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <SystemClock_Config+0xec>)
 8000a42:	2118      	movs	r1, #24
 8000a44:	430a      	orrs	r2, r1
 8000a46:	621a      	str	r2, [r3, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	220e      	movs	r2, #14
 8000a4e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2201      	movs	r2, #1
 8000a54:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2210      	movs	r2, #16
 8000a60:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2201      	movs	r2, #1
 8000a66:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	22a0      	movs	r2, #160	; 0xa0
 8000a78:	0392      	lsls	r2, r2, #14
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fa2d 	bl	8001ee4 <HAL_RCC_OscConfig>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a8e:	f000 fa25 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	2110      	movs	r1, #16
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2207      	movs	r2, #7
 8000a98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fd31 	bl	8002518 <HAL_RCC_ClockConfig>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000aba:	f000 fa0f 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000abe:	003b      	movs	r3, r7
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <SystemClock_Config+0xf0>)
 8000ac2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000aca:	003b      	movs	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0052      	lsls	r2, r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	003b      	movs	r3, r7
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 fe98 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ae4:	f000 f9fa 	bl	8000edc <Error_Handler>
  }
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b015      	add	sp, #84	; 0x54
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	00010021 	.word	0x00010021

08000af8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_CRC_Init+0x38>)
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <MX_CRC_Init+0x3c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_CRC_Init+0x38>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_CRC_Init+0x38>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_CRC_Init+0x38>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_CRC_Init+0x38>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <MX_CRC_Init+0x38>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fd68 	bl	80015f2 <HAL_CRC_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8000b26:	f000 f9d9 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000450 	.word	0x20000450
 8000b34:	40023000 	.word	0x40023000

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <MX_I2C1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <MX_I2C1_Init+0x7c>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 f817 	bl	8001ba8 <HAL_I2C_Init>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b7e:	f000 f9ad 	bl	8000edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 f8a4 	bl	8001cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b90:	f000 f9a4 	bl	8000edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <MX_I2C1_Init+0x74>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f8e7 	bl	8001d6c <HAL_I2CEx_ConfigDigitalFilter>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 f99b 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000046c 	.word	0x2000046c
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	2000090e 	.word	0x2000090e

08000bb8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_IWDG_Init+0x34>)
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <MX_IWDG_Init+0x38>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_IWDG_Init+0x34>)
 8000bc4:	2206      	movs	r2, #6
 8000bc6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_IWDG_Init+0x34>)
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <MX_IWDG_Init+0x3c>)
 8000bcc:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_IWDG_Init+0x34>)
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <MX_IWDG_Init+0x3c>)
 8000bd2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <MX_IWDG_Init+0x34>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 f914 	bl	8001e04 <HAL_IWDG_Init>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000be0:	f000 f97c 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	200004b8 	.word	0x200004b8
 8000bf0:	40003000 	.word	0x40003000
 8000bf4:	00000fff 	.word	0x00000fff

08000bf8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f003 fe50 	bl	80048ac <memset>
  RTC_DateTypeDef sDate = {0};
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <MX_RTC_Init+0xc0>)
 8000c16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c20:	227f      	movs	r2, #127	; 0x7f
 8000c22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 feb4 	bl	80029ac <HAL_RTC_Init>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c48:	f000 f948 	bl	8000edc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c6a:	1d39      	adds	r1, r7, #4
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 ff2f 	bl	8002ad4 <HAL_RTC_SetTime>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000c7a:	f000 f92f 	bl	8000edc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2201      	movs	r2, #1
 8000c88:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000c90:	003b      	movs	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c96:	0039      	movs	r1, r7
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_RTC_Init+0xbc>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 ffd5 	bl	8002c4c <HAL_RTC_SetDate>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000ca6:	f000 f919 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b006      	add	sp, #24
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200004c8 	.word	0x200004c8
 8000cb8:	40002800 	.word	0x40002800

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <MX_USART1_UART_Init+0x60>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cc8:	22e1      	movs	r2, #225	; 0xe1
 8000cca:	0252      	lsls	r2, r2, #9
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000ce4:	220c      	movs	r2, #12
 8000ce6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 fb1e 	bl	8003344 <HAL_UART_Init>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000d0c:	f000 f8e6 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	200004e8 	.word	0x200004e8
 8000d1c:	40013800 	.word	0x40013800

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_USART2_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2296      	movs	r2, #150	; 0x96
 8000d2e:	0192      	lsls	r2, r2, #6
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 faed 	bl	8003344 <HAL_UART_Init>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 f8b5 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000056c 	.word	0x2000056c
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2103      	movs	r1, #3
 8000da2:	200a      	movs	r0, #10
 8000da4:	f000 fc00 	bl	80015a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f000 fc12 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2103      	movs	r1, #3
 8000db2:	200b      	movs	r0, #11
 8000db4:	f000 fbf8 	bl	80015a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000db8:	200b      	movs	r0, #11
 8000dba:	f000 fc0a 	bl	80015d2 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	240c      	movs	r4, #12
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2314      	movs	r3, #20
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f003 fd65 	bl	80048ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0309      	lsls	r1, r1, #12
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0289      	lsls	r1, r1, #10
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	02c9      	lsls	r1, r1, #11
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_GPIO_Init+0xa8>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	02db      	lsls	r3, r3, #11
 8000e30:	4013      	ands	r3, r2
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	480f      	ldr	r0, [pc, #60]	; (8000e78 <MX_GPIO_Init+0xac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0019      	movs	r1, r3
 8000e40:	f000 fe94 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_LED_Pin RX_LED_Pin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	22c0      	movs	r2, #192	; 0xc0
 8000e48:	0192      	lsls	r2, r2, #6
 8000e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2201      	movs	r2, #1
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <MX_GPIO_Init+0xac>)
 8000e62:	0019      	movs	r1, r3
 8000e64:	0010      	movs	r0, r2
 8000e66:	f000 fd11 	bl	800188c <HAL_GPIO_Init>

}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b009      	add	sp, #36	; 0x24
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400

08000e7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f002 fea2 	bl	8003bce <osDelay>

    HAL_IWDG_Refresh(&hiwdg);
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <StartDefaultTask+0x18>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f80b 	bl	8001ea8 <HAL_IWDG_Refresh>
    osDelay(1);
 8000e92:	e7f7      	b.n	8000e84 <StartDefaultTask+0x8>
 8000e94:	200004b8 	.word	0x200004b8

08000e98 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f002 fe94 	bl	8003bce <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <StartTask02+0x8>

08000ea8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f002 fe8c 	bl	8003bce <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <StartTask03+0x8>

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f000 fac9 	bl	8001460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40014800 	.word	0x40014800

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x50>)
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_MspInit+0x50>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x50>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x50>)
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_MspInit+0x50>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0549      	lsls	r1, r1, #21
 8000f10:	430a      	orrs	r2, r1
 8000f12:	61da      	str	r2, [r3, #28]
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_MspInit+0x50>)
 8000f16:	69da      	ldr	r2, [r3, #28]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	055b      	lsls	r3, r3, #21
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000f22:	2302      	movs	r3, #2
 8000f24:	425b      	negs	r3, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	2103      	movs	r1, #3
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 fb3c 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_CRC_MspInit+0x34>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10b      	bne.n	8000f66 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_CRC_MspInit+0x38>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_CRC_MspInit+0x38>)
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	430a      	orrs	r2, r1
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_CRC_MspInit+0x38>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40023000 	.word	0x40023000
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	; 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	2414      	movs	r4, #20
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	001a      	movs	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f003 fc8e 	bl	80048ac <memset>
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_I2C_MspInit+0x90>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d131      	bne.n	8000ffe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	02c9      	lsls	r1, r1, #11
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	02db      	lsls	r3, r3, #11
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	22c0      	movs	r2, #192	; 0xc0
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2212      	movs	r2, #18
 8000fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_I2C_MspInit+0x98>)
 8000fda:	0019      	movs	r1, r3
 8000fdc:	0010      	movs	r0, r2
 8000fde:	f000 fc55 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0389      	lsls	r1, r1, #14
 8000fec:	430a      	orrs	r2, r1
 8000fee:	61da      	str	r2, [r3, #28]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_I2C_MspInit+0x94>)
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b00b      	add	sp, #44	; 0x2c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40005400 	.word	0x40005400
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400

08001014 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_RTC_MspInit+0x28>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_RTC_MspInit+0x2c>)
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_RTC_MspInit+0x2c>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0209      	lsls	r1, r1, #8
 8001030:	430a      	orrs	r2, r1
 8001032:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40002800 	.word	0x40002800
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	; 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	241c      	movs	r4, #28
 800104e:	193b      	adds	r3, r7, r4
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f003 fc28 	bl	80048ac <memset>
  if(huart->Instance==USART1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a88      	ldr	r2, [pc, #544]	; (8001284 <HAL_UART_MspInit+0x240>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d000      	beq.n	8001068 <HAL_UART_MspInit+0x24>
 8001066:	e082      	b.n	800116e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001068:	4b87      	ldr	r3, [pc, #540]	; (8001288 <HAL_UART_MspInit+0x244>)
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	4b86      	ldr	r3, [pc, #536]	; (8001288 <HAL_UART_MspInit+0x244>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	01c9      	lsls	r1, r1, #7
 8001072:	430a      	orrs	r2, r1
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	4b84      	ldr	r3, [pc, #528]	; (8001288 <HAL_UART_MspInit+0x244>)
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	01db      	lsls	r3, r3, #7
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b80      	ldr	r3, [pc, #512]	; (8001288 <HAL_UART_MspInit+0x244>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_UART_MspInit+0x244>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0289      	lsls	r1, r1, #10
 800108e:	430a      	orrs	r2, r1
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	4b7d      	ldr	r3, [pc, #500]	; (8001288 <HAL_UART_MspInit+0x244>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	22c0      	movs	r2, #192	; 0xc0
 80010a4:	00d2      	lsls	r2, r2, #3
 80010a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	0021      	movs	r1, r4
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2203      	movs	r2, #3
 80010ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2201      	movs	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	187a      	adds	r2, r7, r1
 80010c4:	2390      	movs	r3, #144	; 0x90
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fbde 	bl	800188c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <HAL_UART_MspInit+0x248>)
 80010d2:	4a6f      	ldr	r2, [pc, #444]	; (8001290 <HAL_UART_MspInit+0x24c>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	4b6d      	ldr	r3, [pc, #436]	; (800128c <HAL_UART_MspInit+0x248>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b6b      	ldr	r3, [pc, #428]	; (800128c <HAL_UART_MspInit+0x248>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_UART_MspInit+0x248>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_UART_MspInit+0x248>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_UART_MspInit+0x248>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010f4:	4b65      	ldr	r3, [pc, #404]	; (800128c <HAL_UART_MspInit+0x248>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <HAL_UART_MspInit+0x248>)
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0192      	lsls	r2, r2, #6
 8001100:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <HAL_UART_MspInit+0x248>)
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fabb 	bl	8001680 <HAL_DMA_Init>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800110e:	f7ff fee5 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <HAL_UART_MspInit+0x248>)
 8001116:	671a      	str	r2, [r3, #112]	; 0x70
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <HAL_UART_MspInit+0x248>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001120:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <HAL_UART_MspInit+0x254>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001124:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001126:	2210      	movs	r2, #16
 8001128:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <HAL_UART_MspInit+0x250>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b58      	ldr	r3, [pc, #352]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113c:	4b55      	ldr	r3, [pc, #340]	; (8001294 <HAL_UART_MspInit+0x250>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001148:	4b52      	ldr	r3, [pc, #328]	; (8001294 <HAL_UART_MspInit+0x250>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	0152      	lsls	r2, r2, #5
 800114e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fa94 	bl	8001680 <HAL_DMA_Init>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 800115c:	f7ff febe 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001164:	66da      	str	r2, [r3, #108]	; 0x6c
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_UART_MspInit+0x250>)
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116c:	e086      	b.n	800127c <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a4a      	ldr	r2, [pc, #296]	; (800129c <HAL_UART_MspInit+0x258>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d000      	beq.n	800117a <HAL_UART_MspInit+0x136>
 8001178:	e080      	b.n	800127c <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART2_CLK_ENABLE();
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <HAL_UART_MspInit+0x244>)
 800117c:	69da      	ldr	r2, [r3, #28]
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <HAL_UART_MspInit+0x244>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0289      	lsls	r1, r1, #10
 8001184:	430a      	orrs	r2, r1
 8001186:	61da      	str	r2, [r3, #28]
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_UART_MspInit+0x244>)
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <HAL_UART_MspInit+0x244>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_UART_MspInit+0x244>)
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	0289      	lsls	r1, r1, #10
 80011a0:	430a      	orrs	r2, r1
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_UART_MspInit+0x244>)
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLM_TX_Pin|PLM_RX_Pin;
 80011b2:	211c      	movs	r1, #28
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2202      	movs	r2, #2
 80011be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2203      	movs	r2, #3
 80011ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2201      	movs	r2, #1
 80011d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	187a      	adds	r2, r7, r1
 80011d4:	2390      	movs	r3, #144	; 0x90
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	0011      	movs	r1, r2
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 fb56 	bl	800188c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_UART_MspInit+0x260>)
 80011e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 80011e8:	2210      	movs	r2, #16
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	0152      	lsls	r2, r2, #5
 8001210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fa33 	bl	8001680 <HAL_DMA_Init>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 800121e:	f7ff fe5d 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 8001226:	66da      	str	r2, [r3, #108]	; 0x6c
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_UART_MspInit+0x25c>)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_UART_MspInit+0x268>)
 8001232:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_UART_MspInit+0x264>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0x264>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001254:	2220      	movs	r2, #32
 8001256:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_UART_MspInit+0x264>)
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	0192      	lsls	r2, r2, #6
 800125e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fa0c 	bl	8001680 <HAL_DMA_Init>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 800126c:	f7ff fe36 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001274:	671a      	str	r2, [r3, #112]	; 0x70
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_UART_MspInit+0x264>)
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b00d      	add	sp, #52	; 0x34
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	40013800 	.word	0x40013800
 8001288:	40021000 	.word	0x40021000
 800128c:	200005f0 	.word	0x200005f0
 8001290:	40020030 	.word	0x40020030
 8001294:	20000634 	.word	0x20000634
 8001298:	4002001c 	.word	0x4002001c
 800129c:	40004400 	.word	0x40004400
 80012a0:	20000678 	.word	0x20000678
 80012a4:	40020044 	.word	0x40020044
 80012a8:	200006bc 	.word	0x200006bc
 80012ac:	40020058 	.word	0x40020058

080012b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	0019      	movs	r1, r3
 80012c6:	2016      	movs	r0, #22
 80012c8:	f000 f96e 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80012cc:	2016      	movs	r0, #22
 80012ce:	f000 f980 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_InitTick+0xa8>)
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_InitTick+0xa8>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	02c9      	lsls	r1, r1, #11
 80012dc:	430a      	orrs	r2, r1
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_InitTick+0xa8>)
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	02db      	lsls	r3, r3, #11
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ee:	230c      	movs	r3, #12
 80012f0:	18fa      	adds	r2, r7, r3
 80012f2:	2310      	movs	r3, #16
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fa5f 	bl	80027bc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012fe:	f001 fa47 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8001302:	0003      	movs	r3, r0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	4914      	ldr	r1, [pc, #80]	; (800135c <HAL_InitTick+0xac>)
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe fefc 	bl	8000108 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	3b01      	subs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0xb0>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_InitTick+0xb4>)
 800131a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_InitTick+0xb0>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_InitTick+0xb8>)
 8001320:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_InitTick+0xb0>)
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_InitTick+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_InitTick+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_InitTick+0xb0>)
 8001336:	0018      	movs	r0, r3
 8001338:	f001 fda4 	bl	8002e84 <HAL_TIM_Base_Init>
 800133c:	1e03      	subs	r3, r0, #0
 800133e:	d105      	bne.n	800134c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_InitTick+0xb0>)
 8001342:	0018      	movs	r0, r3
 8001344:	f001 fdf6 	bl	8002f34 <HAL_TIM_Base_Start_IT>
 8001348:	0003      	movs	r3, r0
 800134a:	e000      	b.n	800134e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b00a      	add	sp, #40	; 0x28
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	000f4240 	.word	0x000f4240
 8001360:	20001310 	.word	0x20001310
 8001364:	40014800 	.word	0x40014800
 8001368:	000003e7 	.word	0x000003e7

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f9c6 	bl	8001710 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001386:	0018      	movs	r0, r3
 8001388:	f000 f9c2 	bl	8001710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000634 	.word	0x20000634
 8001398:	200005f0 	.word	0x200005f0

0800139c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f000 f9b4 	bl	8001710 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <DMA1_Channel4_5_IRQHandler+0x20>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f9b0 	bl	8001710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	20000678 	.word	0x20000678
 80013bc:	200006bc 	.word	0x200006bc

080013c0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <TIM17_IRQHandler+0x14>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 fe00 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	20001310 	.word	0x20001310

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800140e:	f7ff ffe3 	bl	80013d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001412:	f003 fa25 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001416:	f7ff fa9d 	bl	8000954 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   r0, =_estack
 800141c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001428:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 800142c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001430:	20001490 	.word	0x20001490

08001434 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_IRQHandler>
	...

08001438 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_Init+0x24>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_Init+0x24>)
 8001442:	2110      	movs	r1, #16
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001448:	2003      	movs	r0, #3
 800144a:	f7ff ff31 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144e:	f7ff fd4b 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40022000 	.word	0x40022000

08001460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x1c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	18d2      	adds	r2, r2, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_IncTick+0x20>)
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20000004 	.word	0x20000004
 8001480:	20001358 	.word	0x20001358

08001484 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_GetTick+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	20001358 	.word	0x20001358

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b7f      	cmp	r3, #127	; 0x7f
 80014aa:	d809      	bhi.n	80014c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	001a      	movs	r2, r3
 80014b2:	231f      	movs	r3, #31
 80014b4:	401a      	ands	r2, r3
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_EnableIRQ+0x30>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	4091      	lsls	r1, r2
 80014bc:	000a      	movs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
  }
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	0002      	movs	r2, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b7f      	cmp	r3, #127	; 0x7f
 80014e0:	d828      	bhi.n	8001534 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e2:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <__NVIC_SetPriority+0xd4>)
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	33c0      	adds	r3, #192	; 0xc0
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	589b      	ldr	r3, [r3, r2]
 80014f2:	1dfa      	adds	r2, r7, #7
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	0011      	movs	r1, r2
 80014f8:	2203      	movs	r2, #3
 80014fa:	400a      	ands	r2, r1
 80014fc:	00d2      	lsls	r2, r2, #3
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	4091      	lsls	r1, r2
 8001502:	000a      	movs	r2, r1
 8001504:	43d2      	mvns	r2, r2
 8001506:	401a      	ands	r2, r3
 8001508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	22ff      	movs	r2, #255	; 0xff
 8001510:	401a      	ands	r2, r3
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	2303      	movs	r3, #3
 800151a:	4003      	ands	r3, r0
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001520:	481f      	ldr	r0, [pc, #124]	; (80015a0 <__NVIC_SetPriority+0xd4>)
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b25b      	sxtb	r3, r3
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	430a      	orrs	r2, r1
 800152c:	33c0      	adds	r3, #192	; 0xc0
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001532:	e031      	b.n	8001598 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <__NVIC_SetPriority+0xd8>)
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	0019      	movs	r1, r3
 800153c:	230f      	movs	r3, #15
 800153e:	400b      	ands	r3, r1
 8001540:	3b08      	subs	r3, #8
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3306      	adds	r3, #6
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	18d3      	adds	r3, r2, r3
 800154a:	3304      	adds	r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1dfa      	adds	r2, r7, #7
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	0011      	movs	r1, r2
 8001554:	2203      	movs	r2, #3
 8001556:	400a      	ands	r2, r1
 8001558:	00d2      	lsls	r2, r2, #3
 800155a:	21ff      	movs	r1, #255	; 0xff
 800155c:	4091      	lsls	r1, r2
 800155e:	000a      	movs	r2, r1
 8001560:	43d2      	mvns	r2, r2
 8001562:	401a      	ands	r2, r3
 8001564:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	22ff      	movs	r2, #255	; 0xff
 800156c:	401a      	ands	r2, r3
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	2303      	movs	r3, #3
 8001576:	4003      	ands	r3, r0
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <__NVIC_SetPriority+0xd8>)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	001c      	movs	r4, r3
 8001584:	230f      	movs	r3, #15
 8001586:	4023      	ands	r3, r4
 8001588:	3b08      	subs	r3, #8
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	430a      	orrs	r2, r1
 800158e:	3306      	adds	r3, #6
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	18c3      	adds	r3, r0, r3
 8001594:	3304      	adds	r3, #4
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b003      	add	sp, #12
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	210f      	movs	r1, #15
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	1c02      	adds	r2, r0, #0
 80015b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ff81 	bl	80014cc <__NVIC_SetPriority>
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	0002      	movs	r2, r0
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff57 	bl	8001498 <__NVIC_EnableIRQ>
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e039      	b.n	8001678 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7d5b      	ldrb	r3, [r3, #21]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fc90 	bl	8000f3c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	791b      	ldrb	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4252      	negs	r2, r2
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	e004      	b.n	8001640 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6892      	ldr	r2, [r2, #8]
 800163e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2260      	movs	r2, #96	; 0x60
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e036      	b.n	8001704 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2221      	movs	r2, #33	; 0x21
 800169a:	2102      	movs	r1, #2
 800169c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_DMA_Init+0x8c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 f8b4 	bl	8001854 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2221      	movs	r2, #33	; 0x21
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}  
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	ffffc00f 	.word	0xffffc00f

08001710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2204      	movs	r2, #4
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	d024      	beq.n	8001782 <HAL_DMA_IRQHandler+0x72>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d020      	beq.n	8001782 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2220      	movs	r2, #32
 8001748:	4013      	ands	r3, r2
 800174a:	d107      	bne.n	800175c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2104      	movs	r1, #4
 8001758:	438a      	bics	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	2104      	movs	r1, #4
 8001766:	4091      	lsls	r1, r2
 8001768:	000a      	movs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d100      	bne.n	8001776 <HAL_DMA_IRQHandler+0x66>
 8001774:	e06a      	b.n	800184c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	0010      	movs	r0, r2
 800177e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001780:	e064      	b.n	800184c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2202      	movs	r2, #2
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	d02b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xda>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d027      	beq.n	80017ea <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2220      	movs	r2, #32
 80017a2:	4013      	ands	r3, r2
 80017a4:	d10b      	bne.n	80017be <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	210a      	movs	r1, #10
 80017b2:	438a      	bics	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2221      	movs	r2, #33	; 0x21
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2102      	movs	r1, #2
 80017c8:	4091      	lsls	r1, r2
 80017ca:	000a      	movs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	2100      	movs	r1, #0
 80017d4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	0010      	movs	r0, r2
 80017e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80017e8:	e030      	b.n	800184c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	d028      	beq.n	800184c <HAL_DMA_IRQHandler+0x13c>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d024      	beq.n	800184c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	210e      	movs	r1, #14
 800180e:	438a      	bics	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	2101      	movs	r1, #1
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2221      	movs	r2, #33	; 0x21
 800182c:	2101      	movs	r1, #1
 800182e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	0010      	movs	r0, r2
 8001848:	4798      	blx	r3
    }
   }
}  
 800184a:	e7ff      	b.n	800184c <HAL_DMA_IRQHandler+0x13c>
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bd80      	pop	{r7, pc}

08001854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <DMA_CalcBaseAndBitshift+0x30>)
 8001862:	4694      	mov	ip, r2
 8001864:	4463      	add	r3, ip
 8001866:	2114      	movs	r1, #20
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe fc4d 	bl	8000108 <__udivsi3>
 800186e:	0003      	movs	r3, r0
 8001870:	009a      	lsls	r2, r3, #2
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <DMA_CalcBaseAndBitshift+0x34>)
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	bffdfff8 	.word	0xbffdfff8
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e14f      	b.n	8001b3c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <HAL_GPIO_Init+0x28>
 80018b2:	e140      	b.n	8001b36 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2201      	movs	r2, #1
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	4013      	ands	r3, r2
 8001936:	2b03      	cmp	r3, #3
 8001938:	d017      	beq.n	800196a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	43da      	mvns	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	4013      	ands	r3, r2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	58d3      	ldr	r3, [r2, r3]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2107      	movs	r1, #7
 80019a2:	400b      	ands	r3, r1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	401a      	ands	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_GPIO_Init+0x174>
 80019fe:	e09a      	b.n	8001b36 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	589b      	ldr	r3, [r3, r2]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	2390      	movs	r3, #144	; 0x90
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x1de>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <HAL_GPIO_Init+0x2d4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x1da>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x1d6>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e004      	b.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	2103      	movs	r1, #3
 8001a74:	400a      	ands	r2, r1
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a80:	4935      	ldr	r1, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43da      	mvns	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43da      	mvns	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	035b      	lsls	r3, r3, #13
 8001afa:	4013      	ands	r3, r2
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43da      	mvns	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	039b      	lsls	r3, r3, #14
 8001b24:	4013      	ands	r3, r2
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	40da      	lsrs	r2, r3
 8001b44:	1e13      	subs	r3, r2, #0
 8001b46:	d000      	beq.n	8001b4a <HAL_GPIO_Init+0x2be>
 8001b48:	e6a8      	b.n	800189c <HAL_GPIO_Init+0x10>
  } 
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b006      	add	sp, #24
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	0008      	movs	r0, r1
 8001b76:	0011      	movs	r1, r2
 8001b78:	1cbb      	adds	r3, r7, #2
 8001b7a:	1c02      	adds	r2, r0, #0
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	1c7b      	adds	r3, r7, #1
 8001b80:	1c0a      	adds	r2, r1, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b84:	1c7b      	adds	r3, r7, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8c:	1cbb      	adds	r3, r7, #2
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b96:	1cbb      	adds	r3, r7, #2
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e082      	b.n	8001cc0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2241      	movs	r2, #65	; 0x41
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff f9d1 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2241      	movs	r2, #65	; 0x41
 8001bda:	2124      	movs	r1, #36	; 0x24
 8001bdc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	438a      	bics	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4934      	ldr	r1, [pc, #208]	; (8001cc8 <HAL_I2C_Init+0x120>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4931      	ldr	r1, [pc, #196]	; (8001ccc <HAL_I2C_Init+0x124>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0209      	lsls	r1, r1, #8
 8001c20:	430a      	orrs	r2, r1
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	e007      	b.n	8001c36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2184      	movs	r1, #132	; 0x84
 8001c30:	0209      	lsls	r1, r1, #8
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d104      	bne.n	8001c48 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	491f      	ldr	r1, [pc, #124]	; (8001cd0 <HAL_I2C_Init+0x128>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	491a      	ldr	r1, [pc, #104]	; (8001ccc <HAL_I2C_Init+0x124>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69d9      	ldr	r1, [r3, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2241      	movs	r2, #65	; 0x41
 8001cac:	2120      	movs	r1, #32
 8001cae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2242      	movs	r2, #66	; 0x42
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	f0ffffff 	.word	0xf0ffffff
 8001ccc:	ffff7fff 	.word	0xffff7fff
 8001cd0:	02008000 	.word	0x02008000

08001cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2241      	movs	r2, #65	; 0x41
 8001ce2:	5c9b      	ldrb	r3, [r3, r2]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d138      	bne.n	8001d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	5c9b      	ldrb	r3, [r3, r2]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e032      	b.n	8001d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2241      	movs	r2, #65	; 0x41
 8001d04:	2124      	movs	r1, #36	; 0x24
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4911      	ldr	r1, [pc, #68]	; (8001d68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2241      	movs	r2, #65	; 0x41
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	ffffefff 	.word	0xffffefff

08001d6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2241      	movs	r2, #65	; 0x41
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	d139      	bne.n	8001df6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e033      	b.n	8001df8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2241      	movs	r2, #65	; 0x41
 8001d9c:	2124      	movs	r1, #36	; 0x24
 8001d9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2241      	movs	r2, #65	; 0x41
 8001de6:	2120      	movs	r1, #32
 8001de8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	2100      	movs	r1, #0
 8001df0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
  }
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	fffff0ff 	.word	0xfffff0ff

08001e04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03d      	b.n	8001e92 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <HAL_IWDG_Init+0x98>)
 8001e1c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_IWDG_Init+0x9c>)
 8001e24:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6852      	ldr	r2, [r2, #4]
 8001e2e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6892      	ldr	r2, [r2, #8]
 8001e38:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001e3a:	f7ff fb23 	bl	8001484 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e42:	e00e      	b.n	8001e62 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001e44:	f7ff fb1e 	bl	8001484 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b27      	cmp	r3, #39	; 0x27
 8001e50:	d907      	bls.n	8001e62 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d001      	beq.n	8001e62 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e017      	b.n	8001e92 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1ea      	bne.n	8001e44 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d005      	beq.n	8001e88 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68d2      	ldr	r2, [r2, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	e003      	b.n	8001e90 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_IWDG_Init+0xa0>)
 8001e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	0000cccc 	.word	0x0000cccc
 8001ea0:	00005555 	.word	0x00005555
 8001ea4:	0000aaaa 	.word	0x0000aaaa

08001ea8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IWDG_Refresh+0x1c>)
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	0000aaaa 	.word	0x0000aaaa

08001ec8 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0049      	lsls	r1, r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40007000 	.word	0x40007000

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e301      	b.n	80024fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1e>
 8001f00:	e08d      	b.n	800201e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f02:	4bc3      	ldr	r3, [pc, #780]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	220c      	movs	r2, #12
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d00e      	beq.n	8001f2c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0e:	4bc0      	ldr	r3, [pc, #768]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	220c      	movs	r2, #12
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x64>
 8001f1a:	4bbd      	ldr	r3, [pc, #756]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	025b      	lsls	r3, r3, #9
 8001f22:	401a      	ands	r2, r3
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4bb8      	ldr	r3, [pc, #736]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	029b      	lsls	r3, r3, #10
 8001f34:	4013      	ands	r3, r2
 8001f36:	d100      	bne.n	8001f3a <HAL_RCC_OscConfig+0x56>
 8001f38:	e070      	b.n	800201c <HAL_RCC_OscConfig+0x138>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d000      	beq.n	8001f44 <HAL_RCC_OscConfig+0x60>
 8001f42:	e06b      	b.n	800201c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e2d8      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x7c>
 8001f50:	4baf      	ldr	r3, [pc, #700]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4bae      	ldr	r3, [pc, #696]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0249      	lsls	r1, r1, #9
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e02f      	b.n	8001fc0 <HAL_RCC_OscConfig+0xdc>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x9e>
 8001f68:	4ba9      	ldr	r3, [pc, #676]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4ba8      	ldr	r3, [pc, #672]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	49a9      	ldr	r1, [pc, #676]	; (8002214 <HAL_RCC_OscConfig+0x330>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4ba6      	ldr	r3, [pc, #664]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4ba5      	ldr	r3, [pc, #660]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	49a7      	ldr	r1, [pc, #668]	; (8002218 <HAL_RCC_OscConfig+0x334>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e01e      	b.n	8001fc0 <HAL_RCC_OscConfig+0xdc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d10e      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xc4>
 8001f8a:	4ba1      	ldr	r3, [pc, #644]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4ba0      	ldr	r3, [pc, #640]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	02c9      	lsls	r1, r1, #11
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4b9d      	ldr	r3, [pc, #628]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0249      	lsls	r1, r1, #9
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xdc>
 8001fa8:	4b99      	ldr	r3, [pc, #612]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	4999      	ldr	r1, [pc, #612]	; (8002214 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	4b96      	ldr	r3, [pc, #600]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b95      	ldr	r3, [pc, #596]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	4997      	ldr	r1, [pc, #604]	; (8002218 <HAL_RCC_OscConfig+0x334>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d014      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fa5c 	bl	8001484 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa57 	bl	8001484 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e28a      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0xee>
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fa47 	bl	8001484 <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fa42 	bl	8001484 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e275      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	029b      	lsls	r3, r3, #10
 8002016:	4013      	ands	r3, r2
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x118>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x146>
 8002028:	e069      	b.n	80020fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	220c      	movs	r2, #12
 8002030:	4013      	ands	r3, r2
 8002032:	d00b      	beq.n	800204c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	220c      	movs	r2, #12
 800203a:	4013      	ands	r3, r2
 800203c:	2b08      	cmp	r3, #8
 800203e:	d11c      	bne.n	800207a <HAL_RCC_OscConfig+0x196>
 8002040:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	025b      	lsls	r3, r3, #9
 8002048:	4013      	ands	r3, r2
 800204a:	d116      	bne.n	800207a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2202      	movs	r2, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x17e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e24b      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22f8      	movs	r2, #248	; 0xf8
 8002068:	4393      	bics	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	00da      	lsls	r2, r3, #3
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002078:	e041      	b.n	80020fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f9f9 	bl	8001484 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff f9f4 	bl	8001484 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e227      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0f1      	beq.n	8002098 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	22f8      	movs	r2, #248	; 0xf8
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff f9d4 	bl	8001484 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff f9cf 	bl	8001484 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e202      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f1      	bne.n	80020e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2208      	movs	r2, #8
 8002104:	4013      	ands	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002114:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002116:	2101      	movs	r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff f9b2 	bl	8001484 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff f9ad 	bl	8001484 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1e0      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d0f1      	beq.n	8002126 <HAL_RCC_OscConfig+0x242>
 8002142:	e018      	b.n	8002176 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002144:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff f998 	bl	8001484 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff f993 	bl	8001484 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1c6      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d1f1      	bne.n	800215a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2204      	movs	r2, #4
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x29e>
 8002180:	e0b4      	b.n	80022ec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	201f      	movs	r0, #31
 8002184:	183b      	adds	r3, r7, r0
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	055b      	lsls	r3, r3, #21
 8002192:	4013      	ands	r3, r2
 8002194:	d110      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0549      	lsls	r1, r1, #21
 80021a0:	430a      	orrs	r2, r1
 80021a2:	61da      	str	r2, [r3, #28]
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	055b      	lsls	r3, r3, #21
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021b2:	183b      	adds	r3, r7, r0
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_RCC_OscConfig+0x338>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	d11a      	bne.n	80021fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x338>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_OscConfig+0x338>)
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	0049      	lsls	r1, r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7ff f957 	bl	8001484 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021dc:	f7ff f952 	bl	8001484 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e185      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x338>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10e      	bne.n	8002220 <HAL_RCC_OscConfig+0x33c>
 8002202:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_OscConfig+0x32c>)
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	621a      	str	r2, [r3, #32]
 800220e:	e035      	b.n	800227c <HAL_RCC_OscConfig+0x398>
 8002210:	40021000 	.word	0x40021000
 8002214:	fffeffff 	.word	0xfffeffff
 8002218:	fffbffff 	.word	0xfffbffff
 800221c:	40007000 	.word	0x40007000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x35e>
 8002228:	4bb6      	ldr	r3, [pc, #728]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	4bb5      	ldr	r3, [pc, #724]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	621a      	str	r2, [r3, #32]
 8002234:	4bb3      	ldr	r3, [pc, #716]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	4bb2      	ldr	r3, [pc, #712]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800223a:	2104      	movs	r1, #4
 800223c:	438a      	bics	r2, r1
 800223e:	621a      	str	r2, [r3, #32]
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x398>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x380>
 800224a:	4bae      	ldr	r3, [pc, #696]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	4bad      	ldr	r3, [pc, #692]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002250:	2104      	movs	r1, #4
 8002252:	430a      	orrs	r2, r1
 8002254:	621a      	str	r2, [r3, #32]
 8002256:	4bab      	ldr	r3, [pc, #684]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	4baa      	ldr	r3, [pc, #680]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	621a      	str	r2, [r3, #32]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x398>
 8002264:	4ba7      	ldr	r3, [pc, #668]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	4ba6      	ldr	r3, [pc, #664]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	4ba4      	ldr	r3, [pc, #656]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4ba3      	ldr	r3, [pc, #652]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d014      	beq.n	80022ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff f8fe 	bl	8001484 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff f8f9 	bl	8001484 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a9b      	ldr	r2, [pc, #620]	; (8002508 <HAL_RCC_OscConfig+0x624>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e12b      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	4b98      	ldr	r3, [pc, #608]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x3aa>
 80022ac:	e013      	b.n	80022d6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff f8e9 	bl	8001484 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	e009      	b.n	80022cc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff f8e4 	bl	8001484 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a91      	ldr	r2, [pc, #580]	; (8002508 <HAL_RCC_OscConfig+0x624>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e116      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	4b8d      	ldr	r3, [pc, #564]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d6:	231f      	movs	r3, #31
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	4b87      	ldr	r3, [pc, #540]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80022e6:	4989      	ldr	r1, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0x628>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d12a      	bne.n	8002354 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022fe:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b80      	ldr	r3, [pc, #512]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002304:	2104      	movs	r1, #4
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800230a:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800230c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230e:	4b7d      	ldr	r3, [pc, #500]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7ff f8b5 	bl	8001484 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002320:	f7ff f8b0 	bl	8001484 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0e3      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002332:	4b74      	ldr	r3, [pc, #464]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800233c:	4b71      	ldr	r3, [pc, #452]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	22f8      	movs	r2, #248	; 0xf8
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	00da      	lsls	r2, r3, #3
 800234c:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34
 8002352:	e034      	b.n	80023be <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	3305      	adds	r3, #5
 800235a:	d111      	bne.n	8002380 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800235c:	4b69      	ldr	r3, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800235e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002362:	2104      	movs	r1, #4
 8002364:	438a      	bics	r2, r1
 8002366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	22f8      	movs	r2, #248	; 0xf8
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	00da      	lsls	r2, r3, #3
 8002378:	4b62      	ldr	r3, [pc, #392]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800237a:	430a      	orrs	r2, r1
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
 800237e:	e01e      	b.n	80023be <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002380:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002384:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002386:	2104      	movs	r1, #4
 8002388:	430a      	orrs	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800238c:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff f874 	bl	8001484 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023a2:	f7ff f86f 	bl	8001484 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0a2      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d100      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4e4>
 80023c6:	e097      	b.n	80024f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	220c      	movs	r2, #12
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d100      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4f2>
 80023d4:	e06b      	b.n	80024ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d14c      	bne.n	8002478 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80023e4:	494a      	ldr	r1, [pc, #296]	; (8002510 <HAL_RCC_OscConfig+0x62c>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff f84b 	bl	8001484 <HAL_GetTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7ff f846 	bl	8001484 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e079      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	049b      	lsls	r3, r3, #18
 800240e:	4013      	ands	r3, r2
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002412:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	220f      	movs	r2, #15
 8002418:	4393      	bics	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x630>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	431a      	orrs	r2, r3
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0449      	lsls	r1, r1, #17
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7ff f819 	bl	8001484 <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f814 	bl	8001484 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e047      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	049b      	lsls	r3, r3, #18
 8002472:	4013      	ands	r3, r2
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x574>
 8002476:	e03f      	b.n	80024f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 800247e:	4924      	ldr	r1, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x62c>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fffe 	bl	8001484 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fff9 	bl	8001484 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e02c      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	049b      	lsls	r3, r3, #18
 80024a8:	4013      	ands	r3, r2
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x5aa>
 80024ac:	e024      	b.n	80024f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01f      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x620>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	025b      	lsls	r3, r3, #9
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d10e      	bne.n	80024f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	220f      	movs	r2, #15
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	23f0      	movs	r3, #240	; 0xf0
 80024e8:	039b      	lsls	r3, r3, #14
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b008      	add	sp, #32
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40021000 	.word	0x40021000
 8002508:	00001388 	.word	0x00001388
 800250c:	efffffff 	.word	0xefffffff
 8002510:	feffffff 	.word	0xfeffffff
 8002514:	ffc2ffff 	.word	0xffc2ffff

08002518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b3      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d911      	bls.n	800255e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e09a      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d015      	beq.n	8002594 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d006      	beq.n	8002580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002572:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002578:	21e0      	movs	r1, #224	; 0xe0
 800257a:	00c9      	lsls	r1, r1, #3
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	22f0      	movs	r2, #240	; 0xf0
 8002586:	4393      	bics	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d040      	beq.n	8002620 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	4013      	ands	r3, r2
 80025b0:	d114      	bne.n	80025dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06e      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	049b      	lsls	r3, r3, #18
 80025c6:	4013      	ands	r3, r2
 80025c8:	d108      	bne.n	80025dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e062      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e05b      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	4393      	bics	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe ff48 	bl	8001484 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	e009      	b.n	800260e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f7fe ff43 	bl	8001484 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_RCC_ClockConfig+0x18c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e042      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	220c      	movs	r2, #12
 8002614:	401a      	ands	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1ec      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d211      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	4393      	bics	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x184>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e020      	b.n	8002694 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2204      	movs	r2, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_RCC_ClockConfig+0x190>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002670:	f000 f820 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002674:	0001      	movs	r1, r0
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x188>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	220f      	movs	r2, #15
 800267e:	4013      	ands	r3, r2
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x194>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	000a      	movs	r2, r1
 8002686:	40da      	lsrs	r2, r3
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x198>)
 800268a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800268c:	2003      	movs	r0, #3
 800268e:	f7fe fe0f 	bl	80012b0 <HAL_InitTick>
  
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b004      	add	sp, #16
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	fffff8ff 	.word	0xfffff8ff
 80026ac:	08004b14 	.word	0x08004b14
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b08f      	sub	sp, #60	; 0x3c
 80026b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026ba:	2314      	movs	r3, #20
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c2:	c313      	stmia	r3!, {r0, r1, r4}
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4a29      	ldr	r2, [pc, #164]	; (8002770 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ce:	c313      	stmia	r3!, {r0, r1, r4}
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d002      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x4a>
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d003      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x50>
 80026fc:	e02d      	b.n	800275a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002702:	e02d      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	0c9b      	lsrs	r3, r3, #18
 8002708:	220f      	movs	r2, #15
 800270a:	4013      	ands	r3, r2
 800270c:	2214      	movs	r2, #20
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	220f      	movs	r2, #15
 800271a:	4013      	ands	r3, r2
 800271c:	1d3a      	adds	r2, r7, #4
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	025b      	lsls	r3, r3, #9
 8002728:	4013      	ands	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800272c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272e:	4812      	ldr	r0, [pc, #72]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002730:	f7fd fcea 	bl	8000108 <__udivsi3>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	4353      	muls	r3, r2
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	e009      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002742:	000a      	movs	r2, r1
 8002744:	0152      	lsls	r2, r2, #5
 8002746:	1a52      	subs	r2, r2, r1
 8002748:	0193      	lsls	r3, r2, #6
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	185b      	adds	r3, r3, r1
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002758:	e002      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800275e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b00f      	add	sp, #60	; 0x3c
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	08004aec 	.word	0x08004aec
 8002770:	08004afc 	.word	0x08004afc
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <HAL_RCC_GetHCLKFreq+0x10>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002794:	f7ff fff2 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8002798:	0001      	movs	r1, r0
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	2207      	movs	r2, #7
 80027a2:	4013      	ands	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	40d9      	lsrs	r1, r3
 80027aa:	000b      	movs	r3, r1
}    
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004b24 	.word	0x08004b24

080027bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_RCC_GetClockConfig+0x4c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_GetClockConfig+0x4c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	22f0      	movs	r2, #240	; 0xf0
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_RCC_GetClockConfig+0x4c>)
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	23e0      	movs	r3, #224	; 0xe0
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_GetClockConfig+0x50>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	401a      	ands	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40021000 	.word	0x40021000
 800280c:	40022000 	.word	0x40022000

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	025b      	lsls	r3, r3, #9
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800282c:	e08e      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2017      	movs	r0, #23
 8002830:	183b      	adds	r3, r7, r0
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	055b      	lsls	r3, r3, #21
 800283e:	4013      	ands	r3, r2
 8002840:	d110      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0549      	lsls	r1, r1, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	055b      	lsls	r3, r3, #21
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	183b      	adds	r3, r7, r0
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4013      	ands	r3, r2
 800286e:	d11a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002870:	4b49      	ldr	r3, [pc, #292]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b48      	ldr	r3, [pc, #288]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	0049      	lsls	r1, r1, #1
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fe01 	bl	8001484 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	e008      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002888:	f7fe fdfc 	bl	8001484 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e077      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d034      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d02c      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a33      	ldr	r2, [pc, #204]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	0249      	lsls	r1, r1, #9
 80028dc:	430a      	orrs	r2, r1
 80028de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028e6:	492e      	ldr	r1, [pc, #184]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe fdc3 	bl	8001484 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe fdbe 	bl	8001484 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e038      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002932:	430a      	orrs	r2, r1
 8002934:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002936:	2317      	movs	r3, #23
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002946:	4918      	ldr	r1, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002948:	400a      	ands	r2, r1
 800294a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	2203      	movs	r2, #3
 800295c:	4393      	bics	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2220      	movs	r2, #32
 8002970:	4013      	ands	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	2210      	movs	r2, #16
 800297a:	4393      	bics	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002984:	430a      	orrs	r2, r1
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b006      	add	sp, #24
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	fffffcff 	.word	0xfffffcff
 80029a0:	fffeffff 	.word	0xfffeffff
 80029a4:	00001388 	.word	0x00001388
 80029a8:	efffffff 	.word	0xefffffff

080029ac <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e081      	b.n	8002ac2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7f5b      	ldrb	r3, [r3, #29]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe fb1f 	bl	8001014 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ca      	movs	r2, #202	; 0xca
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2253      	movs	r2, #83	; 0x53
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f9fb 	bl	8002dea <RTC_EnterInitMode>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e05b      	b.n	8002ac2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RTC_Init+0x120>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68d2      	ldr	r2, [r2, #12]
 8002a40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	438a      	bics	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d10e      	bne.n	8002a90 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f98f 	bl	8002d98 <HAL_RTC_WaitForSynchro>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e018      	b.n	8002ac2 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <HAL_RTC_Init+0x124>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
  }
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b002      	add	sp, #8
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	ff8fffbf 	.word	0xff8fffbf
 8002ad0:	fffbffff 	.word	0xfffbffff

08002ad4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	7f1b      	ldrb	r3, [r3, #28]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_RTC_SetTime+0x1c>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e0a5      	b.n	8002c3c <HAL_RTC_SetTime+0x168>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d125      	bne.n	8002b4e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d102      	bne.n	8002b14 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f992 	bl	8002e42 <RTC_ByteToBcd2>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f98b 	bl	8002e42 <RTC_ByteToBcd2>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b30:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	789b      	ldrb	r3, [r3, #2]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f983 	bl	8002e42 <RTC_ByteToBcd2>
 8002b3c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b3e:	0022      	movs	r2, r4
 8002b40:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	78db      	ldrb	r3, [r3, #3]
 8002b46:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e017      	b.n	8002b7e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	4013      	ands	r3, r2
 8002b58:	d102      	bne.n	8002b60 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b6c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	78db      	ldrb	r3, [r3, #3]
 8002b78:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	22ca      	movs	r2, #202	; 0xca
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2253      	movs	r2, #83	; 0x53
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f92a 	bl	8002dea <RTC_EnterInitMode>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e044      	b.n	8002c3c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RTC_SetTime+0x170>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	491f      	ldr	r1, [pc, #124]	; (8002c48 <HAL_RTC_SetTime+0x174>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d111      	bne.n	8002c26 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f8c7 	bl	8002d98 <HAL_RTC_WaitForSynchro>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	22ff      	movs	r2, #255	; 0xff
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00a      	b.n	8002c3c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
  }
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b007      	add	sp, #28
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	007f7f7f 	.word	0x007f7f7f
 8002c48:	fffbffff 	.word	0xfffbffff

08002c4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_RTC_SetDate+0x1c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e091      	b.n	8002d8c <HAL_RTC_SetDate+0x140>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_RTC_SetDate+0x4c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	001a      	movs	r2, r3
 8002c80:	2310      	movs	r3, #16
 8002c82:	4013      	ands	r3, r2
 8002c84:	d008      	beq.n	8002c98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	330a      	adds	r3, #10
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f8cd 	bl	8002e42 <RTC_ByteToBcd2>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 f8c6 	bl	8002e42 <RTC_ByteToBcd2>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	789b      	ldrb	r3, [r3, #2]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f8be 	bl	8002e42 <RTC_ByteToBcd2>
 8002cc6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002cc8:	0022      	movs	r2, r4
 8002cca:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e00e      	b.n	8002cf6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ce4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ca      	movs	r2, #202	; 0xca
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2253      	movs	r2, #83	; 0x53
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f86e 	bl	8002dea <RTC_EnterInitMode>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e030      	b.n	8002d8c <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4918      	ldr	r1, [pc, #96]	; (8002d94 <HAL_RTC_SetDate+0x148>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	438a      	bics	r2, r1
 8002d44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f81f 	bl	8002d98 <HAL_RTC_WaitForSynchro>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	22ff      	movs	r2, #255	; 0xff
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00a      	b.n	8002d8c <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
  }
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b007      	add	sp, #28
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	00ffff3f 	.word	0x00ffff3f

08002d98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	21a0      	movs	r1, #160	; 0xa0
 8002db0:	438a      	bics	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002db4:	f7fe fb66 	bl	8001484 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dbe:	f7fe fb61 	bl	8001484 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	23fa      	movs	r3, #250	; 0xfa
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d901      	bls.n	8002dd4 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}

08002dea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d11a      	bne.n	8002e38 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4252      	negs	r2, r2
 8002e0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e0c:	f7fe fb3a 	bl	8001484 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e14:	e00a      	b.n	8002e2c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e16:	f7fe fb35 	bl	8001484 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	23fa      	movs	r3, #250	; 0xfa
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d901      	bls.n	8002e2c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d0ee      	beq.n	8002e16 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	0002      	movs	r2, r0
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002e52:	e007      	b.n	8002e64 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	1dfa      	adds	r2, r7, #7
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	3a0a      	subs	r2, #10
 8002e62:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d8f3      	bhi.n	8002e54 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e042      	b.n	8002f1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	223d      	movs	r2, #61	; 0x3d
 8002e9a:	5c9b      	ldrb	r3, [r3, r2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	223c      	movs	r2, #60	; 0x3c
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 f839 	bl	8002f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	223d      	movs	r2, #61	; 0x3d
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	f000 f9b7 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2246      	movs	r2, #70	; 0x46
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	223e      	movs	r2, #62	; 0x3e
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2240      	movs	r2, #64	; 0x40
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2242      	movs	r2, #66	; 0x42
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2243      	movs	r2, #67	; 0x43
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2244      	movs	r2, #68	; 0x44
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2245      	movs	r2, #69	; 0x45
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	; 0x3d
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	223d      	movs	r2, #61	; 0x3d
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e035      	b.n	8002fb8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	223d      	movs	r2, #61	; 0x3d
 8002f50:	2102      	movs	r1, #2
 8002f52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_TIM_Base_Start_IT+0x8c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d009      	beq.n	8002f82 <HAL_TIM_Base_Start_IT+0x4e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_TIM_Base_Start_IT+0x90>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIM_Base_Start_IT+0x4e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_TIM_Base_Start_IT+0x94>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d111      	bne.n	8002fa6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d010      	beq.n	8002fb6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	e007      	b.n	8002fb6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40014000 	.word	0x40014000

08002fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d124      	bne.n	800302c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d11d      	bne.n	800302c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4252      	negs	r2, r2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2203      	movs	r2, #3
 8003008:	4013      	ands	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f8fa 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003014:	e007      	b.n	8003026 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f8ed 	bl	80031f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f8f9 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	2b04      	cmp	r3, #4
 8003038:	d125      	bne.n	8003086 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2204      	movs	r2, #4
 8003042:	4013      	ands	r3, r2
 8003044:	2b04      	cmp	r3, #4
 8003046:	d11e      	bne.n	8003086 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2205      	movs	r2, #5
 800304e:	4252      	negs	r2, r2
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f8cd 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 800306e:	e007      	b.n	8003080 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f8c0 	bl	80031f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 f8cc 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2208      	movs	r2, #8
 800308e:	4013      	ands	r3, r2
 8003090:	2b08      	cmp	r3, #8
 8003092:	d124      	bne.n	80030de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2208      	movs	r2, #8
 800309c:	4013      	ands	r3, r2
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11d      	bne.n	80030de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2209      	movs	r2, #9
 80030a8:	4252      	negs	r2, r2
 80030aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 f8a1 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 80030c6:	e007      	b.n	80030d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 f894 	bl	80031f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 f8a0 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2210      	movs	r2, #16
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d125      	bne.n	8003138 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2210      	movs	r2, #16
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d11e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2211      	movs	r2, #17
 8003100:	4252      	negs	r2, r2
 8003102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2208      	movs	r2, #8
 8003108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	23c0      	movs	r3, #192	; 0xc0
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4013      	ands	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f874 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003120:	e007      	b.n	8003132 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f867 	bl	80031f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f000 f873 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2201      	movs	r2, #1
 8003140:	4013      	ands	r3, r2
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10f      	bne.n	8003166 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	2b01      	cmp	r3, #1
 8003152:	d108      	bne.n	8003166 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2202      	movs	r2, #2
 800315a:	4252      	negs	r2, r2
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7fd fea9 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	4013      	ands	r3, r2
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d10f      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	4013      	ands	r3, r2
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d108      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2281      	movs	r2, #129	; 0x81
 8003188:	4252      	negs	r2, r2
 800318a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f8d0 	bl	8003334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	4013      	ands	r3, r2
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d10f      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2240      	movs	r2, #64	; 0x40
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d108      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	4252      	negs	r2, r2
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f833 	bl	8003228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d10f      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	4013      	ands	r3, r2
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d108      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	4252      	negs	r2, r2
 80031e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f89a 	bl	8003324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b002      	add	sp, #8
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <TIM_Base_SetConfig+0xd0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_Base_SetConfig+0x20>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a2e      	ldr	r2, [pc, #184]	; (800330c <TIM_Base_SetConfig+0xd4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2270      	movs	r2, #112	; 0x70
 800325c:	4393      	bics	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <TIM_Base_SetConfig+0xd0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <TIM_Base_SetConfig+0xd4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00f      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a24      	ldr	r2, [pc, #144]	; (8003310 <TIM_Base_SetConfig+0xd8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a23      	ldr	r2, [pc, #140]	; (8003314 <TIM_Base_SetConfig+0xdc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <TIM_Base_SetConfig+0xe0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a21      	ldr	r2, [pc, #132]	; (800331c <TIM_Base_SetConfig+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <TIM_Base_SetConfig+0xe8>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	4393      	bics	r3, r2
 80032b2:	001a      	movs	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_Base_SetConfig+0xd0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0xba>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <TIM_Base_SetConfig+0xdc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0xba>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <TIM_Base_SetConfig+0xe0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0xba>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0b      	ldr	r2, [pc, #44]	; (800331c <TIM_Base_SetConfig+0xe4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d103      	bne.n	80032fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	615a      	str	r2, [r3, #20]
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40000400 	.word	0x40000400
 8003310:	40002000 	.word	0x40002000
 8003314:	40014000 	.word	0x40014000
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800
 8003320:	fffffcff 	.word	0xfffffcff

08003324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e044      	b.n	80033e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2274      	movs	r2, #116	; 0x74
 8003362:	2100      	movs	r1, #0
 8003364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f7fd fe6b 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2224      	movs	r2, #36	; 0x24
 8003372:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2101      	movs	r1, #1
 8003380:	438a      	bics	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0018      	movs	r0, r3
 8003388:	f000 f8da 	bl	8003540 <UART_SetConfig>
 800338c:	0003      	movs	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e024      	b.n	80033e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f000 fa0d 	bl	80037c0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	490d      	ldr	r1, [pc, #52]	; (80033e8 <HAL_UART_Init+0xa4>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2108      	movs	r1, #8
 80033c2:	438a      	bics	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 faa5 	bl	8003928 <UART_CheckIdleState>
 80033de:	0003      	movs	r3, r0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	fffff7ff 	.word	0xfffff7ff

080033ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	1dbb      	adds	r3, r7, #6
 80033fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003400:	2b20      	cmp	r3, #32
 8003402:	d000      	beq.n	8003406 <HAL_UART_Transmit+0x1a>
 8003404:	e096      	b.n	8003534 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_UART_Transmit+0x28>
 800340c:	1dbb      	adds	r3, r7, #6
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e08e      	b.n	8003536 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	015b      	lsls	r3, r3, #5
 8003420:	429a      	cmp	r2, r3
 8003422:	d109      	bne.n	8003438 <HAL_UART_Transmit+0x4c>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2201      	movs	r2, #1
 8003430:	4013      	ands	r3, r2
 8003432:	d001      	beq.n	8003438 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e07e      	b.n	8003536 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2274      	movs	r2, #116	; 0x74
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit+0x5a>
 8003442:	2302      	movs	r3, #2
 8003444:	e077      	b.n	8003536 <HAL_UART_Transmit+0x14a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2274      	movs	r2, #116	; 0x74
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	2100      	movs	r1, #0
 8003454:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2221      	movs	r2, #33	; 0x21
 800345a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800345c:	f7fe f812 	bl	8001484 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1dba      	adds	r2, r7, #6
 8003468:	2150      	movs	r1, #80	; 0x50
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1dba      	adds	r2, r7, #6
 8003472:	2152      	movs	r1, #82	; 0x52
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	015b      	lsls	r3, r3, #5
 8003480:	429a      	cmp	r2, r3
 8003482:	d108      	bne.n	8003496 <HAL_UART_Transmit+0xaa>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e003      	b.n	800349e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2274      	movs	r2, #116	; 0x74
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80034a6:	e02d      	b.n	8003504 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	0013      	movs	r3, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	f000 fa7f 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e039      	b.n	8003536 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	05d2      	lsls	r2, r2, #23
 80034d2:	0dd2      	lsrs	r2, r2, #23
 80034d4:	b292      	uxth	r2, r2
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	3302      	adds	r3, #2
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e008      	b.n	80034f2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b292      	uxth	r2, r2
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2252      	movs	r2, #82	; 0x52
 80034f6:	5a9b      	ldrh	r3, [r3, r2]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b299      	uxth	r1, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2252      	movs	r2, #82	; 0x52
 8003502:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2252      	movs	r2, #82	; 0x52
 8003508:	5a9b      	ldrh	r3, [r3, r2]
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1cb      	bne.n	80034a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	f000 fa4b 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e005      	b.n	8003536 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b008      	add	sp, #32
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003548:	231e      	movs	r3, #30
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8d      	ldr	r2, [pc, #564]	; (80037a4 <UART_SetConfig+0x264>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a88      	ldr	r2, [pc, #544]	; (80037a8 <UART_SetConfig+0x268>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a7f      	ldr	r2, [pc, #508]	; (80037ac <UART_SetConfig+0x26c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7b      	ldr	r2, [pc, #492]	; (80037b0 <UART_SetConfig+0x270>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d127      	bne.n	8003616 <UART_SetConfig+0xd6>
 80035c6:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <UART_SetConfig+0x274>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	2203      	movs	r2, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d00d      	beq.n	80035ee <UART_SetConfig+0xae>
 80035d2:	d81b      	bhi.n	800360c <UART_SetConfig+0xcc>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d014      	beq.n	8003602 <UART_SetConfig+0xc2>
 80035d8:	d818      	bhi.n	800360c <UART_SetConfig+0xcc>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <UART_SetConfig+0xa4>
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d00a      	beq.n	80035f8 <UART_SetConfig+0xb8>
 80035e2:	e013      	b.n	800360c <UART_SetConfig+0xcc>
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e021      	b.n	8003632 <UART_SetConfig+0xf2>
 80035ee:	231f      	movs	r3, #31
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e01c      	b.n	8003632 <UART_SetConfig+0xf2>
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e017      	b.n	8003632 <UART_SetConfig+0xf2>
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2208      	movs	r2, #8
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e012      	b.n	8003632 <UART_SetConfig+0xf2>
 800360c:	231f      	movs	r3, #31
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2210      	movs	r2, #16
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0xf2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <UART_SetConfig+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d104      	bne.n	800362a <UART_SetConfig+0xea>
 8003620:	231f      	movs	r3, #31
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e003      	b.n	8003632 <UART_SetConfig+0xf2>
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2210      	movs	r2, #16
 8003630:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	429a      	cmp	r2, r3
 800363c:	d15d      	bne.n	80036fa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800363e:	231f      	movs	r3, #31
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d015      	beq.n	8003674 <UART_SetConfig+0x134>
 8003648:	dc18      	bgt.n	800367c <UART_SetConfig+0x13c>
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00d      	beq.n	800366a <UART_SetConfig+0x12a>
 800364e:	dc15      	bgt.n	800367c <UART_SetConfig+0x13c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <UART_SetConfig+0x11a>
 8003654:	2b02      	cmp	r3, #2
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0x124>
 8003658:	e010      	b.n	800367c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365a:	f7ff f899 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800365e:	0003      	movs	r3, r0
 8003660:	61bb      	str	r3, [r7, #24]
        break;
 8003662:	e012      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <UART_SetConfig+0x27c>)
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e00f      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7ff f823 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]
        break;
 8003672:	e00a      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	61bb      	str	r3, [r7, #24]
        break;
 800367a:	e006      	b.n	800368a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003680:	231e      	movs	r3, #30
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
        break;
 8003688:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <UART_SetConfig+0x152>
 8003690:	e07b      	b.n	800378a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	005a      	lsls	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	18d2      	adds	r2, r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0019      	movs	r1, r3
 80036a4:	0010      	movs	r0, r2
 80036a6:	f7fc fd2f 	bl	8000108 <__udivsi3>
 80036aa:	0003      	movs	r3, r0
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	d91c      	bls.n	80036f0 <UART_SetConfig+0x1b0>
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	429a      	cmp	r2, r3
 80036be:	d217      	bcs.n	80036f0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	200e      	movs	r0, #14
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	210f      	movs	r1, #15
 80036ca:	438a      	bics	r2, r1
 80036cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2207      	movs	r2, #7
 80036d6:	4013      	ands	r3, r2
 80036d8:	b299      	uxth	r1, r3
 80036da:	183b      	adds	r3, r7, r0
 80036dc:	183a      	adds	r2, r7, r0
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	183a      	adds	r2, r7, r0
 80036ea:	8812      	ldrh	r2, [r2, #0]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e04c      	b.n	800378a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80036f0:	231e      	movs	r3, #30
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e047      	b.n	800378a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	231f      	movs	r3, #31
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d015      	beq.n	8003730 <UART_SetConfig+0x1f0>
 8003704:	dc18      	bgt.n	8003738 <UART_SetConfig+0x1f8>
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00d      	beq.n	8003726 <UART_SetConfig+0x1e6>
 800370a:	dc15      	bgt.n	8003738 <UART_SetConfig+0x1f8>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <UART_SetConfig+0x1d6>
 8003710:	2b02      	cmp	r3, #2
 8003712:	d005      	beq.n	8003720 <UART_SetConfig+0x1e0>
 8003714:	e010      	b.n	8003738 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003716:	f7ff f83b 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800371a:	0003      	movs	r3, r0
 800371c:	61bb      	str	r3, [r7, #24]
        break;
 800371e:	e012      	b.n	8003746 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <UART_SetConfig+0x27c>)
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e00f      	b.n	8003746 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003726:	f7fe ffc5 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800372a:	0003      	movs	r3, r0
 800372c:	61bb      	str	r3, [r7, #24]
        break;
 800372e:	e00a      	b.n	8003746 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	61bb      	str	r3, [r7, #24]
        break;
 8003736:	e006      	b.n	8003746 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373c:	231e      	movs	r3, #30
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
        break;
 8003744:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01e      	beq.n	800378a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	085a      	lsrs	r2, r3, #1
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	18d2      	adds	r2, r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0019      	movs	r1, r3
 800375c:	0010      	movs	r0, r2
 800375e:	f7fc fcd3 	bl	8000108 <__udivsi3>
 8003762:	0003      	movs	r3, r0
 8003764:	b29b      	uxth	r3, r3
 8003766:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d909      	bls.n	8003782 <UART_SetConfig+0x242>
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	025b      	lsls	r3, r3, #9
 8003774:	429a      	cmp	r2, r3
 8003776:	d204      	bcs.n	8003782 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	e003      	b.n	800378a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003782:	231e      	movs	r3, #30
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003796:	231e      	movs	r3, #30
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781b      	ldrb	r3, [r3, #0]
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b008      	add	sp, #32
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	ffff69f3 	.word	0xffff69f3
 80037a8:	ffffcfff 	.word	0xffffcfff
 80037ac:	fffff4ff 	.word	0xfffff4ff
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40004400 	.word	0x40004400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2201      	movs	r2, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00b      	beq.n	80037ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <UART_AdvFeatureConfig+0x144>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00b      	beq.n	800380c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a43      	ldr	r2, [pc, #268]	; (8003908 <UART_AdvFeatureConfig+0x148>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a3b      	ldr	r2, [pc, #236]	; (800390c <UART_AdvFeatureConfig+0x14c>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2208      	movs	r2, #8
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a34      	ldr	r2, [pc, #208]	; (8003910 <UART_AdvFeatureConfig+0x150>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <UART_AdvFeatureConfig+0x154>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <UART_AdvFeatureConfig+0x158>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	d01d      	beq.n	80038da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <UART_AdvFeatureConfig+0x15c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	035b      	lsls	r3, r3, #13
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <UART_AdvFeatureConfig+0x160>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <UART_AdvFeatureConfig+0x164>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffdffff 	.word	0xfffdffff
 8003908:	fffeffff 	.word	0xfffeffff
 800390c:	fffbffff 	.word	0xfffbffff
 8003910:	ffff7fff 	.word	0xffff7fff
 8003914:	ffffefff 	.word	0xffffefff
 8003918:	ffffdfff 	.word	0xffffdfff
 800391c:	ffefffff 	.word	0xffefffff
 8003920:	ff9fffff 	.word	0xff9fffff
 8003924:	fff7ffff 	.word	0xfff7ffff

08003928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	2100      	movs	r1, #0
 8003936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003938:	f7fd fda4 	bl	8001484 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	4013      	ands	r3, r2
 800394a:	2b08      	cmp	r3, #8
 800394c:	d10c      	bne.n	8003968 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0391      	lsls	r1, r2, #14
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <UART_CheckIdleState+0x8c>)
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	f000 f82c 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e021      	b.n	80039ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	2b04      	cmp	r3, #4
 8003974:	d10c      	bne.n	8003990 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	03d1      	lsls	r1, r2, #15
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <UART_CheckIdleState+0x8c>)
 8003980:	9200      	str	r2, [sp, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	f000 f818 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00d      	b.n	80039ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2274      	movs	r2, #116	; 0x74
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b004      	add	sp, #16
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	01ffffff 	.word	0x01ffffff

080039b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b094      	sub	sp, #80	; 0x50
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	e0a3      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039cc:	3301      	adds	r3, #1
 80039ce:	d100      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039d0:	e09f      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fd fd57 	bl	8001484 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d13d      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f0:	647b      	str	r3, [r7, #68]	; 0x44
 80039f2:	2301      	movs	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	494c      	ldr	r1, [pc, #304]	; (8003b3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40
 8003a24:	2301      	movs	r3, #1
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	f383 8810 	msr	PRIMASK, r3
}
 8003a4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2274      	movs	r2, #116	; 0x74
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e067      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d050      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d146      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a92:	613b      	str	r3, [r7, #16]
  return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4923      	ldr	r1, [pc, #140]	; (8003b3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f383 8810 	msr	PRIMASK, r3
}
 8003abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aca:	2301      	movs	r3, #1
 8003acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	2120      	movs	r1, #32
 8003b04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2274      	movs	r2, #116	; 0x74
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e010      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	425a      	negs	r2, r3
 8003b22:	4153      	adcs	r3, r2
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	001a      	movs	r2, r3
 8003b28:	1dfb      	adds	r3, r7, #7
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d100      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b30:	e74b      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b014      	add	sp, #80	; 0x50
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	fffffe5f 	.word	0xfffffe5f

08003b40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	0002      	movs	r2, r0
 8003b48:	1dbb      	adds	r3, r7, #6
 8003b4a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b50:	1dbb      	adds	r3, r7, #6
 8003b52:	2200      	movs	r2, #0
 8003b54:	5e9b      	ldrsh	r3, [r3, r2]
 8003b56:	2b84      	cmp	r3, #132	; 0x84
 8003b58:	d006      	beq.n	8003b68 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003b5a:	1dbb      	adds	r3, r7, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	5e9a      	ldrsh	r2, [r3, r2]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	3303      	adds	r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b68:	68fb      	ldr	r3, [r7, #12]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b76:	f000 fa3b 	bl	8003ff0 <vTaskStartScheduler>
  
  return osOK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b84:	b089      	sub	sp, #36	; 0x24
 8003b86:	af04      	add	r7, sp, #16
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685c      	ldr	r4, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681d      	ldr	r5, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691e      	ldr	r6, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	5e9b      	ldrsh	r3, [r3, r2]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff ffce 	bl	8003b40 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	9201      	str	r2, [sp, #4]
 8003bb2:	9000      	str	r0, [sp, #0]
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	0032      	movs	r2, r6
 8003bb8:	0029      	movs	r1, r5
 8003bba:	0020      	movs	r0, r4
 8003bbc:	f000 f8c4 	bl	8003d48 <xTaskCreateStatic>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b005      	add	sp, #20
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <osDelay+0x16>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	e000      	b.n	8003be6 <osDelay+0x18>
 8003be4:	2301      	movs	r3, #1
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f9dc 	bl	8003fa4 <vTaskDelay>
  
  return osOK;
 8003bec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3308      	adds	r3, #8
 8003c02:	001a      	movs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4252      	negs	r2, r2
 8003c0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3308      	adds	r3, #8
 8003c14:	001a      	movs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	001a      	movs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b004      	add	sp, #16
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	d103      	bne.n	8003caa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e00c      	b.n	8003cc4 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3308      	adds	r3, #8
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e002      	b.n	8003cb8 <vListInsert+0x2c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d2f6      	bcs.n	8003cb2 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b004      	add	sp, #16
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6892      	ldr	r2, [r2, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6852      	ldr	r2, [r2, #4]
 8003d18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d103      	bne.n	8003d2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b004      	add	sp, #16
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b08d      	sub	sp, #52	; 0x34
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <xTaskCreateStatic+0x18>
 8003d5c:	b672      	cpsid	i
 8003d5e:	e7fe      	b.n	8003d5e <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <xTaskCreateStatic+0x22>
 8003d66:	b672      	cpsid	i
 8003d68:	e7fe      	b.n	8003d68 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d6a:	23ac      	movs	r3, #172	; 0xac
 8003d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2bac      	cmp	r3, #172	; 0xac
 8003d72:	d001      	beq.n	8003d78 <xTaskCreateStatic+0x30>
 8003d74:	b672      	cpsid	i
 8003d76:	e7fe      	b.n	8003d76 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <xTaskCreateStatic+0x70>
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d019      	beq.n	8003db8 <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d8e:	683c      	ldr	r4, [r7, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	2318      	movs	r3, #24
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	0023      	movs	r3, r4
 8003daa:	f000 f80d 	bl	8003dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 f893 	bl	8003edc <prvAddNewTaskToReadyList>
 8003db6:	e001      	b.n	8003dbc <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
	}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b009      	add	sp, #36	; 0x24
 8003dc4:	bd90      	pop	{r4, r7, pc}
	...

08003dc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	493b      	ldr	r1, [pc, #236]	; (8003ecc <prvInitialiseNewTask+0x104>)
 8003dde:	468c      	mov	ip, r1
 8003de0:	4463      	add	r3, ip
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2207      	movs	r2, #7
 8003dec:	4393      	bics	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2207      	movs	r2, #7
 8003df4:	4013      	ands	r3, r2
 8003df6:	d001      	beq.n	8003dfc <prvInitialiseNewTask+0x34>
 8003df8:	b672      	cpsid	i
 8003dfa:	e7fe      	b.n	8003dfa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e013      	b.n	8003e2a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	7818      	ldrb	r0, [r3, #0]
 8003e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0c:	2134      	movs	r1, #52	; 0x34
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	185b      	adds	r3, r3, r1
 8003e14:	1c02      	adds	r2, r0, #0
 8003e16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	18d3      	adds	r3, r2, r3
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d006      	beq.n	8003e32 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d9e8      	bls.n	8003e02 <prvInitialiseNewTask+0x3a>
 8003e30:	e000      	b.n	8003e34 <prvInitialiseNewTask+0x6c>
		{
			break;
 8003e32:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	2243      	movs	r2, #67	; 0x43
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d901      	bls.n	8003e46 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e42:	2306      	movs	r3, #6
 8003e44:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	3304      	adds	r3, #4
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff feee 	bl	8003c32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	3318      	adds	r3, #24
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7ff fee9 	bl	8003c32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2207      	movs	r2, #7
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	22a4      	movs	r2, #164	; 0xa4
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	22a8      	movs	r2, #168	; 0xa8
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	3344      	adds	r3, #68	; 0x44
 8003e8a:	2260      	movs	r2, #96	; 0x60
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 fd0c 	bl	80048ac <memset>
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <prvInitialiseNewTask+0x108>)
 8003e98:	649a      	str	r2, [r3, #72]	; 0x48
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <prvInitialiseNewTask+0x10c>)
 8003e9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <prvInitialiseNewTask+0x110>)
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 fba5 	bl	80045fc <pxPortInitialiseStack>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b006      	add	sp, #24
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	3fffffff 	.word	0x3fffffff
 8003ed0:	08004b4c 	.word	0x08004b4c
 8003ed4:	08004b6c 	.word	0x08004b6c
 8003ed8:	08004b2c 	.word	0x08004b2c

08003edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ee4:	f000 fc24 	bl	8004730 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <prvAddNewTaskToReadyList+0xb0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <prvAddNewTaskToReadyList+0xb0>)
 8003ef0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <prvAddNewTaskToReadyList+0xb4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003efa:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <prvAddNewTaskToReadyList+0xb4>)
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <prvAddNewTaskToReadyList+0xb0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d110      	bne.n	8003f2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f08:	f000 fa80 	bl	800440c <prvInitialiseTaskLists>
 8003f0c:	e00d      	b.n	8003f2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <prvAddNewTaskToReadyList+0xb8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <prvAddNewTaskToReadyList+0xb4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d802      	bhi.n	8003f2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <prvAddNewTaskToReadyList+0xb4>)
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <prvAddNewTaskToReadyList+0xbc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <prvAddNewTaskToReadyList+0xbc>)
 8003f32:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <prvAddNewTaskToReadyList+0xc0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d903      	bls.n	8003f48 <prvAddNewTaskToReadyList+0x6c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <prvAddNewTaskToReadyList+0xc0>)
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <prvAddNewTaskToReadyList+0xc4>)
 8003f56:	189a      	adds	r2, r3, r2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f7ff fe72 	bl	8003c48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f64:	f000 fbf6 	bl	8004754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <prvAddNewTaskToReadyList+0xb8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <prvAddNewTaskToReadyList+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d201      	bcs.n	8003f82 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f7e:	f000 fbc7 	bl	8004710 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	2000145c 	.word	0x2000145c
 8003f90:	2000135c 	.word	0x2000135c
 8003f94:	20001468 	.word	0x20001468
 8003f98:	20001478 	.word	0x20001478
 8003f9c:	20001464 	.word	0x20001464
 8003fa0:	20001360 	.word	0x20001360

08003fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <vTaskDelay+0x48>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <vTaskDelay+0x1e>
 8003fbe:	b672      	cpsid	i
 8003fc0:	e7fe      	b.n	8003fc0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003fc2:	f000 f86d 	bl	80040a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 fac2 	bl	8004554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fd0:	f000 f872 	bl	80040b8 <xTaskResumeAll>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003fde:	f000 fb97 	bl	8004710 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20001484 	.word	0x20001484

08003ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffe:	003a      	movs	r2, r7
 8004000:	1d39      	adds	r1, r7, #4
 8004002:	2308      	movs	r3, #8
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	0018      	movs	r0, r3
 8004008:	f7fc fc8c 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800400c:	683c      	ldr	r4, [r7, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	491b      	ldr	r1, [pc, #108]	; (8004080 <vTaskStartScheduler+0x90>)
 8004014:	481b      	ldr	r0, [pc, #108]	; (8004084 <vTaskStartScheduler+0x94>)
 8004016:	9202      	str	r2, [sp, #8]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2300      	movs	r3, #0
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	0022      	movs	r2, r4
 8004022:	f7ff fe91 	bl	8003d48 <xTaskCreateStatic>
 8004026:	0002      	movs	r2, r0
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <vTaskStartScheduler+0x98>)
 800402a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <vTaskStartScheduler+0x98>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d113      	bne.n	800406c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004044:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <vTaskStartScheduler+0x9c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3344      	adds	r3, #68	; 0x44
 800404c:	001a      	movs	r2, r3
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <vTaskStartScheduler+0xa0>)
 8004050:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <vTaskStartScheduler+0xa4>)
 8004054:	2201      	movs	r2, #1
 8004056:	4252      	negs	r2, r2
 8004058:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <vTaskStartScheduler+0xa8>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <vTaskStartScheduler+0xac>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004066:	f000 fb2f 	bl	80046c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800406a:	e004      	b.n	8004076 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	d101      	bne.n	8004076 <vTaskStartScheduler+0x86>
 8004072:	b672      	cpsid	i
 8004074:	e7fe      	b.n	8004074 <vTaskStartScheduler+0x84>
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b005      	add	sp, #20
 800407c:	bd90      	pop	{r4, r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	08004b0c 	.word	0x08004b0c
 8004084:	080043ed 	.word	0x080043ed
 8004088:	20001480 	.word	0x20001480
 800408c:	2000135c 	.word	0x2000135c
 8004090:	2000000c 	.word	0x2000000c
 8004094:	2000147c 	.word	0x2000147c
 8004098:	20001468 	.word	0x20001468
 800409c:	20001460 	.word	0x20001460

080040a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <vTaskSuspendAll+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <vTaskSuspendAll+0x14>)
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20001484 	.word	0x20001484

080040b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040c6:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <xTaskResumeAll+0xf8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xTaskResumeAll+0x1a>
 80040ce:	b672      	cpsid	i
 80040d0:	e7fe      	b.n	80040d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040d2:	f000 fb2d 	bl	8004730 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <xTaskResumeAll+0xf8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <xTaskResumeAll+0xf8>)
 80040de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <xTaskResumeAll+0xf8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d15b      	bne.n	80041a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <xTaskResumeAll+0xfc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d057      	beq.n	80041a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f0:	e02f      	b.n	8004152 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040f2:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <xTaskResumeAll+0x100>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3318      	adds	r3, #24
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fdfa 	bl	8003cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3304      	adds	r3, #4
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fdf5 	bl	8003cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <xTaskResumeAll+0x104>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d903      	bls.n	8004122 <xTaskResumeAll+0x6a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <xTaskResumeAll+0x104>)
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	0013      	movs	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	189b      	adds	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <xTaskResumeAll+0x108>)
 8004130:	189a      	adds	r2, r3, r2
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	0019      	movs	r1, r3
 8004138:	0010      	movs	r0, r2
 800413a:	f7ff fd85 	bl	8003c48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <xTaskResumeAll+0x10c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <xTaskResumeAll+0x110>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <xTaskResumeAll+0x100>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cb      	bne.n	80040f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004160:	f000 f9d4 	bl	800450c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <xTaskResumeAll+0x114>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00f      	beq.n	8004190 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004170:	f000 f82e 	bl	80041d0 <xTaskIncrementTick>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d002      	beq.n	800417e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <xTaskResumeAll+0x110>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3b01      	subs	r3, #1
 8004182:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f2      	bne.n	8004170 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <xTaskResumeAll+0x114>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <xTaskResumeAll+0x110>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419c:	f000 fab8 	bl	8004710 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041a0:	f000 fad8 	bl	8004754 <vPortExitCritical>

	return xAlreadyYielded;
 80041a4:	68bb      	ldr	r3, [r7, #8]
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	20001484 	.word	0x20001484
 80041b4:	2000145c 	.word	0x2000145c
 80041b8:	2000141c 	.word	0x2000141c
 80041bc:	20001464 	.word	0x20001464
 80041c0:	20001360 	.word	0x20001360
 80041c4:	2000135c 	.word	0x2000135c
 80041c8:	20001470 	.word	0x20001470
 80041cc:	2000146c 	.word	0x2000146c

080041d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <xTaskIncrementTick+0x13c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d000      	beq.n	80041e4 <xTaskIncrementTick+0x14>
 80041e2:	e083      	b.n	80042ec <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <xTaskIncrementTick+0x140>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041ec:	4b48      	ldr	r3, [pc, #288]	; (8004310 <xTaskIncrementTick+0x140>)
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d117      	bne.n	8004228 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <xTaskIncrementTick+0x144>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <xTaskIncrementTick+0x36>
 8004202:	b672      	cpsid	i
 8004204:	e7fe      	b.n	8004204 <xTaskIncrementTick+0x34>
 8004206:	4b43      	ldr	r3, [pc, #268]	; (8004314 <xTaskIncrementTick+0x144>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <xTaskIncrementTick+0x148>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b40      	ldr	r3, [pc, #256]	; (8004314 <xTaskIncrementTick+0x144>)
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	4b40      	ldr	r3, [pc, #256]	; (8004318 <xTaskIncrementTick+0x148>)
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <xTaskIncrementTick+0x14c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	4b3e      	ldr	r3, [pc, #248]	; (800431c <xTaskIncrementTick+0x14c>)
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f000 f972 	bl	800450c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004228:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <xTaskIncrementTick+0x150>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d34e      	bcc.n	80042d0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004232:	4b38      	ldr	r3, [pc, #224]	; (8004314 <xTaskIncrementTick+0x144>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <xTaskIncrementTick+0x70>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <xTaskIncrementTick+0x72>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004246:	4b36      	ldr	r3, [pc, #216]	; (8004320 <xTaskIncrementTick+0x150>)
 8004248:	2201      	movs	r2, #1
 800424a:	4252      	negs	r2, r2
 800424c:	601a      	str	r2, [r3, #0]
					break;
 800424e:	e03f      	b.n	80042d0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004250:	4b30      	ldr	r3, [pc, #192]	; (8004314 <xTaskIncrementTick+0x144>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d203      	bcs.n	8004270 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <xTaskIncrementTick+0x150>)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]
						break;
 800426e:	e02f      	b.n	80042d0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3304      	adds	r3, #4
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff fd3f 	bl	8003cf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3318      	adds	r3, #24
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff fd36 	bl	8003cf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <xTaskIncrementTick+0x154>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d903      	bls.n	80042a0 <xTaskIncrementTick+0xd0>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <xTaskIncrementTick+0x154>)
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	0013      	movs	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <xTaskIncrementTick+0x158>)
 80042ae:	189a      	adds	r2, r3, r2
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	3304      	adds	r3, #4
 80042b4:	0019      	movs	r1, r3
 80042b6:	0010      	movs	r0, r2
 80042b8:	f7ff fcc6 	bl	8003c48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <xTaskIncrementTick+0x15c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3b3      	bcc.n	8004232 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ce:	e7b0      	b.n	8004232 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <xTaskIncrementTick+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4914      	ldr	r1, [pc, #80]	; (8004328 <xTaskIncrementTick+0x158>)
 80042d8:	0013      	movs	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	585b      	ldr	r3, [r3, r1]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d907      	bls.n	80042f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e004      	b.n	80042f6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <xTaskIncrementTick+0x160>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <xTaskIncrementTick+0x160>)
 80042f4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <xTaskIncrementTick+0x164>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004302:	697b      	ldr	r3, [r7, #20]
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b006      	add	sp, #24
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20001484 	.word	0x20001484
 8004310:	20001460 	.word	0x20001460
 8004314:	20001414 	.word	0x20001414
 8004318:	20001418 	.word	0x20001418
 800431c:	20001474 	.word	0x20001474
 8004320:	2000147c 	.word	0x2000147c
 8004324:	20001464 	.word	0x20001464
 8004328:	20001360 	.word	0x20001360
 800432c:	2000135c 	.word	0x2000135c
 8004330:	2000146c 	.word	0x2000146c
 8004334:	20001470 	.word	0x20001470

08004338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800433e:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <vTaskSwitchContext+0x9c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <vTaskSwitchContext+0xa0>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800434c:	e03d      	b.n	80043ca <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <vTaskSwitchContext+0xa0>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <vTaskSwitchContext+0xa4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	e007      	b.n	800436c <vTaskSwitchContext+0x34>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <vTaskSwitchContext+0x2e>
 8004362:	b672      	cpsid	i
 8004364:	e7fe      	b.n	8004364 <vTaskSwitchContext+0x2c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3b01      	subs	r3, #1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	491c      	ldr	r1, [pc, #112]	; (80043e0 <vTaskSwitchContext+0xa8>)
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	0013      	movs	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	189b      	adds	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	585b      	ldr	r3, [r3, r1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0ee      	beq.n	800435c <vTaskSwitchContext+0x24>
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	0013      	movs	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	189b      	adds	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <vTaskSwitchContext+0xa8>)
 800438a:	189b      	adds	r3, r3, r2
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <vTaskSwitchContext+0x76>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <vTaskSwitchContext+0xac>)
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <vTaskSwitchContext+0xa4>)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <vTaskSwitchContext+0xac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3344      	adds	r3, #68	; 0x44
 80043c4:	001a      	movs	r2, r3
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <vTaskSwitchContext+0xb0>)
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	20001484 	.word	0x20001484
 80043d8:	20001470 	.word	0x20001470
 80043dc:	20001464 	.word	0x20001464
 80043e0:	20001360 	.word	0x20001360
 80043e4:	2000135c 	.word	0x2000135c
 80043e8:	2000000c 	.word	0x2000000c

080043ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043f4:	f000 f84e 	bl	8004494 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <prvIdleTask+0x1c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d9f9      	bls.n	80043f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004400:	f000 f986 	bl	8004710 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004404:	e7f6      	b.n	80043f4 <prvIdleTask+0x8>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	20001360 	.word	0x20001360

0800440c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	e00c      	b.n	8004432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	0013      	movs	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	189b      	adds	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4a14      	ldr	r2, [pc, #80]	; (8004474 <prvInitialiseTaskLists+0x68>)
 8004424:	189b      	adds	r3, r3, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f7ff fbe5 	bl	8003bf6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b06      	cmp	r3, #6
 8004436:	d9ef      	bls.n	8004418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <prvInitialiseTaskLists+0x6c>)
 800443a:	0018      	movs	r0, r3
 800443c:	f7ff fbdb 	bl	8003bf6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <prvInitialiseTaskLists+0x70>)
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff fbd7 	bl	8003bf6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <prvInitialiseTaskLists+0x74>)
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff fbd3 	bl	8003bf6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvInitialiseTaskLists+0x78>)
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff fbcf 	bl	8003bf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvInitialiseTaskLists+0x7c>)
 800445a:	0018      	movs	r0, r3
 800445c:	f7ff fbcb 	bl	8003bf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvInitialiseTaskLists+0x80>)
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <prvInitialiseTaskLists+0x6c>)
 8004464:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <prvInitialiseTaskLists+0x84>)
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <prvInitialiseTaskLists+0x70>)
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20001360 	.word	0x20001360
 8004478:	200013ec 	.word	0x200013ec
 800447c:	20001400 	.word	0x20001400
 8004480:	2000141c 	.word	0x2000141c
 8004484:	20001430 	.word	0x20001430
 8004488:	20001448 	.word	0x20001448
 800448c:	20001414 	.word	0x20001414
 8004490:	20001418 	.word	0x20001418

08004494 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449a:	e01a      	b.n	80044d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800449c:	f000 f948 	bl	8004730 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <prvCheckTasksWaitingTermination+0x50>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff fc23 	bl	8003cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1e5a      	subs	r2, r3, #1
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80044c6:	f000 f945 	bl	8004754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f80f 	bl	80044f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e0      	bne.n	800449c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20001430 	.word	0x20001430
 80044e8:	2000145c 	.word	0x2000145c
 80044ec:	20001444 	.word	0x20001444

080044f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3344      	adds	r3, #68	; 0x44
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fa35 	bl	800496c <_reclaim_reent>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b002      	add	sp, #8
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <prvResetNextTaskUnblockTime+0x14>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <prvResetNextTaskUnblockTime+0x16>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004528:	2201      	movs	r2, #1
 800452a:	4252      	negs	r2, r2
 800452c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800452e:	e008      	b.n	8004542 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <prvResetNextTaskUnblockTime+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <prvResetNextTaskUnblockTime+0x44>)
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	20001414 	.word	0x20001414
 8004550:	2000147c 	.word	0x2000147c

08004554 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004564:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3304      	adds	r3, #4
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff fbc4 	bl	8003cf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3301      	adds	r3, #1
 8004574:	d10b      	bne.n	800458e <prvAddCurrentTaskToDelayedList+0x3a>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fb5e 	bl	8003c48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800458c:	e026      	b.n	80045dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d209      	bcs.n	80045ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3304      	adds	r3, #4
 80045b0:	0019      	movs	r1, r3
 80045b2:	0010      	movs	r0, r2
 80045b4:	f7ff fb6a 	bl	8003c8c <vListInsert>
}
 80045b8:	e010      	b.n	80045dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3304      	adds	r3, #4
 80045c4:	0019      	movs	r1, r3
 80045c6:	0010      	movs	r0, r2
 80045c8:	f7ff fb60 	bl	8003c8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d202      	bcs.n	80045dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	601a      	str	r2, [r3, #0]
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20001460 	.word	0x20001460
 80045e8:	2000135c 	.word	0x2000135c
 80045ec:	20001448 	.word	0x20001448
 80045f0:	20001418 	.word	0x20001418
 80045f4:	20001414 	.word	0x20001414
 80045f8:	2000147c 	.word	0x2000147c

080045fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b04      	subs	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2280      	movs	r2, #128	; 0x80
 8004612:	0452      	lsls	r2, r2, #17
 8004614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b04      	subs	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <pxPortInitialiseStack+0x50>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b14      	subs	r3, #20
 8004632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3b20      	subs	r3, #32
 800463e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	08004651 	.word	0x08004651

08004650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <prvTaskExitError+0x2c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	d001      	beq.n	8004666 <prvTaskExitError+0x16>
 8004662:	b672      	cpsid	i
 8004664:	e7fe      	b.n	8004664 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004666:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0fc      	beq.n	800466a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b002      	add	sp, #8
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20000008 	.word	0x20000008

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	0000      	movs	r0, r0
 800468c:	0000      	movs	r0, r0
	...

08004690 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <pxCurrentTCBConst2>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	3020      	adds	r0, #32
 8004698:	f380 8809 	msr	PSP, r0
 800469c:	2002      	movs	r0, #2
 800469e:	f380 8814 	msr	CONTROL, r0
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80046a8:	46ae      	mov	lr, r5
 80046aa:	bc08      	pop	{r3}
 80046ac:	bc04      	pop	{r2}
 80046ae:	b662      	cpsie	i
 80046b0:	4718      	bx	r3
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46c0      	nop			; (mov r8, r8)

080046c0 <pxCurrentTCBConst2>:
 80046c0:	2000135c 	.word	0x2000135c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46c0      	nop			; (mov r8, r8)

080046c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <xPortStartScheduler+0x40>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <xPortStartScheduler+0x40>)
 80046d2:	21ff      	movs	r1, #255	; 0xff
 80046d4:	0409      	lsls	r1, r1, #16
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <xPortStartScheduler+0x40>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <xPortStartScheduler+0x40>)
 80046e0:	21ff      	movs	r1, #255	; 0xff
 80046e2:	0609      	lsls	r1, r1, #24
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80046e8:	f000 f898 	bl	800481c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <xPortStartScheduler+0x44>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80046f2:	f7ff ffcd 	bl	8004690 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046f6:	f7ff fe1f 	bl	8004338 <vTaskSwitchContext>
	prvTaskExitError();
 80046fa:	f7ff ffa9 	bl	8004650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	e000ed20 	.word	0xe000ed20
 800470c:	20000008 	.word	0x20000008

08004710 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <vPortYield+0x1c>)
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	0552      	lsls	r2, r2, #21
 800471a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800471c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004720:	f3bf 8f6f 	isb	sy
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004734:	b672      	cpsid	i
    uxCriticalNesting++;
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <vPortEnterCritical+0x20>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <vPortEnterCritical+0x20>)
 800473e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004740:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004744:	f3bf 8f6f 	isb	sy
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000008 	.word	0x20000008

08004754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <vPortExitCritical+0x2c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <vPortExitCritical+0x10>
 8004760:	b672      	cpsid	i
 8004762:	e7fe      	b.n	8004762 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <vPortExitCritical+0x2c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1e5a      	subs	r2, r3, #1
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <vPortExitCritical+0x2c>)
 800476c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <vPortExitCritical+0x2c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d100      	bne.n	8004778 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004776:	b662      	cpsie	i
    }
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000008 	.word	0x20000008

08004784 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004784:	f3ef 8010 	mrs	r0, PRIMASK
 8004788:	b672      	cpsid	i
 800478a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	0018      	movs	r0, r3

08004790 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004790:	f380 8810 	msr	PRIMASK, r0
 8004794:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004796:	46c0      	nop			; (mov r8, r8)
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <pxCurrentTCBConst>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	3820      	subs	r0, #32
 80047aa:	6010      	str	r0, [r2, #0]
 80047ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047ae:	4644      	mov	r4, r8
 80047b0:	464d      	mov	r5, r9
 80047b2:	4656      	mov	r6, sl
 80047b4:	465f      	mov	r7, fp
 80047b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80047b8:	b508      	push	{r3, lr}
 80047ba:	b672      	cpsid	i
 80047bc:	f7ff fdbc 	bl	8004338 <vTaskSwitchContext>
 80047c0:	b662      	cpsie	i
 80047c2:	bc0c      	pop	{r2, r3}
 80047c4:	6811      	ldr	r1, [r2, #0]
 80047c6:	6808      	ldr	r0, [r1, #0]
 80047c8:	3010      	adds	r0, #16
 80047ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80047cc:	46a0      	mov	r8, r4
 80047ce:	46a9      	mov	r9, r5
 80047d0:	46b2      	mov	sl, r6
 80047d2:	46bb      	mov	fp, r7
 80047d4:	f380 8809 	msr	PSP, r0
 80047d8:	3820      	subs	r0, #32
 80047da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80047dc:	4718      	bx	r3
 80047de:	46c0      	nop			; (mov r8, r8)

080047e0 <pxCurrentTCBConst>:
 80047e0:	2000135c 	.word	0x2000135c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46c0      	nop			; (mov r8, r8)

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ee:	f7ff ffc9 	bl	8004784 <ulSetInterruptMaskFromISR>
 80047f2:	0003      	movs	r3, r0
 80047f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047f6:	f7ff fceb 	bl	80041d0 <xTaskIncrementTick>
 80047fa:	1e03      	subs	r3, r0, #0
 80047fc:	d003      	beq.n	8004806 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <SysTick_Handler+0x30>)
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	0552      	lsls	r2, r2, #21
 8004804:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff ffc1 	bl	8004790 <vClearInterruptMaskFromISR>
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <prvSetupTimerInterrupt+0x34>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <prvSetupTimerInterrupt+0x38>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <prvSetupTimerInterrupt+0x3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	22fa      	movs	r2, #250	; 0xfa
 8004832:	0091      	lsls	r1, r2, #2
 8004834:	0018      	movs	r0, r3
 8004836:	f7fb fc67 	bl	8000108 <__udivsi3>
 800483a:	0003      	movs	r3, r0
 800483c:	001a      	movs	r2, r3
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvSetupTimerInterrupt+0x40>)
 8004840:	3a01      	subs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <prvSetupTimerInterrupt+0x34>)
 8004846:	2207      	movs	r2, #7
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	e000e010 	.word	0xe000e010
 8004854:	e000e018 	.word	0xe000e018
 8004858:	20000000 	.word	0x20000000
 800485c:	e000e014 	.word	0xe000e014

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	2600      	movs	r6, #0
 8004864:	4d0c      	ldr	r5, [pc, #48]	; (8004898 <__libc_init_array+0x38>)
 8004866:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	2600      	movs	r6, #0
 8004872:	f000 f8f1 	bl	8004a58 <_init>
 8004876:	4d0a      	ldr	r5, [pc, #40]	; (80048a0 <__libc_init_array+0x40>)
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <__libc_init_array+0x44>)
 800487a:	1b64      	subs	r4, r4, r5
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	00b3      	lsls	r3, r6, #2
 8004886:	58eb      	ldr	r3, [r5, r3]
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	00b3      	lsls	r3, r6, #2
 8004890:	58eb      	ldr	r3, [r5, r3]
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08004b8c 	.word	0x08004b8c
 800489c:	08004b8c 	.word	0x08004b8c
 80048a0:	08004b8c 	.word	0x08004b8c
 80048a4:	08004b94 	.word	0x08004b94

080048a8 <__retarget_lock_acquire_recursive>:
 80048a8:	4770      	bx	lr

080048aa <__retarget_lock_release_recursive>:
 80048aa:	4770      	bx	lr

080048ac <memset>:
 80048ac:	0003      	movs	r3, r0
 80048ae:	1882      	adds	r2, r0, r2
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	7019      	strb	r1, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <_free_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	0005      	movs	r5, r0
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d010      	beq.n	80048e6 <_free_r+0x2a>
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da00      	bge.n	80048ce <_free_r+0x12>
 80048cc:	18e4      	adds	r4, r4, r3
 80048ce:	0028      	movs	r0, r5
 80048d0:	f000 f8b2 	bl	8004a38 <__malloc_lock>
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <_free_r+0x90>)
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <_free_r+0x2c>
 80048dc:	6063      	str	r3, [r4, #4]
 80048de:	6014      	str	r4, [r2, #0]
 80048e0:	0028      	movs	r0, r5
 80048e2:	f000 f8b1 	bl	8004a48 <__malloc_unlock>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d908      	bls.n	80048fe <_free_r+0x42>
 80048ec:	6821      	ldr	r1, [r4, #0]
 80048ee:	1860      	adds	r0, r4, r1
 80048f0:	4283      	cmp	r3, r0
 80048f2:	d1f3      	bne.n	80048dc <_free_r+0x20>
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	1841      	adds	r1, r0, r1
 80048fa:	6021      	str	r1, [r4, #0]
 80048fc:	e7ee      	b.n	80048dc <_free_r+0x20>
 80048fe:	001a      	movs	r2, r3
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <_free_r+0x4e>
 8004906:	42a3      	cmp	r3, r4
 8004908:	d9f9      	bls.n	80048fe <_free_r+0x42>
 800490a:	6811      	ldr	r1, [r2, #0]
 800490c:	1850      	adds	r0, r2, r1
 800490e:	42a0      	cmp	r0, r4
 8004910:	d10b      	bne.n	800492a <_free_r+0x6e>
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	1809      	adds	r1, r1, r0
 8004916:	1850      	adds	r0, r2, r1
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	4283      	cmp	r3, r0
 800491c:	d1e0      	bne.n	80048e0 <_free_r+0x24>
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	1841      	adds	r1, r0, r1
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	6053      	str	r3, [r2, #4]
 8004928:	e7da      	b.n	80048e0 <_free_r+0x24>
 800492a:	42a0      	cmp	r0, r4
 800492c:	d902      	bls.n	8004934 <_free_r+0x78>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d5      	b.n	80048e0 <_free_r+0x24>
 8004934:	6821      	ldr	r1, [r4, #0]
 8004936:	1860      	adds	r0, r4, r1
 8004938:	4283      	cmp	r3, r0
 800493a:	d103      	bne.n	8004944 <_free_r+0x88>
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1841      	adds	r1, r0, r1
 8004942:	6021      	str	r1, [r4, #0]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6054      	str	r4, [r2, #4]
 8004948:	e7ca      	b.n	80048e0 <_free_r+0x24>
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	2000148c 	.word	0x2000148c

08004950 <cleanup_glue>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	000d      	movs	r5, r1
 8004954:	6809      	ldr	r1, [r1, #0]
 8004956:	0004      	movs	r4, r0
 8004958:	2900      	cmp	r1, #0
 800495a:	d001      	beq.n	8004960 <cleanup_glue+0x10>
 800495c:	f7ff fff8 	bl	8004950 <cleanup_glue>
 8004960:	0029      	movs	r1, r5
 8004962:	0020      	movs	r0, r4
 8004964:	f7ff ffaa 	bl	80048bc <_free_r>
 8004968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800496c <_reclaim_reent>:
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <_reclaim_reent+0xc8>)
 800496e:	b570      	push	{r4, r5, r6, lr}
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0004      	movs	r4, r0
 8004974:	4283      	cmp	r3, r0
 8004976:	d049      	beq.n	8004a0c <_reclaim_reent+0xa0>
 8004978:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <_reclaim_reent+0x28>
 800497e:	2500      	movs	r5, #0
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	42ab      	cmp	r3, r5
 8004984:	d147      	bne.n	8004a16 <_reclaim_reent+0xaa>
 8004986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	2900      	cmp	r1, #0
 800498c:	d002      	beq.n	8004994 <_reclaim_reent+0x28>
 800498e:	0020      	movs	r0, r4
 8004990:	f7ff ff94 	bl	80048bc <_free_r>
 8004994:	6961      	ldr	r1, [r4, #20]
 8004996:	2900      	cmp	r1, #0
 8004998:	d002      	beq.n	80049a0 <_reclaim_reent+0x34>
 800499a:	0020      	movs	r0, r4
 800499c:	f7ff ff8e 	bl	80048bc <_free_r>
 80049a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d002      	beq.n	80049ac <_reclaim_reent+0x40>
 80049a6:	0020      	movs	r0, r4
 80049a8:	f7ff ff88 	bl	80048bc <_free_r>
 80049ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d002      	beq.n	80049b8 <_reclaim_reent+0x4c>
 80049b2:	0020      	movs	r0, r4
 80049b4:	f7ff ff82 	bl	80048bc <_free_r>
 80049b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d002      	beq.n	80049c4 <_reclaim_reent+0x58>
 80049be:	0020      	movs	r0, r4
 80049c0:	f7ff ff7c 	bl	80048bc <_free_r>
 80049c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d002      	beq.n	80049d0 <_reclaim_reent+0x64>
 80049ca:	0020      	movs	r0, r4
 80049cc:	f7ff ff76 	bl	80048bc <_free_r>
 80049d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d002      	beq.n	80049dc <_reclaim_reent+0x70>
 80049d6:	0020      	movs	r0, r4
 80049d8:	f7ff ff70 	bl	80048bc <_free_r>
 80049dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049de:	2900      	cmp	r1, #0
 80049e0:	d002      	beq.n	80049e8 <_reclaim_reent+0x7c>
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff ff6a 	bl	80048bc <_free_r>
 80049e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ea:	2900      	cmp	r1, #0
 80049ec:	d002      	beq.n	80049f4 <_reclaim_reent+0x88>
 80049ee:	0020      	movs	r0, r4
 80049f0:	f7ff ff64 	bl	80048bc <_free_r>
 80049f4:	69a3      	ldr	r3, [r4, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <_reclaim_reent+0xa0>
 80049fa:	0020      	movs	r0, r4
 80049fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049fe:	4798      	blx	r3
 8004a00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a02:	2900      	cmp	r1, #0
 8004a04:	d002      	beq.n	8004a0c <_reclaim_reent+0xa0>
 8004a06:	0020      	movs	r0, r4
 8004a08:	f7ff ffa2 	bl	8004950 <cleanup_glue>
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
 8004a0e:	5949      	ldr	r1, [r1, r5]
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d108      	bne.n	8004a26 <_reclaim_reent+0xba>
 8004a14:	3504      	adds	r5, #4
 8004a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a18:	68d9      	ldr	r1, [r3, #12]
 8004a1a:	2d80      	cmp	r5, #128	; 0x80
 8004a1c:	d1f7      	bne.n	8004a0e <_reclaim_reent+0xa2>
 8004a1e:	0020      	movs	r0, r4
 8004a20:	f7ff ff4c 	bl	80048bc <_free_r>
 8004a24:	e7af      	b.n	8004986 <_reclaim_reent+0x1a>
 8004a26:	680e      	ldr	r6, [r1, #0]
 8004a28:	0020      	movs	r0, r4
 8004a2a:	f7ff ff47 	bl	80048bc <_free_r>
 8004a2e:	0031      	movs	r1, r6
 8004a30:	e7ee      	b.n	8004a10 <_reclaim_reent+0xa4>
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	2000000c 	.word	0x2000000c

08004a38 <__malloc_lock>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4802      	ldr	r0, [pc, #8]	; (8004a44 <__malloc_lock+0xc>)
 8004a3c:	f7ff ff34 	bl	80048a8 <__retarget_lock_acquire_recursive>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	20001488 	.word	0x20001488

08004a48 <__malloc_unlock>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4802      	ldr	r0, [pc, #8]	; (8004a54 <__malloc_unlock+0xc>)
 8004a4c:	f7ff ff2d 	bl	80048aa <__retarget_lock_release_recursive>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20001488 	.word	0x20001488

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
