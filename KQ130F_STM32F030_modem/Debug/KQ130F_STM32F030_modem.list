
KQ130F_STM32F030_modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006700  08006700  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006700  08006700  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  20000080  08006790  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  08006790  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3f3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004451  00000000  00000000  0003c49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  000408f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  000420f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165ba  00000000  00000000  00043758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7b9  00000000  00000000  00059d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aa79  00000000  00000000  000774cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1f44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  000f1f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800656c 	.word	0x0800656c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800656c 	.word	0x0800656c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}

08000244 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	0018      	movs	r0, r3
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}

08000256 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	0018      	movs	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}

08000268 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d005      	beq.n	800029c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	2203      	movs	r2, #3
 800029a:	4798      	blx	r3
    }
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	0018      	movs	r0, r3
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	425a      	negs	r2, r3
 80002b4:	4153      	adcs	r3, r2
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <_ZN3PLM7PLModemILj1024EE10BUFFER_LENEj>:
			uint32_t rxTick;
		} MessageHandler;

//		static const int

		static constexpr size_t BUFFER_LEN(size_t bfln) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
			size_t len = ((bfln-PACKET_MAX_SIZE*2) * PACKET_MAX_SIZE) / (sizeof(MessageHandler) + PACKET_MAX_SIZE);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3b40      	subs	r3, #64	; 0x40
 80002cc:	015b      	lsls	r3, r3, #5
 80002ce:	2130      	movs	r1, #48	; 0x30
 80002d0:	0018      	movs	r0, r3
 80002d2:	f7ff ff21 	bl	8000118 <__udivsi3>
 80002d6:	0003      	movs	r3, r0
 80002d8:	60fb      	str	r3, [r7, #12]
			return len;
 80002da:	68fb      	ldr	r3, [r7, #12]
		}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	b004      	add	sp, #16
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <_ZN3PLM7PLModemILj1024EE12NUM_MESSAGESEj>:

		static constexpr size_t NUM_MESSAGES(size_t bfln) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
			size_t num = BUFFER_LEN((bfln-PACKET_MAX_SIZE*2))/PACKET_MAX_SIZE;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3b40      	subs	r3, #64	; 0x40
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ffe5 	bl	80002c0 <_ZN3PLM7PLModemILj1024EE10BUFFER_LENEj>
 80002f6:	0003      	movs	r3, r0
 80002f8:	095b      	lsrs	r3, r3, #5
 80002fa:	60fb      	str	r3, [r7, #12]
			return num;
 80002fc:	68fb      	ldr	r3, [r7, #12]
		}
 80002fe:	0018      	movs	r0, r3
 8000300:	46bd      	mov	sp, r7
 8000302:	b004      	add	sp, #16
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <_ZNK6KQ130FMUlPhjE_clES_j>:


uint8_t helloWorld[] = "hello world!\n\r";

Enc::RSA rsaEnc;
PLM::PLModem<1024> KQ130F(&huart2, &huart1, [](uint8_t* frame, const size_t len)
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
								{ HAL_UART_Transmit(&huart1, (uint8_t*)"RX", 2, 500); });
 8000314:	23fa      	movs	r3, #250	; 0xfa
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <_ZNK6KQ130FMUlPhjE_clES_j+0x24>)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <_ZNK6KQ130FMUlPhjE_clES_j+0x28>)
 800031c:	2202      	movs	r2, #2
 800031e:	f003 fbcb 	bl	8003ab8 <HAL_UART_Transmit>
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b004      	add	sp, #16
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	08006584 	.word	0x08006584
 8000330:	20000724 	.word	0x20000724

08000334 <_ZNSt8functionIFvPhhEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff ff9e 	bl	8000280 <_ZNSt14_Function_baseD1Ev>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	0018      	movs	r0, r3
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <StartplNICHandleTask>:

	HAL_IWDG_Refresh(&hiwdg);
  }
}

void StartplNICHandleTask(void const* params) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	KQ130F.handle(params);
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <StartplNICHandleTask+0x1c>)
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f000 f8e8 	bl	8000534 <_ZN3PLM7PLModemILj1024EE6handleEPKv>
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b002      	add	sp, #8
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000a0 	.word	0x200000a0

08000370 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 UNUSED(huart);

	 KQ130F.rxInterrupt(huart);
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <HAL_UART_TxCpltCallback+0x1c>)
 800037c:	0011      	movs	r1, r2
 800037e:	0018      	movs	r0, r3
 8000380:	f000 f93a 	bl	80005f8 <_ZN3PLM7PLModemILj1024EE11rxInterruptEP20__UART_HandleTypeDef>
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200000a0 	.word	0x200000a0

08000390 <_ZN3Enc10EncryptionC1ERKS0_>:
#include <stddef.h>

#include "rsa.h"

namespace Enc {
	class Encryption {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	4a04      	ldr	r2, [pc, #16]	; (80003ac <_ZN3Enc10EncryptionC1ERKS0_+0x1c>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	08006690 	.word	0x08006690

080003b0 <StartTestCaseTask>:

void StartTestCaseTask(const void* args)
{
 80003b0:	b5b0      	push	{r4, r5, r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	6078      	str	r0, [r7, #4]
	uint8_t netId;
#ifdef TRANSMITTER
	netId = TRANSMITTER_NET_ID;
 80003b8:	250f      	movs	r5, #15
 80003ba:	197b      	adds	r3, r7, r5
 80003bc:	2202      	movs	r2, #2
 80003be:	701a      	strb	r2, [r3, #0]
#elif RECEIVER
	netId = RECEIVER_NET_ID;
#endif

	KQ130F.begin(netId, rsaEnc, 3, 300000);
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <StartTestCaseTask+0x68>)
 80003c2:	2408      	movs	r4, #8
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0011      	movs	r1, r2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f7ff ffe1 	bl	8000390 <_ZN3Enc10EncryptionC1ERKS0_>
 80003ce:	193a      	adds	r2, r7, r4
 80003d0:	197b      	adds	r3, r7, r5
 80003d2:	7819      	ldrb	r1, [r3, #0]
 80003d4:	4811      	ldr	r0, [pc, #68]	; (800041c <StartTestCaseTask+0x6c>)
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <StartTestCaseTask+0x70>)
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2303      	movs	r3, #3
 80003dc:	f000 f92e 	bl	800063c <_ZN3PLM7PLModemILj1024EE5beginEhN3Enc10EncryptionEhm>
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0018      	movs	r0, r3
 80003e4:	f005 ff1a 	bl	800621c <_ZN3Enc10EncryptionD1Ev>
  while (1)
  {
#ifdef TRANSMITTER
	  KQ130F.send(RECEIVER_NET_ID, helloWorld, strlen((char*)helloWorld));
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <StartTestCaseTask+0x74>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f7ff fe8c 	bl	8000108 <strlen>
 80003f0:	0003      	movs	r3, r0
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <StartTestCaseTask+0x74>)
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <StartTestCaseTask+0x6c>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	f000 f954 	bl	80006a4 <_ZN3PLM7PLModemILj1024EE4sendEhPKhj>

#elif RECEIVER

#endif

	  HAL_GPIO_TogglePin(RX_LED_GPIO_Port, RX_LED_Pin);
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	019b      	lsls	r3, r3, #6
 8000400:	4a09      	ldr	r2, [pc, #36]	; (8000428 <StartTestCaseTask+0x78>)
 8000402:	0019      	movs	r1, r3
 8000404:	0010      	movs	r0, r2
 8000406:	f001 fe96 	bl	8002136 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800040a:	23fa      	movs	r3, #250	; 0xfa
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	0018      	movs	r0, r3
 8000410:	f004 fe2e 	bl	8005070 <osDelay>
	  KQ130F.send(RECEIVER_NET_ID, helloWorld, strlen((char*)helloWorld));
 8000414:	e7e8      	b.n	80003e8 <StartTestCaseTask+0x38>
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	2000009c 	.word	0x2000009c
 800041c:	200000a0 	.word	0x200000a0
 8000420:	000493e0 	.word	0x000493e0
 8000424:	20000000 	.word	0x20000000
 8000428:	48000400 	.word	0x48000400

0800042c <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_jE_EvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	003b      	movs	r3, r7
 8000436:	7019      	strb	r1, [r3, #0]
      function(_Functor __f)
      : _Function_base()
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ff14 	bl	8000268 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8000440:	003b      	movs	r3, r7
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f961 	bl	800070a <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE21_M_not_empty_functionIS2_EEbRKT_>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d00f      	beq.n	800046c <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_jE_EvvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800044c:	687c      	ldr	r4, [r7, #4]
 800044e:	003b      	movs	r3, r7
 8000450:	0018      	movs	r0, r3
 8000452:	f000 f963 	bl	800071c <_ZSt4moveIRN6KQ130FMUlPhjE_EEONSt16remove_referenceIT_E4typeEOS4_>
 8000456:	0003      	movs	r3, r0
 8000458:	0019      	movs	r1, r3
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f967 	bl	800072e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_jE_EvvEET_+0x4c>)
 8000464:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_jE_EvvEET_+0x50>)
 800046a:	609a      	str	r2, [r3, #8]
	  }
      }
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	0018      	movs	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	b003      	add	sp, #12
 8000474:	bd90      	pop	{r4, r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	08000755 	.word	0x08000755
 800047c:	08000791 	.word	0x08000791

08000480 <_ZN3PLM7PLModemILj1024EEC1EP20__UART_HandleTypeDefS3_St8functionIFvPhhEE>:
			HAL_UART_Transmit(_modemCom, (uint8_t*)buf, len, 1000);
			return true;
		}

	public:
		PLModem(UART_HandleTypeDef* hu, UART_HandleTypeDef* dbg, rxFunc  func) :
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	603b      	str	r3, [r7, #0]
			_numRXPackets(0), _isTerminate(false), _rxCallback(func), _modemCom(hu), _dbugbCom(dbg) {
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	23fa      	movs	r3, #250	; 0xfa
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	2100      	movs	r1, #0
 8000496:	54d1      	strb	r1, [r2, r3]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	22fc      	movs	r2, #252	; 0xfc
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	4694      	mov	ip, r2
 80004a0:	4463      	add	r3, ip
 80004a2:	0018      	movs	r0, r3
 80004a4:	f005 feac 	bl	8006200 <_ZN3Enc10EncryptionC1Ev>
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	23fd      	movs	r3, #253	; 0xfd
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	2100      	movs	r1, #0
 80004b0:	54d1      	strb	r1, [r2, r3]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	22fe      	movs	r2, #254	; 0xfe
 80004b6:	0092      	lsls	r2, r2, #2
 80004b8:	4694      	mov	ip, r2
 80004ba:	4463      	add	r3, ip
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f988 	bl	80007d6 <_ZNSt8functionIFvPhhEEC1ERKS2_>
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	2381      	movs	r3, #129	; 0x81
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	50d1      	str	r1, [r2, r3]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4917      	ldr	r1, [pc, #92]	; (8000530 <_ZN3PLM7PLModemILj1024EEC1EP20__UART_HandleTypeDefS3_St8functionIFvPhhEE+0xb0>)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	505a      	str	r2, [r3, r1]
			for (uint8_t i = 0; i < NUM_MESSAGES(N); i++)
 80004d8:	2317      	movs	r3, #23
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	2517      	movs	r5, #23
 80004e2:	197b      	adds	r3, r7, r5
 80004e4:	781c      	ldrb	r4, [r3, #0]
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff fefa 	bl	80002e4 <_ZN3PLM7PLModemILj1024EE12NUM_MESSAGESEj>
 80004f0:	0003      	movs	r3, r0
 80004f2:	429c      	cmp	r4, r3
 80004f4:	419b      	sbcs	r3, r3
 80004f6:	425b      	negs	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d012      	beq.n	8000524 <_ZN3PLM7PLModemILj1024EEC1EP20__UART_HandleTypeDefS3_St8functionIFvPhhEE+0xa4>
				_msgHndls[i].msg.datStart = 64*i;
 80004fe:	197b      	adds	r3, r7, r5
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b29a      	uxth	r2, r3
 8000504:	197b      	adds	r3, r7, r5
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	0192      	lsls	r2, r2, #6
 800050a:	b291      	uxth	r1, r2
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	18d3      	adds	r3, r2, r3
 8000512:	330a      	adds	r3, #10
 8000514:	1c0a      	adds	r2, r1, #0
 8000516:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i < NUM_MESSAGES(N); i++)
 8000518:	197b      	adds	r3, r7, r5
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	197b      	adds	r3, r7, r5
 800051e:	3201      	adds	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e7dd      	b.n	80004e0 <_ZN3PLM7PLModemILj1024EEC1EP20__UART_HandleTypeDefS3_St8functionIFvPhhEE+0x60>
		}
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	0018      	movs	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	b006      	add	sp, #24
 800052c:	bdb0      	pop	{r4, r5, r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	0000040c 	.word	0x0000040c

08000534 <_ZN3PLM7PLModemILj1024EE6handleEPKv>:

			return true;
		}

		// This function handle receive from other devices and checks if it is handshake or data receive or auto id protocol
		void handle(const void* args) {
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
			_handleId = osThreadGetId();
 800053e:	f004 fd7c 	bl	800503a <osThreadGetId>
 8000542:	0001      	movs	r1, r0
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	23fb      	movs	r3, #251	; 0xfb
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	50d1      	str	r1, [r2, r3]
			while (not _isTerminate) {
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	23fd      	movs	r3, #253	; 0xfd
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	5cd3      	ldrb	r3, [r2, r3]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d142      	bne.n	80005de <_ZN3PLM7PLModemILj1024EE6handleEPKv+0xaa>
				osEvent ev = osSignalWait(10, 0);
 8000558:	240c      	movs	r4, #12
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	210a      	movs	r1, #10
 8000560:	0018      	movs	r0, r3
 8000562:	f004 fdd3 	bl	800510c <osSignalWait>
				if ((ev.status != osEventSignal || ev.value.signals != 10) || _numRXPackets == 0)
 8000566:	0022      	movs	r2, r4
 8000568:	18bb      	adds	r3, r7, r2
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b08      	cmp	r3, #8
 800056e:	d134      	bne.n	80005da <_ZN3PLM7PLModemILj1024EE6handleEPKv+0xa6>
 8000570:	18bb      	adds	r3, r7, r2
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b0a      	cmp	r3, #10
 8000576:	d130      	bne.n	80005da <_ZN3PLM7PLModemILj1024EE6handleEPKv+0xa6>
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	23fa      	movs	r3, #250	; 0xfa
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d02a      	beq.n	80005da <_ZN3PLM7PLModemILj1024EE6handleEPKv+0xa6>
				if (_handleId) {

				}


				if (HAL_UART_Receive(_modemCom, _waitBuf, 5, 200) == HAL_StatusTypeDef::HAL_OK)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	2381      	movs	r3, #129	; 0x81
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	58d0      	ldr	r0, [r2, r3]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3329      	adds	r3, #41	; 0x29
 8000590:	33ff      	adds	r3, #255	; 0xff
 8000592:	0019      	movs	r1, r3
 8000594:	23c8      	movs	r3, #200	; 0xc8
 8000596:	2205      	movs	r2, #5
 8000598:	f003 fb38 	bl	8003c0c <HAL_UART_Receive>
 800059c:	0003      	movs	r3, r0
 800059e:	425a      	negs	r2, r3
 80005a0:	4153      	adcs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00a      	beq.n	80005be <_ZN3PLM7PLModemILj1024EE6handleEPKv+0x8a>
					this->_rxCallback(_waitBuf, 5);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	22fe      	movs	r2, #254	; 0xfe
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	1898      	adds	r0, r3, r2
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3329      	adds	r3, #41	; 0x29
 80005b4:	33ff      	adds	r3, #255	; 0xff
 80005b6:	2205      	movs	r2, #5
 80005b8:	0019      	movs	r1, r3
 80005ba:	f000 f92e 	bl	800081a <_ZNKSt8functionIFvPhhEEclES0_h>
				HAL_UART_Transmit(_dbugbCom, _waitBuf, 5, 200);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <_ZN3PLM7PLModemILj1024EE6handleEPKv+0xc0>)
 80005c2:	5898      	ldr	r0, [r3, r2]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3329      	adds	r3, #41	; 0x29
 80005c8:	33ff      	adds	r3, #255	; 0xff
 80005ca:	0019      	movs	r1, r3
 80005cc:	23c8      	movs	r3, #200	; 0xc8
 80005ce:	2205      	movs	r2, #5
 80005d0:	f003 fa72 	bl	8003ab8 <HAL_UART_Transmit>

				osThreadYield();
 80005d4:	f004 fd44 	bl	8005060 <osThreadYield>
 80005d8:	e7b8      	b.n	800054c <_ZN3PLM7PLModemILj1024EE6handleEPKv+0x18>
					continue;
 80005da:	46c0      	nop			; (mov r8, r8)
			while (not _isTerminate) {
 80005dc:	e7b6      	b.n	800054c <_ZN3PLM7PLModemILj1024EE6handleEPKv+0x18>
			}

			osThreadTerminate(_handleId);
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	23fb      	movs	r3, #251	; 0xfb
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	58d3      	ldr	r3, [r2, r3]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f004 fd2d 	bl	8005046 <osThreadTerminate>
		}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b007      	add	sp, #28
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	0000040c 	.word	0x0000040c

080005f8 <_ZN3PLM7PLModemILj1024EE11rxInterruptEP20__UART_HandleTypeDef>:

		void rxInterrupt(UART_HandleTypeDef* huart) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
			if (huart == _modemCom) {
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	2381      	movs	r3, #129	; 0x81
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	58d3      	ldr	r3, [r2, r3]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d107      	bne.n	8000620 <_ZN3PLM7PLModemILj1024EE11rxInterruptEP20__UART_HandleTypeDef+0x28>
				osSignalSet(_handleId, 10);
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	23fb      	movs	r3, #251	; 0xfb
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	58d3      	ldr	r3, [r2, r3]
 8000618:	210a      	movs	r1, #10
 800061a:	0018      	movs	r0, r3
 800061c:	f004 fd3c 	bl	8005098 <osSignalSet>
			}
		}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}

08000628 <_ZN3Enc10EncryptionaSERKS0_>:
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN3PLM7PLModemILj1024EE5beginEhN3Enc10EncryptionEhm>:
		bool begin(uint8_t netId, Enc::Encryption encMethod, uint8_t maxRetries, uint32_t rxOut) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	0008      	movs	r0, r1
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	0019      	movs	r1, r3
 800064a:	240b      	movs	r4, #11
 800064c:	193b      	adds	r3, r7, r4
 800064e:	1c02      	adds	r2, r0, #0
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	200a      	movs	r0, #10
 8000654:	183b      	adds	r3, r7, r0
 8000656:	1c0a      	adds	r2, r1, #0
 8000658:	701a      	strb	r2, [r3, #0]
			this->_netId = netId;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	193a      	adds	r2, r7, r4
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	701a      	strb	r2, [r3, #0]
			this->_maxRetries = maxRetries;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	183a      	adds	r2, r7, r0
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	705a      	strb	r2, [r3, #1]
			this->_rxOutMicSec = rxOut;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6a3a      	ldr	r2, [r7, #32]
 800066e:	605a      	str	r2, [r3, #4]
			this->_enc = encMethod;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	22fc      	movs	r2, #252	; 0xfc
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	4694      	mov	ip, r2
 8000678:	4463      	add	r3, ip
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ffd2 	bl	8000628 <_ZN3Enc10EncryptionaSERKS0_>
			HAL_UART_Receive_IT(_modemCom, _waitBuf, 1);
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	2381      	movs	r3, #129	; 0x81
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	58d0      	ldr	r0, [r2, r3]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3329      	adds	r3, #41	; 0x29
 8000690:	33ff      	adds	r3, #255	; 0xff
 8000692:	2201      	movs	r2, #1
 8000694:	0019      	movs	r1, r3
 8000696:	f003 fb95 	bl	8003dc4 <HAL_UART_Receive_IT>
			return true;
 800069a:	2301      	movs	r3, #1
		}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	b005      	add	sp, #20
 80006a2:	bd90      	pop	{r4, r7, pc}

080006a4 <_ZN3PLM7PLModemILj1024EE4sendEhPKhj>:
		bool send(const uint8_t netid, const uint8_t* buf, const size_t len) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	230b      	movs	r3, #11
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	1c0a      	adds	r2, r1, #0
 80006b6:	701a      	strb	r2, [r3, #0]
			int emptyMsgIdx = _findOccupyEmptyMessage();
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f8d2 	bl	8000864 <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv>
 80006c0:	0003      	movs	r3, r0
 80006c2:	617b      	str	r3, [r7, #20]
			if (emptyMsgIdx == -1)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	d101      	bne.n	80006ce <_ZN3PLM7PLModemILj1024EE4sendEhPKhj+0x2a>
				return NICStatus::SpaceNotAvailable;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e019      	b.n	8000702 <_ZN3PLM7PLModemILj1024EE4sendEhPKhj+0x5e>
			Message& msg = _msgHndls[emptyMsgIdx].msg;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	3308      	adds	r3, #8
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	18d3      	adds	r3, r2, r3
 80006d8:	613b      	str	r3, [r7, #16]
			_generateMessage(msg, netid, buf, len);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	687c      	ldr	r4, [r7, #4]
 80006e0:	220b      	movs	r2, #11
 80006e2:	18ba      	adds	r2, r7, r2
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	0023      	movs	r3, r4
 80006ee:	f000 f8f9 	bl	80008e4 <_ZN3PLM7PLModemILj1024EE16_generateMessageERNS1_7MessageEhPKhh>
			_sendBasic(buf, (uint8_t)len); // TODO here we cast to uint8_t but it might be bigger
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f91a 	bl	8000934 <_ZN3PLM7PLModemILj1024EE10_sendBasicEPKhh>
			return true;
 8000700:	2301      	movs	r3, #1
		}
 8000702:	0018      	movs	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	b007      	add	sp, #28
 8000708:	bd90      	pop	{r4, r7, pc}

0800070a <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	  { return true; }
 8000712:	2301      	movs	r3, #1
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZSt4moveIRN6KQ130FMUlPhjE_EEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	0018      	movs	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800072e:	b590      	push	{r4, r7, lr}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff ffee 	bl	800071c <_ZSt4moveIRN6KQ130FMUlPhjE_EEONSt16remove_referenceIT_E4typeEOS4_>
 8000740:	0001      	movs	r1, r0
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1c22      	adds	r2, r4, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f916 	bl	8000978 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b003      	add	sp, #12
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_jE_EE9_M_invokeERKSt9_Any_dataOS0_Oh>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f920 	bl	80009a8 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE14_M_get_pointerERKSt9_Any_data>
 8000768:	0004      	movs	r4, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	0018      	movs	r0, r3
 800076e:	f000 f92f 	bl	80009d0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8000772:	0005      	movs	r5, r0
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f933 	bl	80009e2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800077c:	0003      	movs	r3, r0
 800077e:	001a      	movs	r2, r3
 8000780:	0029      	movs	r1, r5
 8000782:	0020      	movs	r0, r4
 8000784:	f000 f936 	bl	80009f4 <_ZSt10__invoke_rIvRN6KQ130FMUlPhjE_EJS0_hEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>
				     std::forward<_ArgTypes>(__args)...);
 8000788:	46c0      	nop			; (mov r8, r8)
      }
 800078a:	46bd      	mov	sp, r7
 800078c:	b004      	add	sp, #16
 800078e:	bdb0      	pop	{r4, r5, r7, pc}

08000790 <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_jE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	701a      	strb	r2, [r3, #0]
	switch (__op)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d10b      	bne.n	80007be <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_jE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x2e>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f941 	bl	8000a30 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhjE_EEERT_v>
 80007ae:	0004      	movs	r4, r0
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8f8 	bl	80009a8 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE14_M_get_pointerERKSt9_Any_data>
 80007b8:	0003      	movs	r3, r0
 80007ba:	6023      	str	r3, [r4, #0]
	    break;
 80007bc:	e006      	b.n	80007cc <_ZNSt17_Function_handlerIFvPhhEN6KQ130FMUlS0_jE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3c>
	    _Base::_M_manager(__dest, __source, __op);
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f93f 	bl	8000a4a <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80007cc:	2300      	movs	r3, #0
      }
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b005      	add	sp, #20
 80007d4:	bd90      	pop	{r4, r7, pc}

080007d6 <_ZNSt8functionIFvPhhEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fd40 	bl	8000268 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f95c 	bl	8000aa8 <_ZNKSt8functionIFvPhhEEcvbEv>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d00d      	beq.n	8000810 <_ZNSt8functionIFvPhhEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	2202      	movs	r2, #2
 80007fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	609a      	str	r2, [r3, #8]
    }
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <_ZNKSt8functionIFvPhhEEclES0_h>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800081a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	701a      	strb	r2, [r3, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fd3b 	bl	80002a6 <_ZNKSt14_Function_base8_M_emptyEv>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <_ZNKSt8functionIFvPhhEEclES0_h+0x1e>
	__throw_bad_function_call();
 8000834:	f005 fd2c 	bl	8006290 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	68dc      	ldr	r4, [r3, #12]
 800083c:	68fd      	ldr	r5, [r7, #12]
 800083e:	2308      	movs	r3, #8
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8c4 	bl	80009d0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8000848:	0006      	movs	r6, r0
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f8c8 	bl	80009e2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	0031      	movs	r1, r6
 8000858:	0028      	movs	r0, r5
 800085a:	47a0      	blx	r4
 800085c:	46c0      	nop			; (mov r8, r8)
    }
 800085e:	46bd      	mov	sp, r7
 8000860:	b005      	add	sp, #20
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000864 <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv>:
		int _findOccupyEmptyMessage() {
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
			for (uint8_t i = 0; i < NUM_MESSAGES(N); i++)
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	250f      	movs	r5, #15
 8000876:	197b      	adds	r3, r7, r5
 8000878:	781c      	ldrb	r4, [r3, #0]
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fd30 	bl	80002e4 <_ZN3PLM7PLModemILj1024EE12NUM_MESSAGESEj>
 8000884:	0003      	movs	r3, r0
 8000886:	429c      	cmp	r4, r3
 8000888:	419b      	sbcs	r3, r3
 800088a:	425b      	negs	r3, r3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv+0x74>
				if (not(_msgHndls[i].flags & ((uint8_t)1 << 7))) {
 8000892:	197b      	adds	r3, r7, r5
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3201      	adds	r2, #1
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	5cd3      	ldrb	r3, [r2, r3]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db12      	blt.n	80008ca <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv+0x66>
					_msgHndls[i].flags |= (uint8_t)1 << 7;
 80008a4:	197b      	adds	r3, r7, r5
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3201      	adds	r2, #1
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	197a      	adds	r2, r7, r5
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4249      	negs	r1, r1
 80008b8:	430b      	orrs	r3, r1
 80008ba:	b2d9      	uxtb	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3201      	adds	r2, #1
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	54d1      	strb	r1, [r2, r3]
					return i;
 80008c4:	197b      	adds	r3, r7, r5
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	e008      	b.n	80008dc <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv+0x78>
			for (uint8_t i = 0; i < NUM_MESSAGES(N); i++)
 80008ca:	210f      	movs	r1, #15
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	3201      	adds	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e7cd      	b.n	8000874 <_ZN3PLM7PLModemILj1024EE23_findOccupyEmptyMessageEv+0x10>
			return -1;
 80008d8:	2301      	movs	r3, #1
 80008da:	425b      	negs	r3, r3
		}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b004      	add	sp, #16
 80008e2:	bdb0      	pop	{r4, r5, r7, pc}

080008e4 <_ZN3PLM7PLModemILj1024EE16_generateMessageERNS1_7MessageEhPKhh>:
		void _generateMessage(Message& msg, const uint8_t netId, const uint8_t* dat, const uint8_t len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
			msg.netId = netId;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	701a      	strb	r2, [r3, #0]
			msg.datLen = len;
 80008fc:	2118      	movs	r1, #24
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b29a      	uxth	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	809a      	strh	r2, [r3, #4]
			memcpy(_waitBuf+(msg.datStart), dat, len);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3329      	adds	r3, #41	; 0x29
 800090c:	33ff      	adds	r3, #255	; 0xff
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	8852      	ldrh	r2, [r2, #2]
 8000912:	1898      	adds	r0, r3, r2
 8000914:	187b      	adds	r3, r7, r1
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	0019      	movs	r1, r3
 800091c:	f005 fcfc 	bl	8006318 <memcpy>
			_generateCRC(msg);
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 f8cf 	bl	8000aca <_ZN3PLM7PLModemILj1024EE12_generateCRCERNS1_7MessageE>
		}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}

08000934 <_ZN3PLM7PLModemILj1024EE10_sendBasicEPKhh>:
		bool _sendBasic(const uint8_t* buf, const uint8_t len) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(_modemCom, (uint8_t*)&len, 1, 1000);
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	2381      	movs	r3, #129	; 0x81
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	58d0      	ldr	r0, [r2, r3]
 800094a:	23fa      	movs	r3, #250	; 0xfa
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	2201      	movs	r2, #1
 8000952:	f003 f8b1 	bl	8003ab8 <HAL_UART_Transmit>
			HAL_UART_Transmit(_modemCom, (uint8_t*)buf, len, 1000);
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	2381      	movs	r3, #129	; 0x81
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	58d0      	ldr	r0, [r2, r3]
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b29a      	uxth	r2, r3
 8000964:	23fa      	movs	r3, #250	; 0xfa
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	f003 f8a5 	bl	8003ab8 <HAL_UART_Transmit>
			return true;
 800096e:	2301      	movs	r3, #1
		}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bd80      	pop	{r7, pc}

08000978 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff fec7 	bl	800071c <_ZSt4moveIRN6KQ130FMUlPhjE_EEONSt16remove_referenceIT_E4typeEOS4_>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fc57 	bl	8000244 <_ZNSt9_Any_data9_M_accessEv>
 8000996:	0003      	movs	r3, r0
 8000998:	0019      	movs	r1, r3
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fc48 	bl	8000230 <_ZnwjPv>
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f892 	bl	8000adc <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhjE_EEERKT_v>
 80009b8:	0003      	movs	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f899 	bl	8000af6 <_ZSt11__addressofIKN6KQ130FMUlPhjE_EEPT_RS3_>
 80009c4:	0003      	movs	r3, r0
 80009c6:	46c0      	nop			; (mov r8, r8)
	}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZSt10__invoke_rIvRN6KQ130FMUlPhjE_EJS0_hEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f880 	bl	8000b08 <_ZSt7forwardIRN6KQ130FMUlPhjE_EEOT_RNSt16remove_referenceIS3_E4typeE>
 8000a08:	0004      	movs	r4, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ffdf 	bl	80009d0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8000a12:	0005      	movs	r5, r0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff ffe3 	bl	80009e2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	002a      	movs	r2, r5
 8000a20:	0021      	movs	r1, r4
 8000a22:	1c30      	adds	r0, r6, #0
 8000a24:	f000 f879 	bl	8000b1a <_ZSt13__invoke_implIvRN6KQ130FMUlPhjE_EJS0_hEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b005      	add	sp, #20
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a30 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhjE_EEERT_v>:
      _M_access()
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff fc02 	bl	8000244 <_ZNSt9_Any_data9_M_accessEv>
 8000a40:	0003      	movs	r3, r0
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8000a4a:	b5b0      	push	{r4, r5, r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d018      	beq.n	8000a92 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x48>
 8000a60:	dc1d      	bgt.n	8000a9e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d002      	beq.n	8000a6c <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d00c      	beq.n	8000a84 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3a>
 8000a6a:	e018      	b.n	8000a9e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ffde 	bl	8000a30 <_ZNSt9_Any_data9_M_accessIPN6KQ130FMUlPhjE_EEERT_v>
 8000a74:	0004      	movs	r4, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff95 	bl	80009a8 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE14_M_get_pointerERKSt9_Any_data>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	6023      	str	r3, [r4, #0]
	      break;
 8000a82:	e00c      	b.n	8000a9e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	1c2a      	adds	r2, r5, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f868 	bl	8000b60 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8000a90:	e005      	b.n	8000a9e <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	1c21      	adds	r1, r4, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f87a 	bl	8000b90 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8000a9c:	46c0      	nop			; (mov r8, r8)
	  return false;
 8000a9e:	2300      	movs	r3, #0
	}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bdb0      	pop	{r4, r5, r7, pc}

08000aa8 <_ZNKSt8functionIFvPhhEEcvbEv>:
      explicit operator bool() const noexcept
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fbf7 	bl	80002a6 <_ZNKSt14_Function_base8_M_emptyEv>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	001a      	movs	r2, r3
 8000abc:	2301      	movs	r3, #1
 8000abe:	4053      	eors	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_ZN3PLM7PLModemILj1024EE12_generateCRCERNS1_7MessageE>:
		void _generateCRC(Message& msg) {
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
		}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhjE_EEERKT_v>:
      _M_access() const
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fbb5 	bl	8000256 <_ZNKSt9_Any_data9_M_accessEv>
 8000aec:	0003      	movs	r3, r0
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_ZSt11__addressofIKN6KQ130FMUlPhjE_EEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZSt7forwardIRN6KQ130FMUlPhjE_EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_ZSt13__invoke_implIvRN6KQ130FMUlPhjE_EJS0_hEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8000b1a:	b5b0      	push	{r4, r5, r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	240c      	movs	r4, #12
 8000b22:	193c      	adds	r4, r7, r4
 8000b24:	7020      	strb	r0, [r4, #0]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ffea 	bl	8000b08 <_ZSt7forwardIRN6KQ130FMUlPhjE_EEOT_RNSt16remove_referenceIS3_E4typeE>
 8000b34:	0005      	movs	r5, r0
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff49 	bl	80009d0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	681c      	ldr	r4, [r3, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff4c 	bl	80009e2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	001a      	movs	r2, r3
 8000b50:	0021      	movs	r1, r4
 8000b52:	0028      	movs	r0, r5
 8000b54:	f7ff fbd8 	bl	8000308 <_ZNK6KQ130FMUlPhjE_clES_j>
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b004      	add	sp, #16
 8000b5e:	bdb0      	pop	{r4, r5, r7, pc}

08000b60 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	701a      	strb	r2, [r3, #0]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ffb3 	bl	8000adc <_ZNKSt9_Any_data9_M_accessIN6KQ130FMUlPhjE_EEERKT_v>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fb63 	bl	8000244 <_ZNSt9_Any_data9_M_accessEv>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fb54 	bl	8000230 <_ZnwjPv>
	}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZNSt14_Function_base13_Base_managerIN6KQ130FMUlPhjE_EE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	003b      	movs	r3, r7
 8000b9a:	7019      	strb	r1, [r3, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 f804 	bl	8000bac <_ZNSt9_Any_data9_M_accessIN6KQ130FMUlPhjE_EEERT_v>
	}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZNSt9_Any_data9_M_accessIN6KQ130FMUlPhjE_EEERT_v>:
      _M_access()
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fb44 	bl	8000244 <_ZNSt9_Any_data9_M_accessEv>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN3PLM7PLModemILj1024EED1Ev>:
	class PLModem {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	22fe      	movs	r2, #254	; 0xfe
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbab 	bl	8000334 <_ZNSt8functionIFvPhhEED1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	22fc      	movs	r2, #252	; 0xfc
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	4694      	mov	ip, r2
 8000be6:	4463      	add	r3, ip
 8000be8:	0018      	movs	r0, r3
 8000bea:	f005 fb17 	bl	800621c <_ZN3Enc10EncryptionD1Ev>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN3Enc3RSAD1Ev>:

		virtual void encrypt(const uint8_t* plain, const size_t pLen, uint8_t* enc, size_t& eLen);
		virtual void decrypt(const uint8_t* enc, const size_t eLen, uint8_t* plain, size_t& pLen);
	};

	class RSA: public Encryption {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_ZN3Enc3RSAD1Ev+0x20>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f005 fb07 	bl	800621c <_ZN3Enc10EncryptionD1Ev>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08006678 	.word	0x08006678

08000c1c <_ZN3Enc3RSAD0Ev>:
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff ffe6 	bl	8000bf8 <_ZN3Enc3RSAD1Ev>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2104      	movs	r1, #4
 8000c30:	0018      	movs	r0, r3
 8000c32:	f005 fb29 	bl	8006288 <_ZdlPvj>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_Z41__static_initialization_and_destruction_0ii>:
  }
}
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d118      	bne.n	8000c82 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d114      	bne.n	8000c82 <_Z41__static_initialization_and_destruction_0ii+0x42>
Enc::RSA rsaEnc;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f005 faa8 	bl	80061b0 <_ZN3Enc3RSAC1Ev>
								{ HAL_UART_Transmit(&huart1, (uint8_t*)"RX", 2, 500); });
 8000c60:	2508      	movs	r5, #8
 8000c62:	197b      	adds	r3, r7, r5
 8000c64:	1c21      	adds	r1, r4, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fbe0 	bl	800042c <_ZNSt8functionIFvPhhEEC1IN6KQ130FMUlS0_jE_EvvEET_>
 8000c6c:	002c      	movs	r4, r5
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000c72:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000c76:	f7ff fc03 	bl	8000480 <_ZN3PLM7PLModemILj1024EEC1EP20__UART_HandleTypeDefS3_St8functionIFvPhhEE>
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fb59 	bl	8000334 <_ZNSt8functionIFvPhhEED1Ev>
PLM::PLModem<1024> KQ130F(&huart2, &huart1, [](uint8_t* frame, const size_t len)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10b      	bne.n	8000ca0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d107      	bne.n	8000ca0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff97 	bl	8000bc6 <_ZN3PLM7PLModemILj1024EED1Ev>
Enc::RSA rsaEnc;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ffac 	bl	8000bf8 <_ZN3Enc3RSAD1Ev>
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b006      	add	sp, #24
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca8:	0000ffff 	.word	0x0000ffff
 8000cac:	2000009c 	.word	0x2000009c
 8000cb0:	20000724 	.word	0x20000724
 8000cb4:	200007a8 	.word	0x200007a8
 8000cb8:	200000a0 	.word	0x200000a0

08000cbc <_GLOBAL__sub_I_helloWorld>:
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <_GLOBAL__sub_I_helloWorld+0x14>)
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ffbb 	bl	8000c40 <_Z41__static_initialization_and_destruction_0ii>
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	0000ffff 	.word	0x0000ffff

08000cd4 <_GLOBAL__sub_D_helloWorld>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <_GLOBAL__sub_D_helloWorld+0x14>)
 8000cda:	0019      	movs	r1, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffaf 	bl	8000c40 <_Z41__static_initialization_and_destruction_0ii>
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	0000ffff 	.word	0x0000ffff

08000cec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <vApplicationGetIdleTaskMemory+0x28>)
 8000cfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	200004b0 	.word	0x200004b0
 8000d18:	2000055c 	.word	0x2000055c

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f000 fdd3 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f851 	bl	8000dcc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 fa65 	bl	80011f8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000d2e:	f000 f9d5 	bl	80010dc <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 8000d32:	f000 f8f5 	bl	8000f20 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8000d36:	f000 fa05 	bl	8001144 <_ZL19MX_USART2_UART_Initv>
  MX_DMA_Init();
 8000d3a:	f000 fa37 	bl	80011ac <_ZL11MX_DMA_Initv>
  MX_CRC_Init();
 8000d3e:	f000 f8cb 	bl	8000ed8 <_ZL11MX_CRC_Initv>
  MX_RTC_Init();
 8000d42:	f000 f95d 	bl	8001000 <_ZL11MX_RTC_Initv>
  MX_IWDG_Init();
 8000d46:	f000 f937 	bl	8000fb8 <_ZL12MX_IWDG_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64, defaultTaskBuffer, &defaultTaskControlBlock);
 8000d4a:	213c      	movs	r1, #60	; 0x3c
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <main+0x98>)
 8000d50:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d52:	c331      	stmia	r3!, {r0, r4, r5}
 8000d54:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d56:	c331      	stmia	r3!, {r0, r4, r5}
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f004 f944 	bl	8004fee <osThreadCreate>
 8000d66:	0002      	movs	r2, r0
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <main+0x9c>)
 8000d6a:	601a      	str	r2, [r3, #0]

  /* definition and creation of plNICHandleTask */
  osThreadStaticDef(plNICHandleTask, StartplNICHandleTask, osPriorityAboveNormal, 0, 256, plNICHandleTaskBuffer, &plNICHandleTaskControlBlock);
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <main+0xa0>)
 8000d72:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d74:	c331      	stmia	r3!, {r0, r4, r5}
 8000d76:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d78:	c331      	stmia	r3!, {r0, r4, r5}
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
  plNICHandleTaskHandle = osThreadCreate(osThread(plNICHandleTask), NULL);
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2100      	movs	r1, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f004 f933 	bl	8004fee <osThreadCreate>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <main+0xa4>)
 8000d8c:	601a      	str	r2, [r3, #0]

  /* definition and creation of testCaseTask */
  osThreadStaticDef(testCaseTask, StartTestCaseTask, osPriorityIdle, 0, 256, testCaseTaskBuffer, &testCaseTaskControlBlock);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <main+0xa8>)
 8000d92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d94:	c313      	stmia	r3!, {r0, r1, r4}
 8000d96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d98:	c313      	stmia	r3!, {r0, r1, r4}
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	601a      	str	r2, [r3, #0]
  testCaseTaskHandle = osThreadCreate(osThread(testCaseTask), NULL);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f004 f923 	bl	8004fee <osThreadCreate>
 8000da8:	0002      	movs	r2, r0
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <main+0xac>)
 8000dac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dae:	f004 f916 	bl	8004fde <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x96>
 8000db4:	080065b4 	.word	0x080065b4
 8000db8:	2000093c 	.word	0x2000093c
 8000dbc:	080065d0 	.word	0x080065d0
 8000dc0:	20000aec 	.word	0x20000aec
 8000dc4:	080065ec 	.word	0x080065ec
 8000dc8:	20000f9c 	.word	0x20000f9c

08000dcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b095      	sub	sp, #84	; 0x54
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	2420      	movs	r4, #32
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2330      	movs	r3, #48	; 0x30
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f005 faa4 	bl	800632a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	2310      	movs	r3, #16
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	0018      	movs	r0, r3
 8000de8:	2310      	movs	r3, #16
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f005 fa9c 	bl	800632a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df2:	003b      	movs	r3, r7
 8000df4:	0018      	movs	r0, r3
 8000df6:	2310      	movs	r3, #16
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f005 fa95 	bl	800632a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e00:	f001 fbc8 	bl	8002594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <_Z18SystemClock_Configv+0x104>)
 8000e06:	6a1a      	ldr	r2, [r3, #32]
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <_Z18SystemClock_Configv+0x104>)
 8000e0a:	2118      	movs	r1, #24
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	621a      	str	r2, [r3, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e10:	0021      	movs	r1, r4
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	220e      	movs	r2, #14
 8000e16:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2210      	movs	r2, #16
 8000e28:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2202      	movs	r2, #2
 8000e34:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	22a0      	movs	r2, #160	; 0xa0
 8000e40:	0392      	lsls	r2, r2, #14
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fbaf 	bl	80025b0 <HAL_RCC_OscConfig>
 8000e52:	0003      	movs	r3, r0
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	4193      	sbcs	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000e5e:	f000 fa3d 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	2110      	movs	r1, #16
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2207      	movs	r2, #7
 8000e68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 feaf 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000e86:	0003      	movs	r3, r0
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	4193      	sbcs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000e92:	f000 fa23 	bl	80012dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000e96:	003b      	movs	r3, r7
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <_Z18SystemClock_Configv+0x108>)
 8000e9a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ea8:	003b      	movs	r3, r7
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 f812 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	4193      	sbcs	r3, r2
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000ec4:	f000 fa0a 	bl	80012dc <Error_Handler>
  }
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b015      	add	sp, #84	; 0x54
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	00010021 	.word	0x00010021

08000ed8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <_ZL11MX_CRC_Initv+0x44>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_ZL11MX_CRC_Initv+0x40>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 fdc2 	bl	8001a86 <HAL_CRC_Init>
 8000f02:	0003      	movs	r3, r0
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	4193      	sbcs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <_ZL11MX_CRC_Initv+0x3a>
  {
    Error_Handler();
 8000f0e:	f000 f9e5 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000065c 	.word	0x2000065c
 8000f1c:	40023000 	.word	0x40023000

08000f20 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <_ZL12MX_I2C1_Initv+0x90>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <_ZL12MX_I2C1_Initv+0x94>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 f905 	bl	800216c <HAL_I2C_Init>
 8000f62:	0003      	movs	r3, r0
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	4193      	sbcs	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 8000f6e:	f000 f9b5 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 fa22 	bl	80023c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	4193      	sbcs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8000f88:	f000 f9a8 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <_ZL12MX_I2C1_Initv+0x8c>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 fa61 	bl	8002458 <HAL_I2CEx_ConfigDigitalFilter>
 8000f96:	0003      	movs	r3, r0
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	4193      	sbcs	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 8000fa2:	f000 f99b 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000678 	.word	0x20000678
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	2000090e 	.word	0x2000090e

08000fb8 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <_ZL12MX_IWDG_Initv+0x3c>)
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <_ZL12MX_IWDG_Initv+0x40>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <_ZL12MX_IWDG_Initv+0x3c>)
 8000fc4:	2206      	movs	r2, #6
 8000fc6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <_ZL12MX_IWDG_Initv+0x3c>)
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <_ZL12MX_IWDG_Initv+0x44>)
 8000fcc:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <_ZL12MX_IWDG_Initv+0x3c>)
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <_ZL12MX_IWDG_Initv+0x44>)
 8000fd2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_ZL12MX_IWDG_Initv+0x3c>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 fa8a 	bl	80024f0 <HAL_IWDG_Init>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	4193      	sbcs	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <_ZL12MX_IWDG_Initv+0x34>
  {
    Error_Handler();
 8000fe8:	f000 f978 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	200006f4 	.word	0x200006f4
 8000ff8:	40003000 	.word	0x40003000
 8000ffc:	00000fff 	.word	0x00000fff

08001000 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	0018      	movs	r0, r3
 800100a:	2314      	movs	r3, #20
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f005 f98b 	bl	800632a <memset>
  RTC_DateTypeDef sDate = {0};
 8001014:	003b      	movs	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <_ZL11MX_RTC_Initv+0xd8>)
 800101e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 8001028:	227f      	movs	r2, #127	; 0x7f
 800102a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 8001046:	0018      	movs	r0, r3
 8001048:	f002 f816 	bl	8003078 <HAL_RTC_Init>
 800104c:	0003      	movs	r3, r0
 800104e:	1e5a      	subs	r2, r3, #1
 8001050:	4193      	sbcs	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 8001058:	f000 f940 	bl	80012dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800107a:	1d39      	adds	r1, r7, #4
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 800107e:	2201      	movs	r2, #1
 8001080:	0018      	movs	r0, r3
 8001082:	f002 f88d 	bl	80031a0 <HAL_RTC_SetTime>
 8001086:	0003      	movs	r3, r0
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	4193      	sbcs	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8001092:	f000 f923 	bl	80012dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001096:	003b      	movs	r3, r7
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800109c:	003b      	movs	r3, r7
 800109e:	2201      	movs	r2, #1
 80010a0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80010a2:	003b      	movs	r3, r7
 80010a4:	2201      	movs	r2, #1
 80010a6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80010a8:	003b      	movs	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010ae:	0039      	movs	r1, r7
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_ZL11MX_RTC_Initv+0xd4>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 f92f 	bl	8003318 <HAL_RTC_SetDate>
 80010ba:	0003      	movs	r3, r0
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	4193      	sbcs	r3, r2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZL11MX_RTC_Initv+0xca>
  {
    Error_Handler();
 80010c6:	f000 f909 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000704 	.word	0x20000704
 80010d8:	40002800 	.word	0x40002800

080010dc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <_ZL19MX_USART1_UART_Initv+0x64>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 80010e8:	22e1      	movs	r2, #225	; 0xe1
 80010ea:	0252      	lsls	r2, r2, #9
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001120:	0018      	movs	r0, r3
 8001122:	f002 fc75 	bl	8003a10 <HAL_UART_Init>
 8001126:	0003      	movs	r3, r0
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	4193      	sbcs	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8001132:	f000 f8d3 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000724 	.word	0x20000724
 8001140:	40013800 	.word	0x40013800

08001144 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001150:	2296      	movs	r2, #150	; 0x96
 8001152:	0192      	lsls	r2, r2, #6
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001188:	0018      	movs	r0, r3
 800118a:	f002 fc41 	bl	8003a10 <HAL_UART_Init>
 800118e:	0003      	movs	r3, r0
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	4193      	sbcs	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 800119a:	f000 f89f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200007a8 	.word	0x200007a8
 80011a8:	40004400 	.word	0x40004400

080011ac <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_ZL11MX_DMA_Initv+0x48>)
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <_ZL11MX_DMA_Initv+0x48>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <_ZL11MX_DMA_Initv+0x48>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2103      	movs	r1, #3
 80011ce:	200a      	movs	r0, #10
 80011d0:	f000 fc34 	bl	8001a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f000 fc46 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2103      	movs	r1, #3
 80011de:	200b      	movs	r0, #11
 80011e0:	f000 fc2c 	bl	8001a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f000 fc3e 	bl	8001a66 <HAL_NVIC_EnableIRQ>

}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	40021000 	.word	0x40021000

080011f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	240c      	movs	r4, #12
 8001200:	193b      	adds	r3, r7, r4
 8001202:	0018      	movs	r0, r3
 8001204:	2314      	movs	r3, #20
 8001206:	001a      	movs	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f005 f88e 	bl	800632a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0309      	lsls	r1, r1, #12
 8001218:	430a      	orrs	r2, r1
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	031b      	lsls	r3, r3, #12
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0289      	lsls	r1, r1, #10
 8001234:	430a      	orrs	r2, r1
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	02c9      	lsls	r1, r1, #11
 8001250:	430a      	orrs	r2, r1
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <_ZL12MX_GPIO_Initv+0xa8>)
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	02db      	lsls	r3, r3, #11
 800125c:	4013      	ands	r3, r2
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 8001262:	23c0      	movs	r3, #192	; 0xc0
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <_ZL12MX_GPIO_Initv+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	0019      	movs	r1, r3
 800126c:	f000 ff46 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_LED_Pin RX_LED_Pin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8001270:	193b      	adds	r3, r7, r4
 8001272:	22c0      	movs	r2, #192	; 0xc0
 8001274:	0192      	lsls	r2, r2, #6
 8001276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	193b      	adds	r3, r7, r4
 800127a:	2201      	movs	r2, #1
 800127c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	193b      	adds	r3, r7, r4
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_ZL12MX_GPIO_Initv+0xac>)
 800128e:	0019      	movs	r1, r3
 8001290:	0010      	movs	r0, r2
 8001292:	f000 fdc3 	bl	8001e1c <HAL_GPIO_Init>

}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b009      	add	sp, #36	; 0x24
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400

080012a8 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f003 fedd 	bl	8005070 <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <_Z16StartDefaultTaskPKv+0x8>

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f000 fb13 	bl	80018f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40014800 	.word	0x40014800

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_MspInit+0x50>)
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_MspInit+0x50>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x50>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x50>)
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_MspInit+0x50>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0549      	lsls	r1, r1, #21
 8001310:	430a      	orrs	r2, r1
 8001312:	61da      	str	r2, [r3, #28]
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_MspInit+0x50>)
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	055b      	lsls	r3, r3, #21
 800131c:	4013      	ands	r3, r2
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001322:	2302      	movs	r3, #2
 8001324:	425b      	negs	r3, r3
 8001326:	2200      	movs	r2, #0
 8001328:	2103      	movs	r1, #3
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fb86 	bl	8001a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_CRC_MspInit+0x34>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10b      	bne.n	8001366 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_CRC_MspInit+0x38>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_CRC_MspInit+0x38>)
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	430a      	orrs	r2, r1
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_CRC_MspInit+0x38>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2240      	movs	r2, #64	; 0x40
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40023000 	.word	0x40023000
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2414      	movs	r4, #20
 8001382:	193b      	adds	r3, r7, r4
 8001384:	0018      	movs	r0, r3
 8001386:	2314      	movs	r3, #20
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f004 ffcd 	bl	800632a <memset>
  if(hi2c->Instance==I2C1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_I2C_MspInit+0x90>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d131      	bne.n	80013fe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_I2C_MspInit+0x94>)
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_I2C_MspInit+0x94>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	02c9      	lsls	r1, r1, #11
 80013a4:	430a      	orrs	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_I2C_MspInit+0x94>)
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	02db      	lsls	r3, r3, #11
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	0021      	movs	r1, r4
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	22c0      	movs	r2, #192	; 0xc0
 80013bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2212      	movs	r2, #18
 80013c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2203      	movs	r2, #3
 80013ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2201      	movs	r2, #1
 80013d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_I2C_MspInit+0x98>)
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f000 fd1d 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_I2C_MspInit+0x94>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_I2C_MspInit+0x94>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0389      	lsls	r1, r1, #14
 80013ec:	430a      	orrs	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_I2C_MspInit+0x94>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	039b      	lsls	r3, r3, #14
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b00b      	add	sp, #44	; 0x2c
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40005400 	.word	0x40005400
 800140c:	40021000 	.word	0x40021000
 8001410:	48000400 	.word	0x48000400

08001414 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_RTC_MspInit+0x28>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d106      	bne.n	8001434 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RTC_MspInit+0x2c>)
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_RTC_MspInit+0x2c>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0209      	lsls	r1, r1, #8
 8001430:	430a      	orrs	r2, r1
 8001432:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40002800 	.word	0x40002800
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08d      	sub	sp, #52	; 0x34
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	241c      	movs	r4, #28
 800144e:	193b      	adds	r3, r7, r4
 8001450:	0018      	movs	r0, r3
 8001452:	2314      	movs	r3, #20
 8001454:	001a      	movs	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	f004 ff67 	bl	800632a <memset>
  if(huart->Instance==USART1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a90      	ldr	r2, [pc, #576]	; (80016a4 <HAL_UART_MspInit+0x260>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d000      	beq.n	8001468 <HAL_UART_MspInit+0x24>
 8001466:	e08a      	b.n	800157e <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <HAL_UART_MspInit+0x264>)
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <HAL_UART_MspInit+0x264>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	01c9      	lsls	r1, r1, #7
 8001472:	430a      	orrs	r2, r1
 8001474:	619a      	str	r2, [r3, #24]
 8001476:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_UART_MspInit+0x264>)
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	01db      	lsls	r3, r3, #7
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_UART_MspInit+0x264>)
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_UART_MspInit+0x264>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0289      	lsls	r1, r1, #10
 800148e:	430a      	orrs	r2, r1
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_UART_MspInit+0x264>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	22c0      	movs	r2, #192	; 0xc0
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	0021      	movs	r1, r4
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2202      	movs	r2, #2
 80014ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2203      	movs	r2, #3
 80014ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2201      	movs	r2, #1
 80014c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	187a      	adds	r2, r7, r1
 80014c4:	2390      	movs	r3, #144	; 0x90
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 fca6 	bl	8001e1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_UART_MspInit+0x26c>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d6:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014f6:	2220      	movs	r2, #32
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014fa:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <HAL_UART_MspInit+0x268>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0192      	lsls	r2, r2, #6
 8001500:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_UART_MspInit+0x268>)
 8001504:	0018      	movs	r0, r3
 8001506:	f000 fb05 	bl	8001b14 <HAL_DMA_Init>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800150e:	f7ff fee5 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a65      	ldr	r2, [pc, #404]	; (80016ac <HAL_UART_MspInit+0x268>)
 8001516:	671a      	str	r2, [r3, #112]	; 0x70
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_UART_MspInit+0x268>)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001520:	4a65      	ldr	r2, [pc, #404]	; (80016b8 <HAL_UART_MspInit+0x274>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001524:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001526:	2210      	movs	r2, #16
 8001528:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_UART_MspInit+0x270>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_UART_MspInit+0x270>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001548:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <HAL_UART_MspInit+0x270>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	0152      	lsls	r2, r2, #5
 800154e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001552:	0018      	movs	r0, r3
 8001554:	f000 fade 	bl	8001b14 <HAL_DMA_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 800155c:	f7ff febe 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001564:	66da      	str	r2, [r3, #108]	; 0x6c
 8001566:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_UART_MspInit+0x270>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2103      	movs	r1, #3
 8001570:	201b      	movs	r0, #27
 8001572:	f000 fa63 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001576:	201b      	movs	r0, #27
 8001578:	f000 fa75 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157c:	e08e      	b.n	800169c <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_UART_MspInit+0x278>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d000      	beq.n	800158a <HAL_UART_MspInit+0x146>
 8001588:	e088      	b.n	800169c <HAL_UART_MspInit+0x258>
    __HAL_RCC_USART2_CLK_ENABLE();
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_UART_MspInit+0x264>)
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_UART_MspInit+0x264>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0289      	lsls	r1, r1, #10
 8001594:	430a      	orrs	r2, r1
 8001596:	61da      	str	r2, [r3, #28]
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_UART_MspInit+0x264>)
 800159a:	69da      	ldr	r2, [r3, #28]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_UART_MspInit+0x264>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_UART_MspInit+0x264>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0289      	lsls	r1, r1, #10
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_UART_MspInit+0x264>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLM_TX_Pin|PLM_RX_Pin;
 80015c2:	211c      	movs	r1, #28
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2202      	movs	r2, #2
 80015ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2203      	movs	r2, #3
 80015da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2201      	movs	r2, #1
 80015e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	187a      	adds	r2, r7, r1
 80015e4:	2390      	movs	r3, #144	; 0x90
 80015e6:	05db      	lsls	r3, r3, #23
 80015e8:	0011      	movs	r1, r2
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fc16 	bl	8001e1c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 80015f2:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <HAL_UART_MspInit+0x280>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 80015f8:	2210      	movs	r2, #16
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0152      	lsls	r2, r2, #5
 8001620:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 8001624:	0018      	movs	r0, r3
 8001626:	f000 fa75 	bl	8001b14 <HAL_DMA_Init>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 800162e:	f7ff fe55 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 8001636:	66da      	str	r2, [r3, #108]	; 0x6c
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_UART_MspInit+0x27c>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_UART_MspInit+0x288>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_UART_MspInit+0x284>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_UART_MspInit+0x284>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001664:	2220      	movs	r2, #32
 8001666:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x284>)
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	0192      	lsls	r2, r2, #6
 800166e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001672:	0018      	movs	r0, r3
 8001674:	f000 fa4e 	bl	8001b14 <HAL_DMA_Init>
 8001678:	1e03      	subs	r3, r0, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 800167c:	f7ff fe2e 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001684:	671a      	str	r2, [r3, #112]	; 0x70
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x284>)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2103      	movs	r1, #3
 8001690:	201c      	movs	r0, #28
 8001692:	f000 f9d3 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001696:	201c      	movs	r0, #28
 8001698:	f000 f9e5 	bl	8001a66 <HAL_NVIC_EnableIRQ>
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b00d      	add	sp, #52	; 0x34
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	2000082c 	.word	0x2000082c
 80016b0:	40020030 	.word	0x40020030
 80016b4:	20000870 	.word	0x20000870
 80016b8:	4002001c 	.word	0x4002001c
 80016bc:	40004400 	.word	0x40004400
 80016c0:	200008b4 	.word	0x200008b4
 80016c4:	40020044 	.word	0x40020044
 80016c8:	200008f8 	.word	0x200008f8
 80016cc:	40020058 	.word	0x40020058

080016d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	0019      	movs	r1, r3
 80016e6:	2016      	movs	r0, #22
 80016e8:	f000 f9a8 	bl	8001a3c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80016ec:	2016      	movs	r0, #22
 80016ee:	f000 f9ba 	bl	8001a66 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_InitTick+0xa8>)
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_InitTick+0xa8>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	02c9      	lsls	r1, r1, #11
 80016fc:	430a      	orrs	r2, r1
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_InitTick+0xa8>)
 8001702:	699a      	ldr	r2, [r3, #24]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	02db      	lsls	r3, r3, #11
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170e:	230c      	movs	r3, #12
 8001710:	18fa      	adds	r2, r7, r3
 8001712:	2310      	movs	r3, #16
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f001 fbb5 	bl	8002e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800171e:	f001 fb9d 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8001722:	0003      	movs	r3, r0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	4914      	ldr	r1, [pc, #80]	; (800177c <HAL_InitTick+0xac>)
 800172a:	0018      	movs	r0, r3
 800172c:	f7fe fcf4 	bl	8000118 <__udivsi3>
 8001730:	0003      	movs	r3, r0
 8001732:	3b01      	subs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0xb0>)
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <HAL_InitTick+0xb4>)
 800173a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_InitTick+0xb0>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_InitTick+0xb8>)
 8001740:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_InitTick+0xb0>)
 8001744:	6a3a      	ldr	r2, [r7, #32]
 8001746:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_InitTick+0xb0>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_InitTick+0xb0>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_InitTick+0xb0>)
 8001756:	0018      	movs	r0, r3
 8001758:	f001 fefa 	bl	8003550 <HAL_TIM_Base_Init>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d105      	bne.n	800176c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_InitTick+0xb0>)
 8001762:	0018      	movs	r0, r3
 8001764:	f001 ff4c 	bl	8003600 <HAL_TIM_Base_Start_IT>
 8001768:	0003      	movs	r3, r0
 800176a:	e000      	b.n	800176e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b00a      	add	sp, #40	; 0x28
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	000f4240 	.word	0x000f4240
 8001780:	2000144c 	.word	0x2000144c
 8001784:	40014800 	.word	0x40014800
 8001788:	000003e7 	.word	0x000003e7

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fa7d 	bl	8001c9e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fa79 	bl	8001c9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000870 	.word	0x20000870
 80017b8:	2000082c 	.word	0x2000082c

080017bc <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 fa6b 	bl	8001c9e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <DMA1_Channel4_5_IRQHandler+0x20>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fa67 	bl	8001c9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	200008b4 	.word	0x200008b4
 80017dc:	200008f8 	.word	0x200008f8

080017e0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <TIM17_IRQHandler+0x14>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f001 ff56 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	2000144c 	.word	0x2000144c

080017f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <USART1_IRQHandler+0x14>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f002 fb42 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	20000724 	.word	0x20000724

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <USART2_IRQHandler+0x14>)
 8001816:	0018      	movs	r0, r3
 8001818:	f002 fb36 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200007a8 	.word	0x200007a8

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800183e:	f004 fd35 	bl	80062ac <__errno>
 8001842:	0003      	movs	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
	return -1;
 8001848:	2301      	movs	r3, #1
 800184a:	425b      	negs	r3, r3
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800185c:	2301      	movs	r3, #1
 800185e:	425a      	negs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ffe5 	bl	8001834 <_kill>
	while (1) {}		/* Make sure we hang here */
 800186a:	e7fe      	b.n	800186a <_exit+0x16>

0800186c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018a2:	f7ff ffe3 	bl	800186c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018a6:	f004 fd07 	bl	80062b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7ff fa37 	bl	8000d1c <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   r0, =_estack
 80018b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018bc:	08006710 	.word	0x08006710
  ldr r2, =_sbss
 80018c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018c4:	200015d0 	.word	0x200015d0

080018c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_IRQHandler>
	...

080018cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_Init+0x24>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_Init+0x24>)
 80018d6:	2110      	movs	r1, #16
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018dc:	2003      	movs	r0, #3
 80018de:	f7ff fef7 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e2:	f7ff fd01 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x1c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	18d2      	adds	r2, r2, r3
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_IncTick+0x20>)
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	20000014 	.word	0x20000014
 8001914:	20001494 	.word	0x20001494

08001918 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20001494 	.word	0x20001494

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	0002      	movs	r2, r0
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b7f      	cmp	r3, #127	; 0x7f
 800193e:	d809      	bhi.n	8001954 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	001a      	movs	r2, r3
 8001946:	231f      	movs	r3, #31
 8001948:	401a      	ands	r2, r3
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_EnableIRQ+0x30>)
 800194c:	2101      	movs	r1, #1
 800194e:	4091      	lsls	r1, r2
 8001950:	000a      	movs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
  }
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	0002      	movs	r2, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b7f      	cmp	r3, #127	; 0x7f
 8001974:	d828      	bhi.n	80019c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <__NVIC_SetPriority+0xd4>)
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	33c0      	adds	r3, #192	; 0xc0
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	589b      	ldr	r3, [r3, r2]
 8001986:	1dfa      	adds	r2, r7, #7
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	0011      	movs	r1, r2
 800198c:	2203      	movs	r2, #3
 800198e:	400a      	ands	r2, r1
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	21ff      	movs	r1, #255	; 0xff
 8001994:	4091      	lsls	r1, r2
 8001996:	000a      	movs	r2, r1
 8001998:	43d2      	mvns	r2, r2
 800199a:	401a      	ands	r2, r3
 800199c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	22ff      	movs	r2, #255	; 0xff
 80019a4:	401a      	ands	r2, r3
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	2303      	movs	r3, #3
 80019ae:	4003      	ands	r3, r0
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b4:	481f      	ldr	r0, [pc, #124]	; (8001a34 <__NVIC_SetPriority+0xd4>)
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	430a      	orrs	r2, r1
 80019c0:	33c0      	adds	r3, #192	; 0xc0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019c6:	e031      	b.n	8001a2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <__NVIC_SetPriority+0xd8>)
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	0019      	movs	r1, r3
 80019d0:	230f      	movs	r3, #15
 80019d2:	400b      	ands	r3, r1
 80019d4:	3b08      	subs	r3, #8
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3306      	adds	r3, #6
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	18d3      	adds	r3, r2, r3
 80019de:	3304      	adds	r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	1dfa      	adds	r2, r7, #7
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	0011      	movs	r1, r2
 80019e8:	2203      	movs	r2, #3
 80019ea:	400a      	ands	r2, r1
 80019ec:	00d2      	lsls	r2, r2, #3
 80019ee:	21ff      	movs	r1, #255	; 0xff
 80019f0:	4091      	lsls	r1, r2
 80019f2:	000a      	movs	r2, r1
 80019f4:	43d2      	mvns	r2, r2
 80019f6:	401a      	ands	r2, r3
 80019f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	22ff      	movs	r2, #255	; 0xff
 8001a00:	401a      	ands	r2, r3
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	2303      	movs	r3, #3
 8001a0a:	4003      	ands	r3, r0
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <__NVIC_SetPriority+0xd8>)
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	001c      	movs	r4, r3
 8001a18:	230f      	movs	r3, #15
 8001a1a:	4023      	ands	r3, r4
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	430a      	orrs	r2, r1
 8001a22:	3306      	adds	r3, #6
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	18c3      	adds	r3, r0, r3
 8001a28:	3304      	adds	r3, #4
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b003      	add	sp, #12
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	210f      	movs	r1, #15
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	1c02      	adds	r2, r0, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	0011      	movs	r1, r2
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff ff81 	bl	8001960 <__NVIC_SetPriority>
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff ff57 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e039      	b.n	8001b0c <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7d5b      	ldrb	r3, [r3, #21]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fc46 	bl	800133c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	e004      	b.n	8001ad4 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6892      	ldr	r2, [r2, #8]
 8001ad2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2260      	movs	r2, #96	; 0x60
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e036      	b.n	8001b98 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2221      	movs	r2, #33	; 0x21
 8001b2e:	2102      	movs	r1, #2
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_DMA_Init+0x8c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f932 	bl	8001de4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2221      	movs	r2, #33	; 0x21
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}  
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	ffffc00f 	.word	0xffffc00f

08001ba4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d008      	beq.n	8001bca <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e020      	b.n	8001c0c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	438a      	bics	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4091      	lsls	r1, r2
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	2100      	movs	r1, #0
 8001c08:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2221      	movs	r2, #33	; 0x21
 8001c28:	5c9b      	ldrb	r3, [r3, r2]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d006      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e028      	b.n	8001c90 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	210e      	movs	r1, #14
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	438a      	bics	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	2101      	movs	r1, #1
 8001c68:	4091      	lsls	r1, r2
 8001c6a:	000a      	movs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2221      	movs	r2, #33	; 0x21
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	4798      	blx	r3
    } 
  }
  return status;
 8001c90:	230f      	movs	r3, #15
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b004      	add	sp, #16
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2204      	movs	r2, #4
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d024      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x72>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d020      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d107      	bne.n	8001cea <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4091      	lsls	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d100      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x66>
 8001d02:	e06a      	b.n	8001dda <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d0e:	e064      	b.n	8001dda <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2202      	movs	r2, #2
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d02b      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xda>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d027      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d10b      	bne.n	8001d4c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	210a      	movs	r1, #10
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2221      	movs	r2, #33	; 0x21
 8001d48:	2101      	movs	r1, #1
 8001d4a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	2102      	movs	r1, #2
 8001d56:	4091      	lsls	r1, r2
 8001d58:	000a      	movs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d036      	beq.n	8001dda <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	0010      	movs	r0, r2
 8001d74:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d76:	e030      	b.n	8001dda <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	d028      	beq.n	8001dda <HAL_DMA_IRQHandler+0x13c>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d024      	beq.n	8001dda <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	210e      	movs	r1, #14
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2101      	movs	r1, #1
 8001daa:	4091      	lsls	r1, r2
 8001dac:	000a      	movs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2221      	movs	r2, #33	; 0x21
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	4798      	blx	r3
    }
   }
}  
 8001dd8:	e7ff      	b.n	8001dda <HAL_DMA_IRQHandler+0x13c>
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <DMA_CalcBaseAndBitshift+0x30>)
 8001df2:	4694      	mov	ip, r2
 8001df4:	4463      	add	r3, ip
 8001df6:	2114      	movs	r1, #20
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7fe f98d 	bl	8000118 <__udivsi3>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <DMA_CalcBaseAndBitshift+0x34>)
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	bffdfff8 	.word	0xbffdfff8
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e14f      	b.n	80020cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4091      	lsls	r1, r2
 8001e36:	000a      	movs	r2, r1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d100      	bne.n	8001e44 <HAL_GPIO_Init+0x28>
 8001e42:	e140      	b.n	80020c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	0013      	movs	r3, r2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	409a      	lsls	r2, r3
 8001eec:	0013      	movs	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	58d3      	ldr	r3, [r2, r3]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	43da      	mvns	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2107      	movs	r1, #7
 8001f32:	400b      	ands	r3, r1
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	6939      	ldr	r1, [r7, #16]
 8001f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d100      	bne.n	8001f90 <HAL_GPIO_Init+0x174>
 8001f8e:	e09a      	b.n	80020c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	619a      	str	r2, [r3, #24]
 8001f9c:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_GPIO_Init+0x2cc>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	589b      	ldr	r3, [r3, r2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4013      	ands	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	2390      	movs	r3, #144	; 0x90
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x1e2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a44      	ldr	r2, [pc, #272]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x1de>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_GPIO_Init+0x2d4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x1da>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_GPIO_Init+0x2d8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x1d6>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ffe:	2300      	movs	r3, #0
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	2103      	movs	r1, #3
 8002004:	400a      	ands	r2, r1
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002010:	4935      	ldr	r1, [pc, #212]	; (80020e8 <HAL_GPIO_Init+0x2cc>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	4013      	ands	r3, r2
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43da      	mvns	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	4013      	ands	r3, r2
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43da      	mvns	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	035b      	lsls	r3, r3, #13
 800208a:	4013      	ands	r3, r2
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	039b      	lsls	r3, r3, #14
 80020b4:	4013      	ands	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_GPIO_Init+0x2dc>)
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	1e13      	subs	r3, r2, #0
 80020d6:	d000      	beq.n	80020da <HAL_GPIO_Init+0x2be>
 80020d8:	e6a8      	b.n	8001e2c <HAL_GPIO_Init+0x10>
  } 
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	0008      	movs	r0, r1
 8002106:	0011      	movs	r1, r2
 8002108:	1cbb      	adds	r3, r7, #2
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	1c7b      	adds	r3, r7, #1
 8002110:	1c0a      	adds	r2, r1, #0
 8002112:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002114:	1c7b      	adds	r3, r7, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800211c:	1cbb      	adds	r3, r7, #2
 800211e:	881a      	ldrh	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002124:	e003      	b.n	800212e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002126:	1cbb      	adds	r3, r7, #2
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	000a      	movs	r2, r1
 8002140:	1cbb      	adds	r3, r7, #2
 8002142:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800214a:	1cbb      	adds	r3, r7, #2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	041a      	lsls	r2, r3, #16
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	1cb9      	adds	r1, r7, #2
 800215a:	8809      	ldrh	r1, [r1, #0]
 800215c:	400b      	ands	r3, r1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0a8      	b.n	80022d0 <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2241      	movs	r2, #65	; 0x41
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12d      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_I2C_Init+0x16c>)
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_I2C_Init+0x170>)
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4f      	ldr	r2, [pc, #316]	; (80022e0 <HAL_I2C_Init+0x174>)
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_I2C_Init+0x178>)
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <HAL_I2C_Init+0x17c>)
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a4e      	ldr	r2, [pc, #312]	; (80022ec <HAL_I2C_Init+0x180>)
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4d      	ldr	r2, [pc, #308]	; (80022f0 <HAL_I2C_Init+0x184>)
 80021ba:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <HAL_I2C_Init+0x188>)
 80021c0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_I2C_Init+0x18c>)
 80021c6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_I2C_Init+0x190>)
 80021cc:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a49      	ldr	r2, [pc, #292]	; (8002300 <HAL_I2C_Init+0x194>)
 80021da:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	0010      	movs	r0, r2
 80021e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2241      	movs	r2, #65	; 0x41
 80021ea:	2124      	movs	r1, #36	; 0x24
 80021ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	493f      	ldr	r1, [pc, #252]	; (8002304 <HAL_I2C_Init+0x198>)
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	493c      	ldr	r1, [pc, #240]	; (8002308 <HAL_I2C_Init+0x19c>)
 8002218:	400a      	ands	r2, r1
 800221a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_I2C_Init+0xca>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0209      	lsls	r1, r1, #8
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e007      	b.n	8002246 <HAL_I2C_Init+0xda>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2184      	movs	r1, #132	; 0x84
 8002240:	0209      	lsls	r1, r1, #8
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d104      	bne.n	8002258 <HAL_I2C_Init+0xec>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	492a      	ldr	r1, [pc, #168]	; (800230c <HAL_I2C_Init+0x1a0>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4925      	ldr	r1, [pc, #148]	; (8002308 <HAL_I2C_Init+0x19c>)
 8002274:	400a      	ands	r2, r1
 8002276:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	431a      	orrs	r2, r3
 8002282:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69d9      	ldr	r1, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2241      	movs	r2, #65	; 0x41
 80022bc:	2120      	movs	r1, #32
 80022be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2242      	movs	r2, #66	; 0x42
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	08002311 	.word	0x08002311
 80022dc:	08002321 	.word	0x08002321
 80022e0:	08002331 	.word	0x08002331
 80022e4:	08002341 	.word	0x08002341
 80022e8:	08002371 	.word	0x08002371
 80022ec:	08002381 	.word	0x08002381
 80022f0:	08002391 	.word	0x08002391
 80022f4:	080023a1 	.word	0x080023a1
 80022f8:	080023b1 	.word	0x080023b1
 80022fc:	08002351 	.word	0x08002351
 8002300:	08001379 	.word	0x08001379
 8002304:	f0ffffff 	.word	0xf0ffffff
 8002308:	ffff7fff 	.word	0xffff7fff
 800230c:	02008000 	.word	0x02008000

08002310 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	0008      	movs	r0, r1
 800235a:	0011      	movs	r1, r2
 800235c:	1cfb      	adds	r3, r7, #3
 800235e:	1c02      	adds	r2, r0, #0
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	003b      	movs	r3, r7
 8002364:	1c0a      	adds	r2, r1, #0
 8002366:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2241      	movs	r2, #65	; 0x41
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d138      	bne.n	8002448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	5c9b      	ldrb	r3, [r3, r2]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e032      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2241      	movs	r2, #65	; 0x41
 80023f0:	2124      	movs	r1, #36	; 0x24
 80023f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	438a      	bics	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4911      	ldr	r1, [pc, #68]	; (8002454 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002410:	400a      	ands	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2241      	movs	r2, #65	; 0x41
 8002438:	2120      	movs	r1, #32
 800243a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	ffffefff 	.word	0xffffefff

08002458 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d139      	bne.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002478:	2302      	movs	r3, #2
 800247a:	e033      	b.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	; 0x41
 8002488:	2124      	movs	r1, #36	; 0x24
 800248a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2241      	movs	r2, #65	; 0x41
 80024d2:	2120      	movs	r1, #32
 80024d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b004      	add	sp, #16
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	fffff0ff 	.word	0xfffff0ff

080024f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e03d      	b.n	800257e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_IWDG_Init+0x98>)
 8002508:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_IWDG_Init+0x9c>)
 8002510:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6852      	ldr	r2, [r2, #4]
 800251a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002526:	f7ff f9f7 	bl	8001918 <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800252e:	e00e      	b.n	800254e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002530:	f7ff f9f2 	bl	8001918 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b27      	cmp	r3, #39	; 0x27
 800253c:	d907      	bls.n	800254e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2207      	movs	r2, #7
 8002546:	4013      	ands	r3, r2
 8002548:	d001      	beq.n	800254e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e017      	b.n	800257e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2207      	movs	r2, #7
 8002556:	4013      	ands	r3, r2
 8002558:	d1ea      	bne.n	8002530 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d005      	beq.n	8002574 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68d2      	ldr	r2, [r2, #12]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	e003      	b.n	800257c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <HAL_IWDG_Init+0xa0>)
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	0000cccc 	.word	0x0000cccc
 800258c:	00005555 	.word	0x00005555
 8002590:	0000aaaa 	.word	0x0000aaaa

08002594 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	0049      	lsls	r1, r1, #1
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40007000 	.word	0x40007000

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e301      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x1e>
 80025cc:	e08d      	b.n	80026ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ce:	4bc3      	ldr	r3, [pc, #780]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	220c      	movs	r2, #12
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00e      	beq.n	80025f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025da:	4bc0      	ldr	r3, [pc, #768]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	220c      	movs	r2, #12
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x64>
 80025e6:	4bbd      	ldr	r3, [pc, #756]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	401a      	ands	r2, r3
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10d      	bne.n	8002614 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	4bb8      	ldr	r3, [pc, #736]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	029b      	lsls	r3, r3, #10
 8002600:	4013      	ands	r3, r2
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x56>
 8002604:	e070      	b.n	80026e8 <HAL_RCC_OscConfig+0x138>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d000      	beq.n	8002610 <HAL_RCC_OscConfig+0x60>
 800260e:	e06b      	b.n	80026e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e2d8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x7c>
 800261c:	4baf      	ldr	r3, [pc, #700]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4bae      	ldr	r3, [pc, #696]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	0249      	lsls	r1, r1, #9
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e02f      	b.n	800268c <HAL_RCC_OscConfig+0xdc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x9e>
 8002634:	4ba9      	ldr	r3, [pc, #676]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4ba8      	ldr	r3, [pc, #672]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800263a:	49a9      	ldr	r1, [pc, #676]	; (80028e0 <HAL_RCC_OscConfig+0x330>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4ba6      	ldr	r3, [pc, #664]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002646:	49a7      	ldr	r1, [pc, #668]	; (80028e4 <HAL_RCC_OscConfig+0x334>)
 8002648:	400a      	ands	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e01e      	b.n	800268c <HAL_RCC_OscConfig+0xdc>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10e      	bne.n	8002674 <HAL_RCC_OscConfig+0xc4>
 8002656:	4ba1      	ldr	r3, [pc, #644]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4ba0      	ldr	r3, [pc, #640]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	02c9      	lsls	r1, r1, #11
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4b9d      	ldr	r3, [pc, #628]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b9c      	ldr	r3, [pc, #624]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0249      	lsls	r1, r1, #9
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xdc>
 8002674:	4b99      	ldr	r3, [pc, #612]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b98      	ldr	r3, [pc, #608]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800267a:	4999      	ldr	r1, [pc, #612]	; (80028e0 <HAL_RCC_OscConfig+0x330>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	4b96      	ldr	r3, [pc, #600]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b95      	ldr	r3, [pc, #596]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002686:	4997      	ldr	r1, [pc, #604]	; (80028e4 <HAL_RCC_OscConfig+0x334>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d014      	beq.n	80026be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f940 	bl	8001918 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269e:	f7ff f93b 	bl	8001918 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e28a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0xee>
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff f92b 	bl	8001918 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff f926 	bl	8001918 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e275      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	029b      	lsls	r3, r3, #10
 80026e2:	4013      	ands	r3, r2
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x118>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d100      	bne.n	80026f6 <HAL_RCC_OscConfig+0x146>
 80026f4:	e069      	b.n	80027ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f6:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	220c      	movs	r2, #12
 80026fc:	4013      	ands	r3, r2
 80026fe:	d00b      	beq.n	8002718 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002700:	4b76      	ldr	r3, [pc, #472]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	220c      	movs	r2, #12
 8002706:	4013      	ands	r3, r2
 8002708:	2b08      	cmp	r3, #8
 800270a:	d11c      	bne.n	8002746 <HAL_RCC_OscConfig+0x196>
 800270c:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	4013      	ands	r3, r2
 8002716:	d116      	bne.n	8002746 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002718:	4b70      	ldr	r3, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x17e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e24b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22f8      	movs	r2, #248	; 0xf8
 8002734:	4393      	bics	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	00da      	lsls	r2, r3, #3
 800273e:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002744:	e041      	b.n	80027ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d024      	beq.n	8002798 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b62      	ldr	r3, [pc, #392]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff f8dd 	bl	8001918 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff f8d8 	bl	8001918 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e227      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b56      	ldr	r3, [pc, #344]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	22f8      	movs	r2, #248	; 0xf8
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00da      	lsls	r2, r3, #3
 8002790:	4b52      	ldr	r3, [pc, #328]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e018      	b.n	80027ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800279e:	2101      	movs	r1, #1
 80027a0:	438a      	bics	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f8b8 	bl	8001918 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ae:	f7ff f8b3 	bl	8001918 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e202      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d1f1      	bne.n	80027ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2208      	movs	r2, #8
 80027d0:	4013      	ands	r3, r2
 80027d2:	d036      	beq.n	8002842 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d019      	beq.n	8002810 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80027de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e0:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7ff f896 	bl	8001918 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff f891 	bl	8001918 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1e0      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	d0f1      	beq.n	80027f2 <HAL_RCC_OscConfig+0x242>
 800280e:	e018      	b.n	8002842 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7ff f87c 	bl	8001918 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff f877 	bl	8001918 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1c6      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d1f1      	bne.n	8002826 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	d100      	bne.n	800284e <HAL_RCC_OscConfig+0x29e>
 800284c:	e0b4      	b.n	80029b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	201f      	movs	r0, #31
 8002850:	183b      	adds	r3, r7, r0
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	055b      	lsls	r3, r3, #21
 800285e:	4013      	ands	r3, r2
 8002860:	d110      	bne.n	8002884 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0549      	lsls	r1, r1, #21
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	055b      	lsls	r3, r3, #21
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800287e:	183b      	adds	r3, r7, r0
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_RCC_OscConfig+0x338>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d11a      	bne.n	80028c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x338>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_RCC_OscConfig+0x338>)
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	0049      	lsls	r1, r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7ff f83b 	bl	8001918 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7ff f836 	bl	8001918 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e185      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x338>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10e      	bne.n	80028ec <HAL_RCC_OscConfig+0x33c>
 80028ce:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	4b02      	ldr	r3, [pc, #8]	; (80028dc <HAL_RCC_OscConfig+0x32c>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	621a      	str	r2, [r3, #32]
 80028da:	e035      	b.n	8002948 <HAL_RCC_OscConfig+0x398>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	fffeffff 	.word	0xfffeffff
 80028e4:	fffbffff 	.word	0xfffbffff
 80028e8:	40007000 	.word	0x40007000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x35e>
 80028f4:	4bb6      	ldr	r3, [pc, #728]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	4bb5      	ldr	r3, [pc, #724]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	621a      	str	r2, [r3, #32]
 8002900:	4bb3      	ldr	r3, [pc, #716]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	4bb2      	ldr	r3, [pc, #712]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002906:	2104      	movs	r1, #4
 8002908:	438a      	bics	r2, r1
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	e01c      	b.n	8002948 <HAL_RCC_OscConfig+0x398>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x380>
 8002916:	4bae      	ldr	r3, [pc, #696]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	4bad      	ldr	r3, [pc, #692]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 800291c:	2104      	movs	r1, #4
 800291e:	430a      	orrs	r2, r1
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	4bab      	ldr	r3, [pc, #684]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002924:	6a1a      	ldr	r2, [r3, #32]
 8002926:	4baa      	ldr	r3, [pc, #680]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	621a      	str	r2, [r3, #32]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x398>
 8002930:	4ba7      	ldr	r3, [pc, #668]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	4ba6      	ldr	r3, [pc, #664]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	621a      	str	r2, [r3, #32]
 800293c:	4ba4      	ldr	r3, [pc, #656]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	4ba3      	ldr	r3, [pc, #652]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002942:	2104      	movs	r1, #4
 8002944:	438a      	bics	r2, r1
 8002946:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d014      	beq.n	800297a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe ffe2 	bl	8001918 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e009      	b.n	800296e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe ffdd 	bl	8001918 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	4a9b      	ldr	r2, [pc, #620]	; (8002bd4 <HAL_RCC_OscConfig+0x624>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e12b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	4b98      	ldr	r3, [pc, #608]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x3aa>
 8002978:	e013      	b.n	80029a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe ffcd 	bl	8001918 <HAL_GetTick>
 800297e:	0003      	movs	r3, r0
 8002980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	e009      	b.n	8002998 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe ffc8 	bl	8001918 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	4a91      	ldr	r2, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x624>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e116      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a2:	231f      	movs	r3, #31
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	4b87      	ldr	r3, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029b2:	4989      	ldr	r1, [pc, #548]	; (8002bd8 <HAL_RCC_OscConfig+0x628>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	4013      	ands	r3, r2
 80029c0:	d063      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d12a      	bne.n	8002a20 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ca:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ce:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029d0:	2104      	movs	r1, #4
 80029d2:	430a      	orrs	r2, r1
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029d6:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 80029dc:	2101      	movs	r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7fe ff99 	bl	8001918 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029ec:	f7fe ff94 	bl	8001918 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0e3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	d0f1      	beq.n	80029ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a08:	4b71      	ldr	r3, [pc, #452]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	22f8      	movs	r2, #248	; 0xf8
 8002a0e:	4393      	bics	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	00da      	lsls	r2, r3, #3
 8002a18:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	e034      	b.n	8002a8a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	3305      	adds	r3, #5
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2c:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a2e:	2104      	movs	r1, #4
 8002a30:	438a      	bics	r2, r1
 8002a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	22f8      	movs	r2, #248	; 0xf8
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	00da      	lsls	r2, r3, #3
 8002a44:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4a:	e01e      	b.n	8002a8a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a4c:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a50:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a52:	2104      	movs	r1, #4
 8002a54:	430a      	orrs	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a58:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7fe ff58 	bl	8001918 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a6e:	f7fe ff53 	bl	8001918 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0a2      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	2202      	movs	r2, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d1f1      	bne.n	8002a6e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4e4>
 8002a92:	e097      	b.n	8002bc4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	220c      	movs	r2, #12
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d100      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4f2>
 8002aa0:	e06b      	b.n	8002b7a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d14c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002ab0:	494a      	ldr	r1, [pc, #296]	; (8002bdc <HAL_RCC_OscConfig+0x62c>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe ff2f 	bl	8001918 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe ff2a 	bl	8001918 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e079      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	049b      	lsls	r3, r3, #18
 8002ada:	4013      	ands	r3, r2
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <HAL_RCC_OscConfig+0x630>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0449      	lsls	r1, r1, #17
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fefd 	bl	8001918 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fef8 	bl	8001918 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e047      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	049b      	lsls	r3, r3, #18
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x574>
 8002b42:	e03f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b4a:	4924      	ldr	r1, [pc, #144]	; (8002bdc <HAL_RCC_OscConfig+0x62c>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fee2 	bl	8001918 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fedd 	bl	8001918 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e02c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	049b      	lsls	r3, r3, #18
 8002b74:	4013      	ands	r3, r2
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5aa>
 8002b78:	e024      	b.n	8002bc4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e01f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_OscConfig+0x620>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	025b      	lsls	r3, r3, #9
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	23f0      	movs	r3, #240	; 0xf0
 8002bb4:	039b      	lsls	r3, r3, #14
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b008      	add	sp, #32
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	00001388 	.word	0x00001388
 8002bd8:	efffffff 	.word	0xefffffff
 8002bdc:	feffffff 	.word	0xfeffffff
 8002be0:	ffc2ffff 	.word	0xffc2ffff

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b3      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d911      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e09a      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d006      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c3e:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c44:	21e0      	movs	r1, #224	; 0xe0
 8002c46:	00c9      	lsls	r1, r1, #3
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	22f0      	movs	r2, #240	; 0xf0
 8002c52:	4393      	bics	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	d040      	beq.n	8002cec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d114      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06e      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	4013      	ands	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e062      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e05b      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca8:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2203      	movs	r2, #3
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fe2c 	bl	8001918 <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc4:	e009      	b.n	8002cda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7fe fe27 	bl	8001918 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_RCC_ClockConfig+0x18c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e042      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1ec      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d211      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4393      	bics	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x184>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e020      	b.n	8002d60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <HAL_RCC_ClockConfig+0x190>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d3c:	f000 f820 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d40:	0001      	movs	r1, r0
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x188>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	220f      	movs	r2, #15
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x194>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	000a      	movs	r2, r1
 8002d52:	40da      	lsrs	r2, r3
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x198>)
 8002d56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f7fe fcb9 	bl	80016d0 <HAL_InitTick>
  
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	00001388 	.word	0x00001388
 8002d74:	fffff8ff 	.word	0xfffff8ff
 8002d78:	08006630 	.word	0x08006630
 8002d7c:	20000010 	.word	0x20000010

08002d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b08f      	sub	sp, #60	; 0x3c
 8002d84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d86:	2314      	movs	r3, #20
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d8e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da4:	2300      	movs	r3, #0
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da8:	2300      	movs	r3, #0
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	220c      	movs	r2, #12
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d002      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x4a>
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x50>
 8002dc8:	e02d      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dce:	e02d      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2214      	movs	r2, #20
 8002dda:	18ba      	adds	r2, r7, r2
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	220f      	movs	r2, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	1d3a      	adds	r2, r7, #4
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	4013      	ands	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dfc:	f7fd f98c 	bl	8000118 <__udivsi3>
 8002e00:	0003      	movs	r3, r0
 8002e02:	001a      	movs	r2, r3
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	4353      	muls	r3, r2
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0a:	e009      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0e:	000a      	movs	r2, r1
 8002e10:	0152      	lsls	r2, r2, #5
 8002e12:	1a52      	subs	r2, r2, r1
 8002e14:	0193      	lsls	r3, r2, #6
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	185b      	adds	r3, r3, r1
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e24:	e002      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b00f      	add	sp, #60	; 0x3c
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	08006608 	.word	0x08006608
 8002e3c:	08006618 	.word	0x08006618
 8002e40:	40021000 	.word	0x40021000
 8002e44:	007a1200 	.word	0x007a1200

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	20000010 	.word	0x20000010

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e60:	f7ff fff2 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e64:	0001      	movs	r1, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	4013      	ands	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	40d9      	lsrs	r1, r3
 8002e76:	000b      	movs	r3, r1
}    
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08006640 	.word	0x08006640

08002e88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_RCC_GetClockConfig+0x4c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_GetClockConfig+0x4c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	22f0      	movs	r2, #240	; 0xf0
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_RCC_GetClockConfig+0x4c>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	23e0      	movs	r3, #224	; 0xe0
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_GetClockConfig+0x50>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40022000 	.word	0x40022000

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	025b      	lsls	r3, r3, #9
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d100      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ef8:	e08e      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002efa:	2017      	movs	r0, #23
 8002efc:	183b      	adds	r3, r7, r0
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	055b      	lsls	r3, r3, #21
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d110      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0549      	lsls	r1, r1, #21
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	61da      	str	r2, [r3, #28]
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d11a      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3c:	4b49      	ldr	r3, [pc, #292]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0049      	lsls	r1, r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fce5 	bl	8001918 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	e008      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fce0 	bl	8001918 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e077      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f74:	6a1a      	ldr	r2, [r3, #32]
 8002f76:	23c0      	movs	r3, #192	; 0xc0
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d034      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	23c0      	movs	r3, #192	; 0xc0
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d02c      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a33      	ldr	r2, [pc, #204]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	0249      	lsls	r1, r1, #9
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fb2:	492e      	ldr	r1, [pc, #184]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fca7 	bl	8001918 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e009      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fca2 	bl	8001918 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e038      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003002:	2317      	movs	r3, #23
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003012:	4918      	ldr	r1, [pc, #96]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003014:	400a      	ands	r2, r1
 8003016:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2203      	movs	r2, #3
 8003028:	4393      	bics	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003032:	430a      	orrs	r2, r1
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2220      	movs	r2, #32
 800303c:	4013      	ands	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	2210      	movs	r2, #16
 8003046:	4393      	bics	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003050:	430a      	orrs	r2, r1
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	fffffcff 	.word	0xfffffcff
 800306c:	fffeffff 	.word	0xfffeffff
 8003070:	00001388 	.word	0x00001388
 8003074:	efffffff 	.word	0xefffffff

08003078 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e081      	b.n	800318e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7f5b      	ldrb	r3, [r3, #29]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f7fe f9b9 	bl	8001414 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	22ca      	movs	r2, #202	; 0xca
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2253      	movs	r2, #83	; 0x53
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f9fb 	bl	80034b6 <RTC_EnterInitMode>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2204      	movs	r2, #4
 80030d0:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e05b      	b.n	800318e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	492d      	ldr	r1, [pc, #180]	; (8003198 <HAL_RTC_Init+0x120>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68d2      	ldr	r2, [r2, #12]
 800310c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6919      	ldr	r1, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	438a      	bics	r2, r1
 8003130:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d10e      	bne.n	800315c <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f98f 	bl	8003464 <HAL_RTC_WaitForSynchro>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d008      	beq.n	800315c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e018      	b.n	800318e <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	490d      	ldr	r1, [pc, #52]	; (800319c <HAL_RTC_Init+0x124>)
 8003168:	400a      	ands	r2, r1
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
  }
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	ff8fffbf 	.word	0xff8fffbf
 800319c:	fffbffff 	.word	0xfffbffff

080031a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	7f1b      	ldrb	r3, [r3, #28]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_RTC_SetTime+0x1c>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0a5      	b.n	8003308 <HAL_RTC_SetTime+0x168>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2202      	movs	r2, #2
 80031c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d125      	bne.n	800321a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	4013      	ands	r3, r2
 80031d8:	d102      	bne.n	80031e0 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f992 	bl	800350e <RTC_ByteToBcd2>
 80031ea:	0003      	movs	r3, r0
 80031ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f98b 	bl	800350e <RTC_ByteToBcd2>
 80031f8:	0003      	movs	r3, r0
 80031fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	789b      	ldrb	r3, [r3, #2]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f983 	bl	800350e <RTC_ByteToBcd2>
 8003208:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800320a:	0022      	movs	r2, r4
 800320c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	78db      	ldrb	r3, [r3, #3]
 8003212:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e017      	b.n	800324a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	d102      	bne.n	800322c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003238:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800323e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	78db      	ldrb	r3, [r3, #3]
 8003244:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	22ca      	movs	r2, #202	; 0xca
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2253      	movs	r2, #83	; 0x53
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f92a 	bl	80034b6 <RTC_EnterInitMode>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d00b      	beq.n	800327e <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2204      	movs	r2, #4
 8003272:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e044      	b.n	8003308 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RTC_SetTime+0x170>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	491f      	ldr	r1, [pc, #124]	; (8003314 <HAL_RTC_SetTime+0x174>)
 8003296:	400a      	ands	r2, r1
 8003298:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	438a      	bics	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2220      	movs	r2, #32
 80032ca:	4013      	ands	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f8c7 	bl	8003464 <HAL_RTC_WaitForSynchro>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2204      	movs	r2, #4
 80032e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00a      	b.n	8003308 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003306:	2300      	movs	r3, #0
  }
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b007      	add	sp, #28
 800330e:	bd90      	pop	{r4, r7, pc}
 8003310:	007f7f7f 	.word	0x007f7f7f
 8003314:	fffbffff 	.word	0xfffbffff

08003318 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	7f1b      	ldrb	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_RTC_SetDate+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e091      	b.n	8003458 <HAL_RTC_SetDate+0x140>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2202      	movs	r2, #2
 800333e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <HAL_RTC_SetDate+0x4c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	001a      	movs	r2, r3
 800334c:	2310      	movs	r3, #16
 800334e:	4013      	ands	r3, r2
 8003350:	d008      	beq.n	8003364 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2210      	movs	r2, #16
 8003358:	4393      	bics	r3, r2
 800335a:	b2db      	uxtb	r3, r3
 800335c:	330a      	adds	r3, #10
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11c      	bne.n	80033a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	78db      	ldrb	r3, [r3, #3]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f8cd 	bl	800350e <RTC_ByteToBcd2>
 8003374:	0003      	movs	r3, r0
 8003376:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 f8c6 	bl	800350e <RTC_ByteToBcd2>
 8003382:	0003      	movs	r3, r0
 8003384:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003386:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f8be 	bl	800350e <RTC_ByteToBcd2>
 8003392:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003394:	0022      	movs	r2, r4
 8003396:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e00e      	b.n	80033c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	78db      	ldrb	r3, [r3, #3]
 80033a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033b0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80033b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	22ca      	movs	r2, #202	; 0xca
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2253      	movs	r2, #83	; 0x53
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f86e 	bl	80034b6 <RTC_EnterInitMode>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2204      	movs	r2, #4
 80033ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e030      	b.n	8003458 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4918      	ldr	r1, [pc, #96]	; (8003460 <HAL_RTC_SetDate+0x148>)
 80033fe:	400a      	ands	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	438a      	bics	r2, r1
 8003410:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2220      	movs	r2, #32
 800341a:	4013      	ands	r3, r2
 800341c:	d111      	bne.n	8003442 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f81f 	bl	8003464 <HAL_RTC_WaitForSynchro>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2204      	movs	r2, #4
 8003436:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00a      	b.n	8003458 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
  }
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b007      	add	sp, #28
 800345e:	bd90      	pop	{r4, r7, pc}
 8003460:	00ffff3f 	.word	0x00ffff3f

08003464 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	21a0      	movs	r1, #160	; 0xa0
 800347c:	438a      	bics	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003480:	f7fe fa4a 	bl	8001918 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800348a:	f7fe fa45 	bl	8001918 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	23fa      	movs	r3, #250	; 0xfa
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d901      	bls.n	80034a0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	d0ee      	beq.n	800348a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2240      	movs	r2, #64	; 0x40
 80034ca:	4013      	ands	r3, r2
 80034cc:	d11a      	bne.n	8003504 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4252      	negs	r2, r2
 80034d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80034d8:	f7fe fa1e 	bl	8001918 <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034e0:	e00a      	b.n	80034f8 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034e2:	f7fe fa19 	bl	8001918 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	23fa      	movs	r3, #250	; 0xfa
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d901      	bls.n	80034f8 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e006      	b.n	8003506 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	4013      	ands	r3, r2
 8003502:	d0ee      	beq.n	80034e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}

0800350e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	0002      	movs	r2, r0
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800351e:	e007      	b.n	8003530 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	1dfa      	adds	r2, r7, #7
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	3a0a      	subs	r2, #10
 800352e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b09      	cmp	r3, #9
 8003536:	d8f3      	bhi.n	8003520 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	b2da      	uxtb	r2, r3
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	b2db      	uxtb	r3, r3
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e042      	b.n	80035e8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	223d      	movs	r2, #61	; 0x3d
 8003566:	5c9b      	ldrb	r3, [r3, r2]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	223c      	movs	r2, #60	; 0x3c
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f839 	bl	80035f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223d      	movs	r2, #61	; 0x3d
 8003582:	2102      	movs	r1, #2
 8003584:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	0019      	movs	r1, r3
 8003590:	0010      	movs	r0, r2
 8003592:	f000 f9b7 	bl	8003904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2246      	movs	r2, #70	; 0x46
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	223e      	movs	r2, #62	; 0x3e
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223f      	movs	r2, #63	; 0x3f
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2241      	movs	r2, #65	; 0x41
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2242      	movs	r2, #66	; 0x42
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2243      	movs	r2, #67	; 0x43
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2244      	movs	r2, #68	; 0x44
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2245      	movs	r2, #69	; 0x45
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	223d      	movs	r2, #61	; 0x3d
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	223d      	movs	r2, #61	; 0x3d
 800360c:	5c9b      	ldrb	r3, [r3, r2]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e035      	b.n	8003684 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	223d      	movs	r2, #61	; 0x3d
 800361c:	2102      	movs	r1, #2
 800361e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_TIM_Base_Start_IT+0x8c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_TIM_Base_Start_IT+0x4e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_TIM_Base_Start_IT+0x90>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_Base_Start_IT+0x4e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_TIM_Base_Start_IT+0x94>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2207      	movs	r2, #7
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d010      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	e007      	b.n	8003682 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40014000 	.word	0x40014000

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2202      	movs	r2, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d124      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11d      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2203      	movs	r2, #3
 80036c2:	4252      	negs	r2, r2
 80036c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4013      	ands	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f8fa 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f8ed 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f8f9 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	2b04      	cmp	r3, #4
 8003704:	d125      	bne.n	8003752 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11e      	bne.n	8003752 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2205      	movs	r2, #5
 800371a:	4252      	negs	r2, r2
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4013      	ands	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f8cd 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 800373a:	e007      	b.n	800374c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f8c0 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f8cc 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2208      	movs	r2, #8
 800375a:	4013      	ands	r3, r2
 800375c:	2b08      	cmp	r3, #8
 800375e:	d124      	bne.n	80037aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2208      	movs	r2, #8
 8003768:	4013      	ands	r3, r2
 800376a:	2b08      	cmp	r3, #8
 800376c:	d11d      	bne.n	80037aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2209      	movs	r2, #9
 8003774:	4252      	negs	r2, r2
 8003776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2203      	movs	r2, #3
 8003786:	4013      	ands	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f000 f8a1 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003792:	e007      	b.n	80037a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f894 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 f8a0 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2210      	movs	r2, #16
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d125      	bne.n	8003804 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2210      	movs	r2, #16
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d11e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2211      	movs	r2, #17
 80037cc:	4252      	negs	r2, r2
 80037ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2208      	movs	r2, #8
 80037d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f874 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e007      	b.n	80037fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f867 	bl	80038c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f873 	bl	80038e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10f      	bne.n	8003832 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2202      	movs	r2, #2
 8003826:	4252      	negs	r2, r2
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fd43 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	4013      	ands	r3, r2
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d10f      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	4013      	ands	r3, r2
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d108      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2281      	movs	r2, #129	; 0x81
 8003854:	4252      	negs	r2, r2
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 f8d0 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	4013      	ands	r3, r2
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d10f      	bne.n	800388e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	4013      	ands	r3, r2
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d108      	bne.n	800388e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2241      	movs	r2, #65	; 0x41
 8003882:	4252      	negs	r2, r2
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f833 	bl	80038f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2220      	movs	r2, #32
 8003896:	4013      	ands	r3, r2
 8003898:	2b20      	cmp	r3, #32
 800389a:	d10f      	bne.n	80038bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d108      	bne.n	80038bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	4252      	negs	r2, r2
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f89a 	bl	80039f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <TIM_Base_SetConfig+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0x20>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <TIM_Base_SetConfig+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2270      	movs	r2, #112	; 0x70
 8003928:	4393      	bics	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0xd0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0xd4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0xd8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x62>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0xdc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x62>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <TIM_Base_SetConfig+0xe0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x62>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_Base_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a20      	ldr	r2, [pc, #128]	; (80039ec <TIM_Base_SetConfig+0xe8>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	4393      	bics	r3, r2
 800397e:	001a      	movs	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <TIM_Base_SetConfig+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0xba>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <TIM_Base_SetConfig+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0xba>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <TIM_Base_SetConfig+0xe0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0xba>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <TIM_Base_SetConfig+0xe4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d103      	bne.n	80039c6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	615a      	str	r2, [r3, #20]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40002000 	.word	0x40002000
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800
 80039ec:	fffffcff 	.word	0xfffffcff

080039f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e044      	b.n	8003aac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2274      	movs	r2, #116	; 0x74
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7fd fd05 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2224      	movs	r2, #36	; 0x24
 8003a3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fcf4 	bl	8004440 <UART_SetConfig>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e024      	b.n	8003aac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fe27 	bl	80046c0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <HAL_UART_Init+0xa4>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	438a      	bics	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 febf 	bl	8004828 <UART_CheckIdleState>
 8003aaa:	0003      	movs	r3, r0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	fffff7ff 	.word	0xfffff7ff

08003ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d000      	beq.n	8003ad2 <HAL_UART_Transmit+0x1a>
 8003ad0:	e096      	b.n	8003c00 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_Transmit+0x28>
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e08e      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d109      	bne.n	8003b04 <HAL_UART_Transmit+0x4c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4013      	ands	r3, r2
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e07e      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2274      	movs	r2, #116	; 0x74
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Transmit+0x5a>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e077      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2274      	movs	r2, #116	; 0x74
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	; 0x21
 8003b26:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b28:	f7fd fef6 	bl	8001918 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1dba      	adds	r2, r7, #6
 8003b34:	2150      	movs	r1, #80	; 0x50
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1dba      	adds	r2, r7, #6
 8003b3e:	2152      	movs	r1, #82	; 0x52
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	015b      	lsls	r3, r3, #5
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d108      	bne.n	8003b62 <HAL_UART_Transmit+0xaa>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2274      	movs	r2, #116	; 0x74
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b72:	e02d      	b.n	8003bd0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	f000 fe99 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8003b86:	1e03      	subs	r3, r0, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e039      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	05d2      	lsls	r2, r2, #23
 8003b9e:	0dd2      	lsrs	r2, r2, #23
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e008      	b.n	8003bbe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2252      	movs	r2, #82	; 0x52
 8003bc2:	5a9b      	ldrh	r3, [r3, r2]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b299      	uxth	r1, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2252      	movs	r2, #82	; 0x52
 8003bce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2252      	movs	r2, #82	; 0x52
 8003bd4:	5a9b      	ldrh	r3, [r3, r2]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cb      	bne.n	8003b74 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	0013      	movs	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	f000 fe65 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8003bee:	1e03      	subs	r3, r0, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e005      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b008      	add	sp, #32
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d000      	beq.n	8003c26 <HAL_UART_Receive+0x1a>
 8003c24:	e0c6      	b.n	8003db4 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_UART_Receive+0x28>
 8003c2c:	1dbb      	adds	r3, r7, #6
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0be      	b.n	8003db6 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	015b      	lsls	r3, r3, #5
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d109      	bne.n	8003c58 <HAL_UART_Receive+0x4c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4013      	ands	r3, r2
 8003c52:	d001      	beq.n	8003c58 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0ae      	b.n	8003db6 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2274      	movs	r2, #116	; 0x74
 8003c5c:	5c9b      	ldrb	r3, [r3, r2]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Receive+0x5a>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e0a7      	b.n	8003db6 <HAL_UART_Receive+0x1aa>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2274      	movs	r2, #116	; 0x74
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	2100      	movs	r1, #0
 8003c74:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2222      	movs	r2, #34	; 0x22
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fe49 	bl	8001918 <HAL_GetTick>
 8003c86:	0003      	movs	r3, r0
 8003c88:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1dba      	adds	r2, r7, #6
 8003c8e:	2158      	movs	r1, #88	; 0x58
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1dba      	adds	r2, r7, #6
 8003c98:	215a      	movs	r1, #90	; 0x5a
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	015b      	lsls	r3, r3, #5
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_UART_Receive+0xba>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <HAL_UART_Receive+0xb0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	225c      	movs	r2, #92	; 0x5c
 8003cb6:	4942      	ldr	r1, [pc, #264]	; (8003dc0 <HAL_UART_Receive+0x1b4>)
 8003cb8:	5299      	strh	r1, [r3, r2]
 8003cba:	e01a      	b.n	8003cf2 <HAL_UART_Receive+0xe6>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	225c      	movs	r2, #92	; 0x5c
 8003cc0:	21ff      	movs	r1, #255	; 0xff
 8003cc2:	5299      	strh	r1, [r3, r2]
 8003cc4:	e015      	b.n	8003cf2 <HAL_UART_Receive+0xe6>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_UART_Receive+0xde>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_UART_Receive+0xd4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	225c      	movs	r2, #92	; 0x5c
 8003cda:	21ff      	movs	r1, #255	; 0xff
 8003cdc:	5299      	strh	r1, [r3, r2]
 8003cde:	e008      	b.n	8003cf2 <HAL_UART_Receive+0xe6>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	225c      	movs	r2, #92	; 0x5c
 8003ce4:	217f      	movs	r1, #127	; 0x7f
 8003ce6:	5299      	strh	r1, [r3, r2]
 8003ce8:	e003      	b.n	8003cf2 <HAL_UART_Receive+0xe6>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225c      	movs	r2, #92	; 0x5c
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003cf2:	2312      	movs	r3, #18
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	215c      	movs	r1, #92	; 0x5c
 8003cfa:	5a52      	ldrh	r2, [r2, r1]
 8003cfc:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	015b      	lsls	r3, r3, #5
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Receive+0x110>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2274      	movs	r2, #116	; 0x74
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d2c:	e037      	b.n	8003d9e <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2120      	movs	r1, #32
 8003d3c:	f000 fdbc 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e036      	b.n	8003db6 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10e      	bne.n	8003d6c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2212      	movs	r2, #18
 8003d58:	18ba      	adds	r2, r7, r2
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	3302      	adds	r3, #2
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e00f      	b.n	8003d8c <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2212      	movs	r2, #18
 8003d78:	18ba      	adds	r2, r7, r2
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	225a      	movs	r2, #90	; 0x5a
 8003d90:	5a9b      	ldrh	r3, [r3, r2]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b299      	uxth	r1, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	225a      	movs	r2, #90	; 0x5a
 8003d9c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	225a      	movs	r2, #90	; 0x5a
 8003da2:	5a9b      	ldrh	r3, [r3, r2]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1c1      	bne.n	8003d2e <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b008      	add	sp, #32
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	000001ff 	.word	0x000001ff

08003dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	1dbb      	adds	r3, r7, #6
 8003dd0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d150      	bne.n	8003e7c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_UART_Receive_IT+0x24>
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e048      	b.n	8003e7e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d109      	bne.n	8003e0c <HAL_UART_Receive_IT+0x48>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2201      	movs	r2, #1
 8003e04:	4013      	ands	r3, r2
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e038      	b.n	8003e7e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2274      	movs	r2, #116	; 0x74
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Receive_IT+0x56>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e031      	b.n	8003e7e <HAL_UART_Receive_IT+0xba>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2274      	movs	r2, #116	; 0x74
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	4013      	ands	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e3c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f383 8810 	msr	PRIMASK, r3
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	04c9      	lsls	r1, r1, #19
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6a:	1dbb      	adds	r3, r7, #6
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 fde4 	bl	8004a40 <UART_Start_Receive_IT>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b008      	add	sp, #32
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b0ab      	sub	sp, #172	; 0xac
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	22a4      	movs	r2, #164	; 0xa4
 8003e98:	18b9      	adds	r1, r7, r2
 8003e9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	20a0      	movs	r0, #160	; 0xa0
 8003ea4:	1839      	adds	r1, r7, r0
 8003ea6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	219c      	movs	r1, #156	; 0x9c
 8003eb0:	1879      	adds	r1, r7, r1
 8003eb2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	18bb      	adds	r3, r7, r2
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a99      	ldr	r2, [pc, #612]	; (8004120 <HAL_UART_IRQHandler+0x298>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2298      	movs	r2, #152	; 0x98
 8003ec0:	18bc      	adds	r4, r7, r2
 8003ec2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ec4:	18bb      	adds	r3, r7, r2
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d114      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2220      	movs	r2, #32
 8003edc:	4013      	ands	r3, r2
 8003ede:	d00a      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d100      	bne.n	8003eea <HAL_UART_IRQHandler+0x62>
 8003ee8:	e27e      	b.n	80043e8 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4798      	blx	r3
      }
      return;
 8003ef4:	e278      	b.n	80043e8 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ef6:	2398      	movs	r3, #152	; 0x98
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d100      	bne.n	8003f02 <HAL_UART_IRQHandler+0x7a>
 8003f00:	e114      	b.n	800412c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f02:	239c      	movs	r3, #156	; 0x9c
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d106      	bne.n	8003f1c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f0e:	23a0      	movs	r3, #160	; 0xa0
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a83      	ldr	r2, [pc, #524]	; (8004124 <HAL_UART_IRQHandler+0x29c>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	d100      	bne.n	8003f1c <HAL_UART_IRQHandler+0x94>
 8003f1a:	e107      	b.n	800412c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f1c:	23a4      	movs	r3, #164	; 0xa4
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d012      	beq.n	8003f4e <HAL_UART_IRQHandler+0xc6>
 8003f28:	23a0      	movs	r3, #160	; 0xa0
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	589b      	ldr	r3, [r3, r2]
 8003f44:	2201      	movs	r2, #1
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4e:	23a4      	movs	r3, #164	; 0xa4
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	d011      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
 8003f5a:	239c      	movs	r3, #156	; 0x9c
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	4013      	ands	r3, r2
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	589b      	ldr	r3, [r3, r2]
 8003f74:	2204      	movs	r2, #4
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f7e:	23a4      	movs	r3, #164	; 0xa4
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2204      	movs	r2, #4
 8003f86:	4013      	ands	r3, r2
 8003f88:	d011      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
 8003f8a:	239c      	movs	r3, #156	; 0x9c
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00b      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fae:	23a4      	movs	r3, #164	; 0xa4
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d017      	beq.n	8003fea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fba:	23a0      	movs	r3, #160	; 0xa0
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d105      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fc6:	239c      	movs	r3, #156	; 0x9c
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fd0:	d00b      	beq.n	8003fea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2280      	movs	r2, #128	; 0x80
 8003fde:	589b      	ldr	r3, [r3, r2]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fea:	23a4      	movs	r3, #164	; 0xa4
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_UART_IRQHandler+0x198>
 8003ff8:	23a0      	movs	r3, #160	; 0xa0
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	04db      	lsls	r3, r3, #19
 8004002:	4013      	ands	r3, r2
 8004004:	d00c      	beq.n	8004020 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	589b      	ldr	r3, [r3, r2]
 8004016:	2220      	movs	r2, #32
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	589b      	ldr	r3, [r3, r2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d100      	bne.n	800402c <HAL_UART_IRQHandler+0x1a4>
 800402a:	e1df      	b.n	80043ec <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800402c:	23a4      	movs	r3, #164	; 0xa4
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2220      	movs	r2, #32
 8004034:	4013      	ands	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004038:	23a0      	movs	r3, #160	; 0xa0
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2220      	movs	r2, #32
 8004040:	4013      	ands	r3, r2
 8004042:	d008      	beq.n	8004056 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	0010      	movs	r0, r2
 8004054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	589b      	ldr	r3, [r3, r2]
 800405c:	2194      	movs	r1, #148	; 0x94
 800405e:	187a      	adds	r2, r7, r1
 8004060:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2240      	movs	r2, #64	; 0x40
 800406a:	4013      	ands	r3, r2
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d004      	beq.n	800407a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004070:	187b      	adds	r3, r7, r1
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2228      	movs	r2, #40	; 0x28
 8004076:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004078:	d047      	beq.n	800410a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0018      	movs	r0, r3
 800407e:	f000 fd7b 	bl	8004b78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	4013      	ands	r3, r2
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d137      	bne.n	8004100 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004098:	2090      	movs	r0, #144	; 0x90
 800409a:	183a      	adds	r2, r7, r0
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	438a      	bics	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	183b      	adds	r3, r7, r0
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d012      	beq.n	80040f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_UART_IRQHandler+0x2a0>)
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fd fd99 	bl	8001c14 <HAL_DMA_Abort_IT>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d01a      	beq.n	800411c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	0018      	movs	r0, r3
 80040f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e012      	b.n	800411c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 f98d 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fe:	e00d      	b.n	800411c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f988 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	e008      	b.n	800411c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 f983 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	2100      	movs	r1, #0
 8004118:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800411a:	e167      	b.n	80043ec <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	46c0      	nop			; (mov r8, r8)
    return;
 800411e:	e165      	b.n	80043ec <HAL_UART_IRQHandler+0x564>
 8004120:	0000080f 	.word	0x0000080f
 8004124:	04000120 	.word	0x04000120
 8004128:	08004c3d 	.word	0x08004c3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	2b01      	cmp	r3, #1
 8004132:	d000      	beq.n	8004136 <HAL_UART_IRQHandler+0x2ae>
 8004134:	e131      	b.n	800439a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004136:	23a4      	movs	r3, #164	; 0xa4
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2210      	movs	r2, #16
 800413e:	4013      	ands	r3, r2
 8004140:	d100      	bne.n	8004144 <HAL_UART_IRQHandler+0x2bc>
 8004142:	e12a      	b.n	800439a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004144:	23a0      	movs	r3, #160	; 0xa0
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	4013      	ands	r3, r2
 800414e:	d100      	bne.n	8004152 <HAL_UART_IRQHandler+0x2ca>
 8004150:	e123      	b.n	800439a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	4013      	ands	r3, r2
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d000      	beq.n	800416a <HAL_UART_IRQHandler+0x2e2>
 8004168:	e09b      	b.n	80042a2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	217e      	movs	r1, #126	; 0x7e
 8004174:	187b      	adds	r3, r7, r1
 8004176:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004178:	187b      	adds	r3, r7, r1
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d100      	bne.n	8004182 <HAL_UART_IRQHandler+0x2fa>
 8004180:	e136      	b.n	80043f0 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2258      	movs	r2, #88	; 0x58
 8004186:	5a9b      	ldrh	r3, [r3, r2]
 8004188:	187a      	adds	r2, r7, r1
 800418a:	8812      	ldrh	r2, [r2, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d300      	bcc.n	8004192 <HAL_UART_IRQHandler+0x30a>
 8004190:	e12e      	b.n	80043f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	187a      	adds	r2, r7, r1
 8004196:	215a      	movs	r1, #90	; 0x5a
 8004198:	8812      	ldrh	r2, [r2, #0]
 800419a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d06e      	beq.n	8004284 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a6:	f3ef 8310 	mrs	r3, PRIMASK
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b0:	2301      	movs	r3, #1
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	f383 8810 	msr	PRIMASK, r3
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	498e      	ldr	r1, [pc, #568]	; (8004400 <HAL_UART_IRQHandler+0x578>)
 80041c8:	400a      	ands	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d8:	f3ef 8310 	mrs	r3, PRIMASK
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	677b      	str	r3, [r7, #116]	; 0x74
 80041e2:	2301      	movs	r3, #1
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	f383 8810 	msr	PRIMASK, r3
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	438a      	bics	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420a:	f3ef 8310 	mrs	r3, PRIMASK
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004210:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	673b      	str	r3, [r7, #112]	; 0x70
 8004214:	2301      	movs	r3, #1
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	438a      	bics	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004232:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004236:	f383 8810 	msr	PRIMASK, r3
}
 800423a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800424e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004252:	2301      	movs	r3, #1
 8004254:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2110      	movs	r1, #16
 800426a:	438a      	bics	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	0018      	movs	r0, r3
 8004280:	f7fd fc90 	bl	8001ba4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2258      	movs	r2, #88	; 0x58
 8004288:	5a9a      	ldrh	r2, [r3, r2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	215a      	movs	r1, #90	; 0x5a
 800428e:	5a5b      	ldrh	r3, [r3, r1]
 8004290:	b29b      	uxth	r3, r3
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0011      	movs	r1, r2
 800429a:	0018      	movs	r0, r3
 800429c:	f000 f8c4 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a0:	e0a6      	b.n	80043f0 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2258      	movs	r2, #88	; 0x58
 80042a6:	5a99      	ldrh	r1, [r3, r2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	225a      	movs	r2, #90	; 0x5a
 80042ac:	5a9b      	ldrh	r3, [r3, r2]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	208e      	movs	r0, #142	; 0x8e
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	1a8a      	subs	r2, r1, r2
 80042b6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	225a      	movs	r2, #90	; 0x5a
 80042bc:	5a9b      	ldrh	r3, [r3, r2]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d100      	bne.n	80042c6 <HAL_UART_IRQHandler+0x43e>
 80042c4:	e096      	b.n	80043f4 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d100      	bne.n	80042d0 <HAL_UART_IRQHandler+0x448>
 80042ce:	e091      	b.n	80043f4 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d8:	2488      	movs	r4, #136	; 0x88
 80042da:	193a      	adds	r2, r7, r4
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	2301      	movs	r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4943      	ldr	r1, [pc, #268]	; (8004404 <HAL_UART_IRQHandler+0x57c>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	193b      	adds	r3, r7, r4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	61bb      	str	r3, [r7, #24]
  return(result);
 800430e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	2484      	movs	r4, #132	; 0x84
 8004312:	193a      	adds	r2, r7, r4
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	438a      	bics	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	193b      	adds	r3, r7, r4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f383 8810 	msr	PRIMASK, r3
}
 800433e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435a:	2480      	movs	r4, #128	; 0x80
 800435c:	193a      	adds	r2, r7, r4
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	2301      	movs	r3, #1
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2110      	movs	r1, #16
 8004378:	438a      	bics	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	193b      	adds	r3, r7, r4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438a:	183b      	adds	r3, r7, r0
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f848 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004398:	e02c      	b.n	80043f4 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800439a:	23a4      	movs	r3, #164	; 0xa4
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043a6:	23a0      	movs	r3, #160	; 0xa0
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	4013      	ands	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01e      	beq.n	80043f8 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	0010      	movs	r0, r2
 80043c2:	4798      	blx	r3
    }
    return;
 80043c4:	e018      	b.n	80043f8 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043c6:	23a4      	movs	r3, #164	; 0xa4
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2240      	movs	r2, #64	; 0x40
 80043ce:	4013      	ands	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_UART_IRQHandler+0x572>
 80043d2:	23a0      	movs	r3, #160	; 0xa0
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4013      	ands	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 fc42 	bl	8004c6a <UART_EndTransmit_IT>
    return;
 80043e6:	e008      	b.n	80043fa <HAL_UART_IRQHandler+0x572>
      return;
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	e006      	b.n	80043fa <HAL_UART_IRQHandler+0x572>
    return;
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	e004      	b.n	80043fa <HAL_UART_IRQHandler+0x572>
      return;
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	e002      	b.n	80043fa <HAL_UART_IRQHandler+0x572>
      return;
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	e000      	b.n	80043fa <HAL_UART_IRQHandler+0x572>
    return;
 80043f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b02b      	add	sp, #172	; 0xac
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	fffffeff 	.word	0xfffffeff
 8004404:	fffffedf 	.word	0xfffffedf

08004408 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b002      	add	sp, #8
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	000a      	movs	r2, r1
 8004432:	1cbb      	adds	r3, r7, #2
 8004434:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004448:	231e      	movs	r3, #30
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a8d      	ldr	r2, [pc, #564]	; (80046a4 <UART_SetConfig+0x264>)
 8004470:	4013      	ands	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a88      	ldr	r2, [pc, #544]	; (80046a8 <UART_SetConfig+0x268>)
 8004486:	4013      	ands	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a7f      	ldr	r2, [pc, #508]	; (80046ac <UART_SetConfig+0x26c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7b      	ldr	r2, [pc, #492]	; (80046b0 <UART_SetConfig+0x270>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d127      	bne.n	8004516 <UART_SetConfig+0xd6>
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <UART_SetConfig+0x274>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	2203      	movs	r2, #3
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d00d      	beq.n	80044ee <UART_SetConfig+0xae>
 80044d2:	d81b      	bhi.n	800450c <UART_SetConfig+0xcc>
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d014      	beq.n	8004502 <UART_SetConfig+0xc2>
 80044d8:	d818      	bhi.n	800450c <UART_SetConfig+0xcc>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <UART_SetConfig+0xa4>
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d00a      	beq.n	80044f8 <UART_SetConfig+0xb8>
 80044e2:	e013      	b.n	800450c <UART_SetConfig+0xcc>
 80044e4:	231f      	movs	r3, #31
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e021      	b.n	8004532 <UART_SetConfig+0xf2>
 80044ee:	231f      	movs	r3, #31
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2202      	movs	r2, #2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e01c      	b.n	8004532 <UART_SetConfig+0xf2>
 80044f8:	231f      	movs	r3, #31
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2204      	movs	r2, #4
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e017      	b.n	8004532 <UART_SetConfig+0xf2>
 8004502:	231f      	movs	r3, #31
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2208      	movs	r2, #8
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e012      	b.n	8004532 <UART_SetConfig+0xf2>
 800450c:	231f      	movs	r3, #31
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2210      	movs	r2, #16
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e00d      	b.n	8004532 <UART_SetConfig+0xf2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a67      	ldr	r2, [pc, #412]	; (80046b8 <UART_SetConfig+0x278>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d104      	bne.n	800452a <UART_SetConfig+0xea>
 8004520:	231f      	movs	r3, #31
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e003      	b.n	8004532 <UART_SetConfig+0xf2>
 800452a:	231f      	movs	r3, #31
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2210      	movs	r2, #16
 8004530:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	429a      	cmp	r2, r3
 800453c:	d15d      	bne.n	80045fa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800453e:	231f      	movs	r3, #31
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d015      	beq.n	8004574 <UART_SetConfig+0x134>
 8004548:	dc18      	bgt.n	800457c <UART_SetConfig+0x13c>
 800454a:	2b04      	cmp	r3, #4
 800454c:	d00d      	beq.n	800456a <UART_SetConfig+0x12a>
 800454e:	dc15      	bgt.n	800457c <UART_SetConfig+0x13c>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <UART_SetConfig+0x11a>
 8004554:	2b02      	cmp	r3, #2
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0x124>
 8004558:	e010      	b.n	800457c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455a:	f7fe fc7f 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 800455e:	0003      	movs	r3, r0
 8004560:	61bb      	str	r3, [r7, #24]
        break;
 8004562:	e012      	b.n	800458a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <UART_SetConfig+0x27c>)
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e00f      	b.n	800458a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fe fc09 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800456e:	0003      	movs	r3, r0
 8004570:	61bb      	str	r3, [r7, #24]
        break;
 8004572:	e00a      	b.n	800458a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	61bb      	str	r3, [r7, #24]
        break;
 800457a:	e006      	b.n	800458a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004580:	231e      	movs	r3, #30
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
        break;
 8004588:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d100      	bne.n	8004592 <UART_SetConfig+0x152>
 8004590:	e07b      	b.n	800468a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	18d2      	adds	r2, r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	0019      	movs	r1, r3
 80045a4:	0010      	movs	r0, r2
 80045a6:	f7fb fdb7 	bl	8000118 <__udivsi3>
 80045aa:	0003      	movs	r3, r0
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d91c      	bls.n	80045f0 <UART_SetConfig+0x1b0>
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	025b      	lsls	r3, r3, #9
 80045bc:	429a      	cmp	r2, r3
 80045be:	d217      	bcs.n	80045f0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	200e      	movs	r0, #14
 80045c6:	183b      	adds	r3, r7, r0
 80045c8:	210f      	movs	r1, #15
 80045ca:	438a      	bics	r2, r1
 80045cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2207      	movs	r2, #7
 80045d6:	4013      	ands	r3, r2
 80045d8:	b299      	uxth	r1, r3
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	183a      	adds	r2, r7, r0
 80045de:	8812      	ldrh	r2, [r2, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	183a      	adds	r2, r7, r0
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	e04c      	b.n	800468a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80045f0:	231e      	movs	r3, #30
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e047      	b.n	800468a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045fa:	231f      	movs	r3, #31
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d015      	beq.n	8004630 <UART_SetConfig+0x1f0>
 8004604:	dc18      	bgt.n	8004638 <UART_SetConfig+0x1f8>
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00d      	beq.n	8004626 <UART_SetConfig+0x1e6>
 800460a:	dc15      	bgt.n	8004638 <UART_SetConfig+0x1f8>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <UART_SetConfig+0x1d6>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0x1e0>
 8004614:	e010      	b.n	8004638 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe fc21 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 800461a:	0003      	movs	r3, r0
 800461c:	61bb      	str	r3, [r7, #24]
        break;
 800461e:	e012      	b.n	8004646 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <UART_SetConfig+0x27c>)
 8004622:	61bb      	str	r3, [r7, #24]
        break;
 8004624:	e00f      	b.n	8004646 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe fbab 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800462a:	0003      	movs	r3, r0
 800462c:	61bb      	str	r3, [r7, #24]
        break;
 800462e:	e00a      	b.n	8004646 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	61bb      	str	r3, [r7, #24]
        break;
 8004636:	e006      	b.n	8004646 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463c:	231e      	movs	r3, #30
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
        break;
 8004644:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01e      	beq.n	800468a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	085a      	lsrs	r2, r3, #1
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	18d2      	adds	r2, r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	0019      	movs	r1, r3
 800465c:	0010      	movs	r0, r2
 800465e:	f7fb fd5b 	bl	8000118 <__udivsi3>
 8004662:	0003      	movs	r3, r0
 8004664:	b29b      	uxth	r3, r3
 8004666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	d909      	bls.n	8004682 <UART_SetConfig+0x242>
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	025b      	lsls	r3, r3, #9
 8004674:	429a      	cmp	r2, r3
 8004676:	d204      	bcs.n	8004682 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	60da      	str	r2, [r3, #12]
 8004680:	e003      	b.n	800468a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004682:	231e      	movs	r3, #30
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004696:	231e      	movs	r3, #30
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	781b      	ldrb	r3, [r3, #0]
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b008      	add	sp, #32
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	ffff69f3 	.word	0xffff69f3
 80046a8:	ffffcfff 	.word	0xffffcfff
 80046ac:	fffff4ff 	.word	0xfffff4ff
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40004400 	.word	0x40004400
 80046bc:	007a1200 	.word	0x007a1200

080046c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	d00b      	beq.n	80046ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <UART_AdvFeatureConfig+0x144>)
 80046da:	4013      	ands	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2202      	movs	r2, #2
 80046f0:	4013      	ands	r3, r2
 80046f2:	d00b      	beq.n	800470c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a43      	ldr	r2, [pc, #268]	; (8004808 <UART_AdvFeatureConfig+0x148>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2204      	movs	r2, #4
 8004712:	4013      	ands	r3, r2
 8004714:	d00b      	beq.n	800472e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a3b      	ldr	r2, [pc, #236]	; (800480c <UART_AdvFeatureConfig+0x14c>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2208      	movs	r2, #8
 8004734:	4013      	ands	r3, r2
 8004736:	d00b      	beq.n	8004750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <UART_AdvFeatureConfig+0x150>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	d00b      	beq.n	8004772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <UART_AdvFeatureConfig+0x154>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2220      	movs	r2, #32
 8004778:	4013      	ands	r3, r2
 800477a:	d00b      	beq.n	8004794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	4a25      	ldr	r2, [pc, #148]	; (8004818 <UART_AdvFeatureConfig+0x158>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	4013      	ands	r3, r2
 800479c:	d01d      	beq.n	80047da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <UART_AdvFeatureConfig+0x15c>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	035b      	lsls	r3, r3, #13
 80047be:	429a      	cmp	r2, r3
 80047c0:	d10b      	bne.n	80047da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <UART_AdvFeatureConfig+0x160>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00b      	beq.n	80047fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <UART_AdvFeatureConfig+0x164>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	46bd      	mov	sp, r7
 8004800:	b002      	add	sp, #8
 8004802:	bd80      	pop	{r7, pc}
 8004804:	fffdffff 	.word	0xfffdffff
 8004808:	fffeffff 	.word	0xfffeffff
 800480c:	fffbffff 	.word	0xfffbffff
 8004810:	ffff7fff 	.word	0xffff7fff
 8004814:	ffffefff 	.word	0xffffefff
 8004818:	ffffdfff 	.word	0xffffdfff
 800481c:	ffefffff 	.word	0xffefffff
 8004820:	ff9fffff 	.word	0xff9fffff
 8004824:	fff7ffff 	.word	0xfff7ffff

08004828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	2100      	movs	r1, #0
 8004836:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004838:	f7fd f86e 	bl	8001918 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2208      	movs	r2, #8
 8004848:	4013      	ands	r3, r2
 800484a:	2b08      	cmp	r3, #8
 800484c:	d10c      	bne.n	8004868 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	0391      	lsls	r1, r2, #14
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <UART_CheckIdleState+0x8c>)
 8004858:	9200      	str	r2, [sp, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	f000 f82c 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e021      	b.n	80048ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2204      	movs	r2, #4
 8004870:	4013      	ands	r3, r2
 8004872:	2b04      	cmp	r3, #4
 8004874:	d10c      	bne.n	8004890 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	03d1      	lsls	r1, r2, #15
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <UART_CheckIdleState+0x8c>)
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	f000 f818 	bl	80048b8 <UART_WaitOnFlagUntilTimeout>
 8004888:	1e03      	subs	r3, r0, #0
 800488a:	d001      	beq.n	8004890 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e00d      	b.n	80048ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2274      	movs	r2, #116	; 0x74
 80048a6:	2100      	movs	r1, #0
 80048a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b004      	add	sp, #16
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	01ffffff 	.word	0x01ffffff

080048b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b094      	sub	sp, #80	; 0x50
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c8:	e0a3      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048cc:	3301      	adds	r3, #1
 80048ce:	d100      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80048d0:	e09f      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d2:	f7fd f821 	bl	8001918 <HAL_GetTick>
 80048d6:	0002      	movs	r2, r0
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048de:	429a      	cmp	r2, r3
 80048e0:	d302      	bcc.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d13d      	bne.n	8004964 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
 80048f2:	2301      	movs	r3, #1
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	f383 8810 	msr	PRIMASK, r3
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	494c      	ldr	r1, [pc, #304]	; (8004a3c <UART_WaitOnFlagUntilTimeout+0x184>)
 800490a:	400a      	ands	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491a:	f3ef 8310 	mrs	r3, PRIMASK
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
 8004924:	2301      	movs	r3, #1
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	f383 8810 	msr	PRIMASK, r3
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2101      	movs	r1, #1
 800493c:	438a      	bics	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	f383 8810 	msr	PRIMASK, r3
}
 800494a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2274      	movs	r2, #116	; 0x74
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e067      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2204      	movs	r2, #4
 800496c:	4013      	ands	r3, r2
 800496e:	d050      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	401a      	ands	r2, r3
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	429a      	cmp	r2, r3
 8004982:	d146      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2280      	movs	r2, #128	; 0x80
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	613b      	str	r3, [r7, #16]
  return(result);
 8004994:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4923      	ldr	r1, [pc, #140]	; (8004a3c <UART_WaitOnFlagUntilTimeout+0x184>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80049c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ca:	2301      	movs	r3, #1
 80049cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	438a      	bics	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	2120      	movs	r1, #32
 8004a04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2274      	movs	r2, #116	; 0x74
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e010      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	425a      	negs	r2, r3
 8004a22:	4153      	adcs	r3, r2
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	001a      	movs	r2, r3
 8004a28:	1dfb      	adds	r3, r7, #7
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d100      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004a30:	e74b      	b.n	80048ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b014      	add	sp, #80	; 0x50
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	fffffe5f 	.word	0xfffffe5f

08004a40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	1dbb      	adds	r3, r7, #6
 8004a4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1dba      	adds	r2, r7, #6
 8004a58:	2158      	movs	r1, #88	; 0x58
 8004a5a:	8812      	ldrh	r2, [r2, #0]
 8004a5c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1dba      	adds	r2, r7, #6
 8004a62:	215a      	movs	r1, #90	; 0x5a
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	015b      	lsls	r3, r3, #5
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d10d      	bne.n	8004a96 <UART_Start_Receive_IT+0x56>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <UART_Start_Receive_IT+0x4c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	225c      	movs	r2, #92	; 0x5c
 8004a86:	4939      	ldr	r1, [pc, #228]	; (8004b6c <UART_Start_Receive_IT+0x12c>)
 8004a88:	5299      	strh	r1, [r3, r2]
 8004a8a:	e01a      	b.n	8004ac2 <UART_Start_Receive_IT+0x82>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	225c      	movs	r2, #92	; 0x5c
 8004a90:	21ff      	movs	r1, #255	; 0xff
 8004a92:	5299      	strh	r1, [r3, r2]
 8004a94:	e015      	b.n	8004ac2 <UART_Start_Receive_IT+0x82>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <UART_Start_Receive_IT+0x7a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <UART_Start_Receive_IT+0x70>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	225c      	movs	r2, #92	; 0x5c
 8004aaa:	21ff      	movs	r1, #255	; 0xff
 8004aac:	5299      	strh	r1, [r3, r2]
 8004aae:	e008      	b.n	8004ac2 <UART_Start_Receive_IT+0x82>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	225c      	movs	r2, #92	; 0x5c
 8004ab4:	217f      	movs	r1, #127	; 0x7f
 8004ab6:	5299      	strh	r1, [r3, r2]
 8004ab8:	e003      	b.n	8004ac2 <UART_Start_Receive_IT+0x82>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	225c      	movs	r2, #92	; 0x5c
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2222      	movs	r2, #34	; 0x22
 8004ace:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ad6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ada:	2301      	movs	r3, #1
 8004adc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f383 8810 	msr	PRIMASK, r3
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2101      	movs	r1, #1
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f383 8810 	msr	PRIMASK, r3
}
 8004b00:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	015b      	lsls	r3, r3, #5
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d107      	bne.n	8004b1e <UART_Start_Receive_IT+0xde>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <UART_Start_Receive_IT+0x130>)
 8004b1a:	665a      	str	r2, [r3, #100]	; 0x64
 8004b1c:	e002      	b.n	8004b24 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <UART_Start_Receive_IT+0x134>)
 8004b22:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2274      	movs	r2, #116	; 0x74
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	613b      	str	r3, [r7, #16]
  return(result);
 8004b32:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	2301      	movs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2190      	movs	r1, #144	; 0x90
 8004b4e:	0049      	lsls	r1, r1, #1
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f383 8810 	msr	PRIMASK, r3
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b00c      	add	sp, #48	; 0x30
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	000001ff 	.word	0x000001ff
 8004b70:	08004e29 	.word	0x08004e29
 8004b74:	08004cc1 	.word	0x08004cc1

08004b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08e      	sub	sp, #56	; 0x38
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b80:	f3ef 8310 	mrs	r3, PRIMASK
 8004b84:	617b      	str	r3, [r7, #20]
  return(result);
 8004b86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f383 8810 	msr	PRIMASK, r3
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4925      	ldr	r1, [pc, #148]	; (8004c38 <UART_EndRxTransfer+0xc0>)
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f383 8810 	msr	PRIMASK, r3
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	623b      	str	r3, [r7, #32]
  return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d118      	bne.n	8004c1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bec:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2110      	movs	r1, #16
 8004c0e:	438a      	bics	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b00e      	add	sp, #56	; 0x38
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	fffffedf 	.word	0xfffffedf

08004c3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	225a      	movs	r2, #90	; 0x5a
 8004c4e:	2100      	movs	r1, #0
 8004c50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2252      	movs	r2, #82	; 0x52
 8004c56:	2100      	movs	r1, #0
 8004c58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7ff fbdb 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b004      	add	sp, #16
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	438a      	bics	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7fb fb5c 	bl	8000370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b006      	add	sp, #24
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b090      	sub	sp, #64	; 0x40
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cc8:	203e      	movs	r0, #62	; 0x3e
 8004cca:	183b      	adds	r3, r7, r0
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	215c      	movs	r1, #92	; 0x5c
 8004cd0:	5a52      	ldrh	r2, [r2, r1]
 8004cd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd8:	2b22      	cmp	r3, #34	; 0x22
 8004cda:	d000      	beq.n	8004cde <UART_RxISR_8BIT+0x1e>
 8004cdc:	e095      	b.n	8004e0a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	213c      	movs	r1, #60	; 0x3c
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004ce8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cea:	187b      	adds	r3, r7, r1
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	183b      	adds	r3, r7, r0
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b2d9      	uxtb	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	225a      	movs	r2, #90	; 0x5a
 8004d0e:	5a9b      	ldrh	r3, [r3, r2]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b299      	uxth	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	225a      	movs	r2, #90	; 0x5a
 8004d1a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	225a      	movs	r2, #90	; 0x5a
 8004d20:	5a9b      	ldrh	r3, [r3, r2]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d178      	bne.n	8004e1a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d32:	2301      	movs	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4936      	ldr	r1, [pc, #216]	; (8004e24 <UART_RxISR_8BIT+0x164>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
 8004d64:	2301      	movs	r3, #1
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d12f      	bne.n	8004e00 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dac:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
 8004db0:	2301      	movs	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2110      	movs	r1, #16
 8004dc8:	438a      	bics	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2210      	movs	r2, #16
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d103      	bne.n	8004dee <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2210      	movs	r2, #16
 8004dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2258      	movs	r2, #88	; 0x58
 8004df2:	5a9a      	ldrh	r2, [r3, r2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	0011      	movs	r1, r2
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff fb15 	bl	8004428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dfe:	e00c      	b.n	8004e1a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7ff fb00 	bl	8004408 <HAL_UART_RxCpltCallback>
}
 8004e08:	e007      	b.n	8004e1a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2108      	movs	r1, #8
 8004e16:	430a      	orrs	r2, r1
 8004e18:	619a      	str	r2, [r3, #24]
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b010      	add	sp, #64	; 0x40
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	fffffedf 	.word	0xfffffedf

08004e28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e30:	203e      	movs	r0, #62	; 0x3e
 8004e32:	183b      	adds	r3, r7, r0
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	215c      	movs	r1, #92	; 0x5c
 8004e38:	5a52      	ldrh	r2, [r2, r1]
 8004e3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e40:	2b22      	cmp	r3, #34	; 0x22
 8004e42:	d000      	beq.n	8004e46 <UART_RxISR_16BIT+0x1e>
 8004e44:	e095      	b.n	8004f72 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	213c      	movs	r1, #60	; 0x3c
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004e50:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	183a      	adds	r2, r7, r0
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	8812      	ldrh	r2, [r2, #0]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	225a      	movs	r2, #90	; 0x5a
 8004e76:	5a9b      	ldrh	r3, [r3, r2]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b299      	uxth	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	225a      	movs	r2, #90	; 0x5a
 8004e82:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	225a      	movs	r2, #90	; 0x5a
 8004e88:	5a9b      	ldrh	r3, [r3, r2]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d178      	bne.n	8004f82 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e90:	f3ef 8310 	mrs	r3, PRIMASK
 8004e94:	617b      	str	r3, [r7, #20]
  return(result);
 8004e96:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4936      	ldr	r1, [pc, #216]	; (8004f8c <UART_RxISR_16BIT+0x164>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec6:	623b      	str	r3, [r7, #32]
  return(result);
 8004ec8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
 8004ecc:	2301      	movs	r3, #1
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	438a      	bics	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d12f      	bne.n	8004f68 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f14:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f18:	2301      	movs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2110      	movs	r1, #16
 8004f30:	438a      	bics	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2210      	movs	r2, #16
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d103      	bne.n	8004f56 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2210      	movs	r2, #16
 8004f54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2258      	movs	r2, #88	; 0x58
 8004f5a:	5a9a      	ldrh	r2, [r3, r2]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0011      	movs	r1, r2
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7ff fa61 	bl	8004428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f66:	e00c      	b.n	8004f82 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f7ff fa4c 	bl	8004408 <HAL_UART_RxCpltCallback>
}
 8004f70:	e007      	b.n	8004f82 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2108      	movs	r1, #8
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b010      	add	sp, #64	; 0x40
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	fffffedf 	.word	0xfffffedf

08004f90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	0002      	movs	r2, r0
 8004f98:	1dbb      	adds	r3, r7, #6
 8004f9a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fa0:	1dbb      	adds	r3, r7, #6
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8004fa6:	2b84      	cmp	r3, #132	; 0x84
 8004fa8:	d006      	beq.n	8004fb8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004faa:	1dbb      	adds	r3, r7, #6
 8004fac:	2200      	movs	r2, #0
 8004fae:	5e9a      	ldrsh	r2, [r3, r2]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	3303      	adds	r3, #3
 8004fb6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc8:	f3ef 8305 	mrs	r3, IPSR
 8004fcc:	607b      	str	r3, [r7, #4]
  return(result);
 8004fce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004fd0:	1e5a      	subs	r2, r3, #1
 8004fd2:	4193      	sbcs	r3, r2
 8004fd4:	b2db      	uxtb	r3, r3
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fe2:	f000 fc75 	bl	80058d0 <vTaskStartScheduler>
  
  return osOK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff0:	b089      	sub	sp, #36	; 0x24
 8004ff2:	af04      	add	r7, sp, #16
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685c      	ldr	r4, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681d      	ldr	r5, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691e      	ldr	r6, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2208      	movs	r2, #8
 8005008:	5e9b      	ldrsh	r3, [r3, r2]
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff ffc0 	bl	8004f90 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	9302      	str	r3, [sp, #8]
 800501c:	9201      	str	r2, [sp, #4]
 800501e:	9000      	str	r0, [sp, #0]
 8005020:	000b      	movs	r3, r1
 8005022:	0032      	movs	r2, r6
 8005024:	0029      	movs	r1, r5
 8005026:	0020      	movs	r0, r4
 8005028:	f000 faa2 	bl	8005570 <xTaskCreateStatic>
 800502c:	0003      	movs	r3, r0
 800502e:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b005      	add	sp, #20
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800503a <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
#else
	return NULL;
 800503e:	2300      	movs	r3, #0
#endif
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0018      	movs	r0, r3
 8005052:	f000 fbb3 	bl	80057bc <vTaskDelete>
  return osOK;
 8005056:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  taskYIELD();
 8005064:	f000 f9dc 	bl	8005420 <vPortYield>
  
  return osOK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <osDelay+0x16>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	e000      	b.n	8005088 <osDelay+0x18>
 8005086:	2301      	movs	r3, #1
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fbfb 	bl	8005884 <vTaskDelay>
  
  return osOK;
 800508e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b004      	add	sp, #16
 8005096:	bd80      	pop	{r7, pc}

08005098 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af02      	add	r7, sp, #8
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80050aa:	f7ff ff8a 	bl	8004fc2 <inHandlerMode>
 80050ae:	1e03      	subs	r3, r0, #0
 80050b0:	d018      	beq.n	80050e4 <osSignalSet+0x4c>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	2308      	movs	r3, #8
 80050b6:	18fa      	adds	r2, r7, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	230c      	movs	r3, #12
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	0013      	movs	r3, r2
 80050c2:	2201      	movs	r2, #1
 80050c4:	f000 ff6e 	bl	8005fa4 <xTaskGenericNotifyFromISR>
 80050c8:	0003      	movs	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d002      	beq.n	80050d4 <osSignalSet+0x3c>
      return 0x80000000;
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	e015      	b.n	8005100 <osSignalSet+0x68>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <osSignalSet+0x66>
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <osSignalSet+0x70>)
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e00c      	b.n	80050fe <osSignalSet+0x66>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	2308      	movs	r3, #8
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f000 fecd 	bl	8005e8c <xTaskGenericNotify>
 80050f2:	0003      	movs	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <osSignalSet+0x66>
    return 0x80000000;
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	e000      	b.n	8005100 <osSignalSet+0x68>
  
  return ulPreviousNotificationValue;
 80050fe:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8005100:	0018      	movs	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	b004      	add	sp, #16
 8005106:	bd80      	pop	{r7, pc}
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005118:	2310      	movs	r3, #16
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
  ticks = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3301      	adds	r3, #1
 8005128:	d103      	bne.n	8005132 <osSignalWait+0x26>
    ticks = portMAX_DELAY;
 800512a:	2301      	movs	r3, #1
 800512c:	425b      	negs	r3, r3
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e009      	b.n	8005146 <osSignalWait+0x3a>
  }
  else if (millisec != 0) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d006      	beq.n	8005146 <osSignalWait+0x3a>
    ticks = millisec / portTICK_PERIOD_MS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <osSignalWait+0x3a>
      ticks = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005146:	f7ff ff3c 	bl	8004fc2 <inHandlerMode>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d004      	beq.n	8005158 <osSignalWait+0x4c>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800514e:	2310      	movs	r3, #16
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	2282      	movs	r2, #130	; 0x82
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e024      	b.n	80051a2 <osSignalWait+0x96>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	69f8      	ldr	r0, [r7, #28]
 800515c:	2410      	movs	r4, #16
 800515e:	193b      	adds	r3, r7, r4
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	0003      	movs	r3, r0
 8005164:	2000      	movs	r0, #0
 8005166:	f000 fe39 	bl	8005ddc <xTaskNotifyWait>
 800516a:	0003      	movs	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d00b      	beq.n	8005188 <osSignalWait+0x7c>
    {
      if(ticks == 0)  ret.status = osOK;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <osSignalWait+0x72>
 8005176:	193b      	adds	r3, r7, r4
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e011      	b.n	80051a2 <osSignalWait+0x96>
      else  ret.status = osEventTimeout;
 800517e:	2310      	movs	r3, #16
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	2240      	movs	r2, #64	; 0x40
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e00c      	b.n	80051a2 <osSignalWait+0x96>
    }
    else if(ret.value.signals < 0)
 8005188:	2210      	movs	r2, #16
 800518a:	18bb      	adds	r3, r7, r2
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da03      	bge.n	800519a <osSignalWait+0x8e>
    {
      ret.status =  osErrorValue;     
 8005192:	18bb      	adds	r3, r7, r2
 8005194:	2286      	movs	r2, #134	; 0x86
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e003      	b.n	80051a2 <osSignalWait+0x96>
    }
    else  ret.status =  osEventSignal;
 800519a:	2310      	movs	r3, #16
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2208      	movs	r2, #8
 80051a0:	601a      	str	r2, [r3, #0]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2210      	movs	r2, #16
 80051a6:	18ba      	adds	r2, r7, r2
 80051a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051aa:	c313      	stmia	r3!, {r0, r1, r4}
}
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b009      	add	sp, #36	; 0x24
 80051b2:	bd90      	pop	{r4, r7, pc}

080051b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3308      	adds	r3, #8
 80051c0:	001a      	movs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	4252      	negs	r2, r2
 80051cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3308      	adds	r3, #8
 80051d2:	001a      	movs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3308      	adds	r3, #8
 80051dc:	001a      	movs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b002      	add	sp, #8
 8005204:	bd80      	pop	{r7, pc}

08005206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b004      	add	sp, #16
 8005248:	bd80      	pop	{r7, pc}

0800524a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3301      	adds	r3, #1
 800525e:	d103      	bne.n	8005268 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e00c      	b.n	8005282 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3308      	adds	r3, #8
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e002      	b.n	8005276 <vListInsert+0x2c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d2f6      	bcs.n	8005270 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b004      	add	sp, #16
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
 80052cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6852      	ldr	r2, [r2, #4]
 80052d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d103      	bne.n	80052ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b04      	subs	r3, #4
 8005318:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2280      	movs	r2, #128	; 0x80
 800531e:	0452      	lsls	r2, r2, #17
 8005320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <pxPortInitialiseStack+0x50>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b14      	subs	r3, #20
 800533e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3b20      	subs	r3, #32
 800534a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b004      	add	sp, #16
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	0800535d 	.word	0x0800535d

0800535c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <prvTaskExitError+0x2c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	d001      	beq.n	8005372 <prvTaskExitError+0x16>
 800536e:	b672      	cpsid	i
 8005370:	e7fe      	b.n	8005370 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005372:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0fc      	beq.n	8005376 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b002      	add	sp, #8
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	20000018 	.word	0x20000018

0800538c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

080053a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <pxCurrentTCBConst2>)
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	3020      	adds	r0, #32
 80053a8:	f380 8809 	msr	PSP, r0
 80053ac:	2002      	movs	r0, #2
 80053ae:	f380 8814 	msr	CONTROL, r0
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80053b8:	46ae      	mov	lr, r5
 80053ba:	bc08      	pop	{r3}
 80053bc:	bc04      	pop	{r2}
 80053be:	b662      	cpsie	i
 80053c0:	4718      	bx	r3
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46c0      	nop			; (mov r8, r8)

080053d0 <pxCurrentTCBConst2>:
 80053d0:	20001498 	.word	0x20001498
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	46c0      	nop			; (mov r8, r8)

080053d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <xPortStartScheduler+0x40>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <xPortStartScheduler+0x40>)
 80053e2:	21ff      	movs	r1, #255	; 0xff
 80053e4:	0409      	lsls	r1, r1, #16
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <xPortStartScheduler+0x40>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <xPortStartScheduler+0x40>)
 80053f0:	21ff      	movs	r1, #255	; 0xff
 80053f2:	0609      	lsls	r1, r1, #24
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80053f8:	f000 f898 	bl	800552c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <xPortStartScheduler+0x44>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005402:	f7ff ffcd 	bl	80053a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005406:	f000 fbe1 	bl	8005bcc <vTaskSwitchContext>
	prvTaskExitError();
 800540a:	f7ff ffa7 	bl	800535c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	e000ed20 	.word	0xe000ed20
 800541c:	20000018 	.word	0x20000018

08005420 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <vPortYield+0x1c>)
 8005426:	2280      	movs	r2, #128	; 0x80
 8005428:	0552      	lsls	r2, r2, #21
 800542a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800542c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005430:	f3bf 8f6f 	isb	sy
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005444:	b672      	cpsid	i
    uxCriticalNesting++;
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <vPortEnterCritical+0x20>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <vPortEnterCritical+0x20>)
 800544e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005450:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005454:	f3bf 8f6f 	isb	sy
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	20000018 	.word	0x20000018

08005464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <vPortExitCritical+0x2c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <vPortExitCritical+0x10>
 8005470:	b672      	cpsid	i
 8005472:	e7fe      	b.n	8005472 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <vPortExitCritical+0x2c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <vPortExitCritical+0x2c>)
 800547c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <vPortExitCritical+0x2c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d100      	bne.n	8005488 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005486:	b662      	cpsie	i
    }
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000018 	.word	0x20000018

08005494 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005494:	f3ef 8010 	mrs	r0, PRIMASK
 8005498:	b672      	cpsid	i
 800549a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	0018      	movs	r0, r3

080054a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80054a0:	f380 8810 	msr	PRIMASK, r0
 80054a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80054a6:	46c0      	nop			; (mov r8, r8)
	...

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <pxCurrentTCBConst>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	3820      	subs	r0, #32
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054be:	4644      	mov	r4, r8
 80054c0:	464d      	mov	r5, r9
 80054c2:	4656      	mov	r6, sl
 80054c4:	465f      	mov	r7, fp
 80054c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054c8:	b508      	push	{r3, lr}
 80054ca:	b672      	cpsid	i
 80054cc:	f000 fb7e 	bl	8005bcc <vTaskSwitchContext>
 80054d0:	b662      	cpsie	i
 80054d2:	bc0c      	pop	{r2, r3}
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	6808      	ldr	r0, [r1, #0]
 80054d8:	3010      	adds	r0, #16
 80054da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054dc:	46a0      	mov	r8, r4
 80054de:	46a9      	mov	r9, r5
 80054e0:	46b2      	mov	sl, r6
 80054e2:	46bb      	mov	fp, r7
 80054e4:	f380 8809 	msr	PSP, r0
 80054e8:	3820      	subs	r0, #32
 80054ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054ec:	4718      	bx	r3
 80054ee:	46c0      	nop			; (mov r8, r8)

080054f0 <pxCurrentTCBConst>:
 80054f0:	20001498 	.word	0x20001498
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46c0      	nop			; (mov r8, r8)

080054f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80054fe:	f7ff ffc9 	bl	8005494 <ulSetInterruptMaskFromISR>
 8005502:	0003      	movs	r3, r0
 8005504:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005506:	f000 facd 	bl	8005aa4 <xTaskIncrementTick>
 800550a:	1e03      	subs	r3, r0, #0
 800550c:	d003      	beq.n	8005516 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <SysTick_Handler+0x30>)
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	0552      	lsls	r2, r2, #21
 8005514:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	0018      	movs	r0, r3
 800551a:	f7ff ffc1 	bl	80054a0 <vClearInterruptMaskFromISR>
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	46bd      	mov	sp, r7
 8005522:	b002      	add	sp, #8
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <prvSetupTimerInterrupt+0x34>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <prvSetupTimerInterrupt+0x38>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvSetupTimerInterrupt+0x3c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	22fa      	movs	r2, #250	; 0xfa
 8005542:	0091      	lsls	r1, r2, #2
 8005544:	0018      	movs	r0, r3
 8005546:	f7fa fde7 	bl	8000118 <__udivsi3>
 800554a:	0003      	movs	r3, r0
 800554c:	001a      	movs	r2, r3
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <prvSetupTimerInterrupt+0x40>)
 8005550:	3a01      	subs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <prvSetupTimerInterrupt+0x34>)
 8005556:	2207      	movs	r2, #7
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	e000e010 	.word	0xe000e010
 8005564:	e000e018 	.word	0xe000e018
 8005568:	20000010 	.word	0x20000010
 800556c:	e000e014 	.word	0xe000e014

08005570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b08d      	sub	sp, #52	; 0x34
 8005574:	af04      	add	r7, sp, #16
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <xTaskCreateStatic+0x18>
 8005584:	b672      	cpsid	i
 8005586:	e7fe      	b.n	8005586 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <xTaskCreateStatic+0x22>
 800558e:	b672      	cpsid	i
 8005590:	e7fe      	b.n	8005590 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005592:	23ac      	movs	r3, #172	; 0xac
 8005594:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2bac      	cmp	r3, #172	; 0xac
 800559a:	d001      	beq.n	80055a0 <xTaskCreateStatic+0x30>
 800559c:	b672      	cpsid	i
 800559e:	e7fe      	b.n	800559e <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01c      	beq.n	80055e0 <xTaskCreateStatic+0x70>
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d019      	beq.n	80055e0 <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055b6:	683c      	ldr	r4, [r7, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	2300      	movs	r3, #0
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	2318      	movs	r3, #24
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	0023      	movs	r3, r4
 80055d2:	f000 f80d 	bl	80055f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 f893 	bl	8005704 <prvAddNewTaskToReadyList>
 80055de:	e001      	b.n	80055e4 <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055e4:	69bb      	ldr	r3, [r7, #24]
	}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b009      	add	sp, #36	; 0x24
 80055ec:	bd90      	pop	{r4, r7, pc}
	...

080055f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	493b      	ldr	r1, [pc, #236]	; (80056f4 <prvInitialiseNewTask+0x104>)
 8005606:	468c      	mov	ip, r1
 8005608:	4463      	add	r3, ip
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	18d3      	adds	r3, r2, r3
 800560e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2207      	movs	r2, #7
 8005614:	4393      	bics	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2207      	movs	r2, #7
 800561c:	4013      	ands	r3, r2
 800561e:	d001      	beq.n	8005624 <prvInitialiseNewTask+0x34>
 8005620:	b672      	cpsid	i
 8005622:	e7fe      	b.n	8005622 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e013      	b.n	8005652 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	7818      	ldrb	r0, [r3, #0]
 8005632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005634:	2134      	movs	r1, #52	; 0x34
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	185b      	adds	r3, r3, r1
 800563c:	1c02      	adds	r2, r0, #0
 800563e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	18d3      	adds	r3, r2, r3
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d9e8      	bls.n	800562a <prvInitialiseNewTask+0x3a>
 8005658:	e000      	b.n	800565c <prvInitialiseNewTask+0x6c>
		{
			break;
 800565a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2243      	movs	r2, #67	; 0x43
 8005660:	2100      	movs	r1, #0
 8005662:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b06      	cmp	r3, #6
 8005668:	d901      	bls.n	800566e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800566a:	2306      	movs	r3, #6
 800566c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	3304      	adds	r3, #4
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff fdb9 	bl	80051f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	3318      	adds	r3, #24
 8005682:	0018      	movs	r0, r3
 8005684:	f7ff fdb4 	bl	80051f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2207      	movs	r2, #7
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	22a4      	movs	r2, #164	; 0xa4
 80056a2:	2100      	movs	r1, #0
 80056a4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	22a8      	movs	r2, #168	; 0xa8
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	3344      	adds	r3, #68	; 0x44
 80056b2:	2260      	movs	r2, #96	; 0x60
 80056b4:	2100      	movs	r1, #0
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 fe37 	bl	800632a <memset>
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	4a0e      	ldr	r2, [pc, #56]	; (80056f8 <prvInitialiseNewTask+0x108>)
 80056c0:	649a      	str	r2, [r3, #72]	; 0x48
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <prvInitialiseNewTask+0x10c>)
 80056c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <prvInitialiseNewTask+0x110>)
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7ff fe17 	bl	8005308 <pxPortInitialiseStack>
 80056da:	0002      	movs	r2, r0
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b006      	add	sp, #24
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	3fffffff 	.word	0x3fffffff
 80056f8:	080066c0 	.word	0x080066c0
 80056fc:	080066e0 	.word	0x080066e0
 8005700:	080066a0 	.word	0x080066a0

08005704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800570c:	f7ff fe98 	bl	8005440 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <prvAddNewTaskToReadyList+0xa0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <prvAddNewTaskToReadyList+0xa0>)
 8005718:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <prvAddNewTaskToReadyList+0xa4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005722:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <prvAddNewTaskToReadyList+0xa4>)
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <prvAddNewTaskToReadyList+0xa0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d110      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005730:	f000 fab0 	bl	8005c94 <prvInitialiseTaskLists>
 8005734:	e00d      	b.n	8005752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <prvAddNewTaskToReadyList+0xa8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800573e:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <prvAddNewTaskToReadyList+0xa4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d802      	bhi.n	8005752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800574c:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <prvAddNewTaskToReadyList+0xa4>)
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <prvAddNewTaskToReadyList+0xac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <prvAddNewTaskToReadyList+0xac>)
 800575a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <prvAddNewTaskToReadyList+0xb0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d903      	bls.n	8005770 <prvAddNewTaskToReadyList+0x6c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <prvAddNewTaskToReadyList+0xb0>)
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	0013      	movs	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	189b      	adds	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <prvAddNewTaskToReadyList+0xb4>)
 800577e:	189a      	adds	r2, r3, r2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	0019      	movs	r1, r3
 8005786:	0010      	movs	r0, r2
 8005788:	f7ff fd3d 	bl	8005206 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800578c:	f7ff fe6a 	bl	8005464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <prvAddNewTaskToReadyList+0xa8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <prvAddNewTaskToReadyList+0x98>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <prvAddNewTaskToReadyList+0xa4>)
 800579a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b002      	add	sp, #8
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20001598 	.word	0x20001598
 80057a8:	20001498 	.word	0x20001498
 80057ac:	200015a4 	.word	0x200015a4
 80057b0:	200015b4 	.word	0x200015b4
 80057b4:	200015a0 	.word	0x200015a0
 80057b8:	2000149c 	.word	0x2000149c

080057bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80057c4:	f7ff fe3c 	bl	8005440 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <vTaskDelete+0x18>
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <vTaskDelete+0xac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	e000      	b.n	80057d6 <vTaskDelete+0x1a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3304      	adds	r3, #4
 80057dc:	0018      	movs	r0, r3
 80057de:	f7ff fd6a 	bl	80052b6 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3318      	adds	r3, #24
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fd61 	bl	80052b6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <vTaskDelete+0xb0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <vTaskDelete+0xb0>)
 80057fc:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <vTaskDelete+0xac>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d10c      	bne.n	8005822 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	4b18      	ldr	r3, [pc, #96]	; (8005870 <vTaskDelete+0xb4>)
 800580e:	0011      	movs	r1, r2
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff fcf8 	bl	8005206 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <vTaskDelete+0xb8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	4b15      	ldr	r3, [pc, #84]	; (8005874 <vTaskDelete+0xb8>)
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e00a      	b.n	8005838 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <vTaskDelete+0xbc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1e5a      	subs	r2, r3, #1
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <vTaskDelete+0xbc>)
 800582a:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 faa2 	bl	8005d78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005834:	f000 faae 	bl	8005d94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005838:	f7ff fe14 	bl	8005464 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <vTaskDelete+0xc0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <vTaskDelete+0xac>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	429a      	cmp	r2, r3
 800584c:	d107      	bne.n	800585e <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <vTaskDelete+0xc4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <vTaskDelete+0x9e>
 8005856:	b672      	cpsid	i
 8005858:	e7fe      	b.n	8005858 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800585a:	f7ff fde1 	bl	8005420 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b004      	add	sp, #16
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	20001498 	.word	0x20001498
 800586c:	200015b4 	.word	0x200015b4
 8005870:	2000156c 	.word	0x2000156c
 8005874:	20001580 	.word	0x20001580
 8005878:	20001598 	.word	0x20001598
 800587c:	200015a4 	.word	0x200015a4
 8005880:	200015c0 	.word	0x200015c0

08005884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d010      	beq.n	80058b8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <vTaskDelay+0x48>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <vTaskDelay+0x1e>
 800589e:	b672      	cpsid	i
 80058a0:	e7fe      	b.n	80058a0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80058a2:	f000 f86d 	bl	8005980 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2100      	movs	r1, #0
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 fc2c 	bl	8006108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058b0:	f000 f872 	bl	8005998 <xTaskResumeAll>
 80058b4:	0003      	movs	r3, r0
 80058b6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80058be:	f7ff fdaf 	bl	8005420 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b004      	add	sp, #16
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	200015c0 	.word	0x200015c0

080058d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058de:	003a      	movs	r2, r7
 80058e0:	1d39      	adds	r1, r7, #4
 80058e2:	2308      	movs	r3, #8
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7fb fa00 	bl	8000cec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058ec:	683c      	ldr	r4, [r7, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	491b      	ldr	r1, [pc, #108]	; (8005960 <vTaskStartScheduler+0x90>)
 80058f4:	481b      	ldr	r0, [pc, #108]	; (8005964 <vTaskStartScheduler+0x94>)
 80058f6:	9202      	str	r2, [sp, #8]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	0022      	movs	r2, r4
 8005902:	f7ff fe35 	bl	8005570 <xTaskCreateStatic>
 8005906:	0002      	movs	r2, r0
 8005908:	4b17      	ldr	r3, [pc, #92]	; (8005968 <vTaskStartScheduler+0x98>)
 800590a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800590c:	4b16      	ldr	r3, [pc, #88]	; (8005968 <vTaskStartScheduler+0x98>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e001      	b.n	800591e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d113      	bne.n	800594c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005924:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <vTaskStartScheduler+0x9c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3344      	adds	r3, #68	; 0x44
 800592c:	001a      	movs	r2, r3
 800592e:	4b10      	ldr	r3, [pc, #64]	; (8005970 <vTaskStartScheduler+0xa0>)
 8005930:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <vTaskStartScheduler+0xa4>)
 8005934:	2201      	movs	r2, #1
 8005936:	4252      	negs	r2, r2
 8005938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <vTaskStartScheduler+0xa8>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <vTaskStartScheduler+0xac>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005946:	f7ff fd47 	bl	80053d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800594a:	e004      	b.n	8005956 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3301      	adds	r3, #1
 8005950:	d101      	bne.n	8005956 <vTaskStartScheduler+0x86>
 8005952:	b672      	cpsid	i
 8005954:	e7fe      	b.n	8005954 <vTaskStartScheduler+0x84>
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b005      	add	sp, #20
 800595c:	bd90      	pop	{r4, r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	08006628 	.word	0x08006628
 8005964:	08005c81 	.word	0x08005c81
 8005968:	200015bc 	.word	0x200015bc
 800596c:	20001498 	.word	0x20001498
 8005970:	2000001c 	.word	0x2000001c
 8005974:	200015b8 	.word	0x200015b8
 8005978:	200015a4 	.word	0x200015a4
 800597c:	2000159c 	.word	0x2000159c

08005980 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <vTaskSuspendAll+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	4b02      	ldr	r3, [pc, #8]	; (8005994 <vTaskSuspendAll+0x14>)
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200015c0 	.word	0x200015c0

08005998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059a6:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <xTaskResumeAll+0xec>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xTaskResumeAll+0x1a>
 80059ae:	b672      	cpsid	i
 80059b0:	e7fe      	b.n	80059b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059b2:	f7ff fd45 	bl	8005440 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059b6:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <xTaskResumeAll+0xec>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <xTaskResumeAll+0xec>)
 80059be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c0:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <xTaskResumeAll+0xec>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d155      	bne.n	8005a74 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059c8:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <xTaskResumeAll+0xf0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d051      	beq.n	8005a74 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059d0:	e02f      	b.n	8005a32 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <xTaskResumeAll+0xf4>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3318      	adds	r3, #24
 80059de:	0018      	movs	r0, r3
 80059e0:	f7ff fc69 	bl	80052b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3304      	adds	r3, #4
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff fc64 	bl	80052b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <xTaskResumeAll+0xf8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d903      	bls.n	8005a02 <xTaskResumeAll+0x6a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <xTaskResumeAll+0xf8>)
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	0013      	movs	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <xTaskResumeAll+0xfc>)
 8005a10:	189a      	adds	r2, r3, r2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3304      	adds	r3, #4
 8005a16:	0019      	movs	r1, r3
 8005a18:	0010      	movs	r0, r2
 8005a1a:	f7ff fbf4 	bl	8005206 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <xTaskResumeAll+0x100>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <xTaskResumeAll+0x104>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <xTaskResumeAll+0xf4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1cb      	bne.n	80059d2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a40:	f000 f9a8 	bl	8005d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a44:	4b16      	ldr	r3, [pc, #88]	; (8005aa0 <xTaskResumeAll+0x108>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00f      	beq.n	8005a70 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a50:	f000 f828 	bl	8005aa4 <xTaskIncrementTick>
 8005a54:	1e03      	subs	r3, r0, #0
 8005a56:	d002      	beq.n	8005a5e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005a58:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <xTaskResumeAll+0x104>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f2      	bne.n	8005a50 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <xTaskResumeAll+0x108>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <xTaskResumeAll+0x104>)
 8005a72:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a74:	f7ff fcf6 	bl	8005464 <vPortExitCritical>

	return xAlreadyYielded;
 8005a78:	687b      	ldr	r3, [r7, #4]
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b004      	add	sp, #16
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	200015c0 	.word	0x200015c0
 8005a88:	20001598 	.word	0x20001598
 8005a8c:	20001558 	.word	0x20001558
 8005a90:	200015a0 	.word	0x200015a0
 8005a94:	2000149c 	.word	0x2000149c
 8005a98:	20001498 	.word	0x20001498
 8005a9c:	200015ac 	.word	0x200015ac
 8005aa0:	200015a8 	.word	0x200015a8

08005aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <xTaskIncrementTick+0x104>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d000      	beq.n	8005ab8 <xTaskIncrementTick+0x14>
 8005ab6:	e06c      	b.n	8005b92 <xTaskIncrementTick+0xee>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab8:	4b3c      	ldr	r3, [pc, #240]	; (8005bac <xTaskIncrementTick+0x108>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac0:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <xTaskIncrementTick+0x108>)
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d117      	bne.n	8005afc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <xTaskIncrementTick+0x10c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <xTaskIncrementTick+0x36>
 8005ad6:	b672      	cpsid	i
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskIncrementTick+0x34>
 8005ada:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <xTaskIncrementTick+0x10c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	4b34      	ldr	r3, [pc, #208]	; (8005bb4 <xTaskIncrementTick+0x110>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <xTaskIncrementTick+0x10c>)
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <xTaskIncrementTick+0x110>)
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4b32      	ldr	r3, [pc, #200]	; (8005bb8 <xTaskIncrementTick+0x114>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	4b30      	ldr	r3, [pc, #192]	; (8005bb8 <xTaskIncrementTick+0x114>)
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f000 f94c 	bl	8005d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005afc:	4b2f      	ldr	r3, [pc, #188]	; (8005bbc <xTaskIncrementTick+0x118>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d34a      	bcc.n	8005b9c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <xTaskIncrementTick+0x10c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <xTaskIncrementTick+0x70>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <xTaskIncrementTick+0x72>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <xTaskIncrementTick+0x118>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4252      	negs	r2, r2
 8005b20:	601a      	str	r2, [r3, #0]
					break;
 8005b22:	e03b      	b.n	8005b9c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b24:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <xTaskIncrementTick+0x10c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d203      	bcs.n	8005b44 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <xTaskIncrementTick+0x118>)
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	601a      	str	r2, [r3, #0]
						break;
 8005b42:	e02b      	b.n	8005b9c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3304      	adds	r3, #4
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7ff fbb4 	bl	80052b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3318      	adds	r3, #24
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f7ff fbab 	bl	80052b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <xTaskIncrementTick+0x11c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d903      	bls.n	8005b74 <xTaskIncrementTick+0xd0>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <xTaskIncrementTick+0x11c>)
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	0013      	movs	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	189b      	adds	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <xTaskIncrementTick+0x120>)
 8005b82:	189a      	adds	r2, r3, r2
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	3304      	adds	r3, #4
 8005b88:	0019      	movs	r1, r3
 8005b8a:	0010      	movs	r0, r2
 8005b8c:	f7ff fb3b 	bl	8005206 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b90:	e7b9      	b.n	8005b06 <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <xTaskIncrementTick+0x124>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <xTaskIncrementTick+0x124>)
 8005b9a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b9c:	697b      	ldr	r3, [r7, #20]
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	200015c0 	.word	0x200015c0
 8005bac:	2000159c 	.word	0x2000159c
 8005bb0:	20001550 	.word	0x20001550
 8005bb4:	20001554 	.word	0x20001554
 8005bb8:	200015b0 	.word	0x200015b0
 8005bbc:	200015b8 	.word	0x200015b8
 8005bc0:	200015a0 	.word	0x200015a0
 8005bc4:	2000149c 	.word	0x2000149c
 8005bc8:	200015a8 	.word	0x200015a8

08005bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bd2:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <vTaskSwitchContext+0x9c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <vTaskSwitchContext+0xa0>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005be0:	e03d      	b.n	8005c5e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8005be2:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <vTaskSwitchContext+0xa0>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005be8:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <vTaskSwitchContext+0xa4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	e007      	b.n	8005c00 <vTaskSwitchContext+0x34>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <vTaskSwitchContext+0x2e>
 8005bf6:	b672      	cpsid	i
 8005bf8:	e7fe      	b.n	8005bf8 <vTaskSwitchContext+0x2c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	491c      	ldr	r1, [pc, #112]	; (8005c74 <vTaskSwitchContext+0xa8>)
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	0013      	movs	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	585b      	ldr	r3, [r3, r1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ee      	beq.n	8005bf0 <vTaskSwitchContext+0x24>
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	0013      	movs	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <vTaskSwitchContext+0xa8>)
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d104      	bne.n	8005c42 <vTaskSwitchContext+0x76>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <vTaskSwitchContext+0xac>)
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <vTaskSwitchContext+0xa4>)
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <vTaskSwitchContext+0xac>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3344      	adds	r3, #68	; 0x44
 8005c58:	001a      	movs	r2, r3
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <vTaskSwitchContext+0xb0>)
 8005c5c:	601a      	str	r2, [r3, #0]
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b002      	add	sp, #8
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	200015c0 	.word	0x200015c0
 8005c6c:	200015ac 	.word	0x200015ac
 8005c70:	200015a0 	.word	0x200015a0
 8005c74:	2000149c 	.word	0x2000149c
 8005c78:	20001498 	.word	0x20001498
 8005c7c:	2000001c 	.word	0x2000001c

08005c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c88:	f000 f848 	bl	8005d1c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005c8c:	f7ff fbc8 	bl	8005420 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005c90:	e7fa      	b.n	8005c88 <prvIdleTask+0x8>
	...

08005c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e00c      	b.n	8005cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	0013      	movs	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <prvInitialiseTaskLists+0x68>)
 8005cac:	189b      	adds	r3, r3, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7ff fa80 	bl	80051b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b06      	cmp	r3, #6
 8005cbe:	d9ef      	bls.n	8005ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <prvInitialiseTaskLists+0x6c>)
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7ff fa76 	bl	80051b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <prvInitialiseTaskLists+0x70>)
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f7ff fa72 	bl	80051b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <prvInitialiseTaskLists+0x74>)
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff fa6e 	bl	80051b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <prvInitialiseTaskLists+0x78>)
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7ff fa6a 	bl	80051b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <prvInitialiseTaskLists+0x7c>)
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7ff fa66 	bl	80051b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <prvInitialiseTaskLists+0x80>)
 8005cea:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <prvInitialiseTaskLists+0x6c>)
 8005cec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <prvInitialiseTaskLists+0x84>)
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <prvInitialiseTaskLists+0x70>)
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	2000149c 	.word	0x2000149c
 8005d00:	20001528 	.word	0x20001528
 8005d04:	2000153c 	.word	0x2000153c
 8005d08:	20001558 	.word	0x20001558
 8005d0c:	2000156c 	.word	0x2000156c
 8005d10:	20001584 	.word	0x20001584
 8005d14:	20001550 	.word	0x20001550
 8005d18:	20001554 	.word	0x20001554

08005d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d22:	e01a      	b.n	8005d5a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005d24:	f7ff fb8c 	bl	8005440 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <prvCheckTasksWaitingTermination+0x50>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7ff fabe 	bl	80052b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <prvCheckTasksWaitingTermination+0x54>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	1e5a      	subs	r2, r3, #1
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <prvCheckTasksWaitingTermination+0x54>)
 8005d42:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d4c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005d4e:	f7ff fb89 	bl	8005464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f80f 	bl	8005d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e0      	bne.n	8005d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b002      	add	sp, #8
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	2000156c 	.word	0x2000156c
 8005d70:	20001598 	.word	0x20001598
 8005d74:	20001580 	.word	0x20001580

08005d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3344      	adds	r3, #68	; 0x44
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fb31 	bl	80063ec <_reclaim_reent>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b002      	add	sp, #8
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <prvResetNextTaskUnblockTime+0x40>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <prvResetNextTaskUnblockTime+0x14>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <prvResetNextTaskUnblockTime+0x16>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvResetNextTaskUnblockTime+0x44>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	4252      	negs	r2, r2
 8005db4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005db6:	e008      	b.n	8005dca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <prvResetNextTaskUnblockTime+0x40>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <prvResetNextTaskUnblockTime+0x44>)
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b002      	add	sp, #8
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20001550 	.word	0x20001550
 8005dd8:	200015b8 	.word	0x200015b8

08005ddc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005dea:	f7ff fb29 	bl	8005440 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	22a8      	movs	r2, #168	; 0xa8
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d017      	beq.n	8005e2c <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	22a4      	movs	r2, #164	; 0xa4
 8005e02:	589a      	ldr	r2, [r3, r2]
 8005e04:	68f9      	ldr	r1, [r7, #12]
 8005e06:	43c9      	mvns	r1, r1
 8005e08:	400a      	ands	r2, r1
 8005e0a:	21a4      	movs	r1, #164	; 0xa4
 8005e0c:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22a8      	movs	r2, #168	; 0xa8
 8005e14:	2101      	movs	r1, #1
 8005e16:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d006      	beq.n	8005e2c <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2101      	movs	r1, #1
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f970 	bl	8006108 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005e28:	f7ff fafa 	bl	8005420 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005e2c:	f7ff fb1a 	bl	8005464 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005e30:	f7ff fb06 	bl	8005440 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005e3a:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22a4      	movs	r2, #164	; 0xa4
 8005e40:	589a      	ldr	r2, [r3, r2]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	22a8      	movs	r2, #168	; 0xa8
 8005e4c:	5c9b      	ldrb	r3, [r3, r2]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d002      	beq.n	8005e5a <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e00a      	b.n	8005e70 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	22a4      	movs	r2, #164	; 0xa4
 8005e60:	589a      	ldr	r2, [r3, r2]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	43c9      	mvns	r1, r1
 8005e66:	400a      	ands	r2, r1
 8005e68:	21a4      	movs	r1, #164	; 0xa4
 8005e6a:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <xTaskNotifyWait+0xac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	22a8      	movs	r2, #168	; 0xa8
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8005e7a:	f7ff faf3 	bl	8005464 <vPortExitCritical>

		return xReturn;
 8005e7e:	697b      	ldr	r3, [r7, #20]
	}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b006      	add	sp, #24
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20001498 	.word	0x20001498

08005e8c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xTaskGenericNotify+0x1e>
 8005ea6:	b672      	cpsid	i
 8005ea8:	e7fe      	b.n	8005ea8 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8005eae:	f7ff fac7 	bl	8005440 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	22a4      	movs	r2, #164	; 0xa4
 8005ebc:	589a      	ldr	r2, [r3, r2]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ec2:	2317      	movs	r3, #23
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	21a8      	movs	r1, #168	; 0xa8
 8005eca:	5c52      	ldrb	r2, [r2, r1]
 8005ecc:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	22a8      	movs	r2, #168	; 0xa8
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005ed6:	1dfb      	adds	r3, r7, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d828      	bhi.n	8005f30 <xTaskGenericNotify+0xa4>
 8005ede:	009a      	lsls	r2, r3, #2
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <xTaskGenericNotify+0x108>)
 8005ee2:	18d3      	adds	r3, r2, r3
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	22a4      	movs	r2, #164	; 0xa4
 8005eec:	589a      	ldr	r2, [r3, r2]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	21a4      	movs	r1, #164	; 0xa4
 8005ef6:	505a      	str	r2, [r3, r1]
					break;
 8005ef8:	e01a      	b.n	8005f30 <xTaskGenericNotify+0xa4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	22a4      	movs	r2, #164	; 0xa4
 8005efe:	589b      	ldr	r3, [r3, r2]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	21a4      	movs	r1, #164	; 0xa4
 8005f06:	505a      	str	r2, [r3, r1]
					break;
 8005f08:	e012      	b.n	8005f30 <xTaskGenericNotify+0xa4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	21a4      	movs	r1, #164	; 0xa4
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	505a      	str	r2, [r3, r1]
					break;
 8005f12:	e00d      	b.n	8005f30 <xTaskGenericNotify+0xa4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f14:	2317      	movs	r3, #23
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d004      	beq.n	8005f28 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	21a4      	movs	r1, #164	; 0xa4
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005f26:	e003      	b.n	8005f30 <xTaskGenericNotify+0xa4>
						xReturn = pdFAIL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
					break;
 8005f2c:	e000      	b.n	8005f30 <xTaskGenericNotify+0xa4>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005f2e:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f30:	2317      	movs	r3, #23
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d124      	bne.n	8005f84 <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f7ff f9b9 	bl	80052b6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <xTaskGenericNotify+0x10c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <xTaskGenericNotify+0xcc>
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <xTaskGenericNotify+0x10c>)
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <xTaskGenericNotify+0x110>)
 8005f66:	189a      	adds	r2, r3, r2
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	0010      	movs	r0, r2
 8005f70:	f7ff f949 	bl	8005206 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <xTaskGenericNotify+0xf4>
 8005f7c:	b672      	cpsid	i
 8005f7e:	e7fe      	b.n	8005f7e <xTaskGenericNotify+0xf2>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <xTaskGenericNotify+0x114>)
 8005f82:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f84:	f7ff fa6e 	bl	8005464 <vPortExitCritical>

		return xReturn;
 8005f88:	69fb      	ldr	r3, [r7, #28]
	}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b008      	add	sp, #32
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	08006648 	.word	0x08006648
 8005f98:	200015a0 	.word	0x200015a0
 8005f9c:	2000149c 	.word	0x2000149c
 8005fa0:	20001498 	.word	0x20001498

08005fa4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	1dfb      	adds	r3, r7, #7
 8005fb2:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xTaskGenericNotifyFromISR+0x1e>
 8005fbe:	b672      	cpsid	i
 8005fc0:	e7fe      	b.n	8005fc0 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc6:	f7ff fa65 	bl	8005494 <ulSetInterruptMaskFromISR>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	22a4      	movs	r2, #164	; 0xa4
 8005fd8:	589a      	ldr	r2, [r3, r2]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005fde:	2313      	movs	r3, #19
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	21a8      	movs	r1, #168	; 0xa8
 8005fe6:	5c52      	ldrb	r2, [r2, r1]
 8005fe8:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	22a8      	movs	r2, #168	; 0xa8
 8005fee:	2102      	movs	r1, #2
 8005ff0:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d828      	bhi.n	800604c <xTaskGenericNotifyFromISR+0xa8>
 8005ffa:	009a      	lsls	r2, r3, #2
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <xTaskGenericNotifyFromISR+0x148>)
 8005ffe:	18d3      	adds	r3, r2, r3
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	22a4      	movs	r2, #164	; 0xa4
 8006008:	589a      	ldr	r2, [r3, r2]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	431a      	orrs	r2, r3
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	21a4      	movs	r1, #164	; 0xa4
 8006012:	505a      	str	r2, [r3, r1]
					break;
 8006014:	e01a      	b.n	800604c <xTaskGenericNotifyFromISR+0xa8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	22a4      	movs	r2, #164	; 0xa4
 800601a:	589b      	ldr	r3, [r3, r2]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	21a4      	movs	r1, #164	; 0xa4
 8006022:	505a      	str	r2, [r3, r1]
					break;
 8006024:	e012      	b.n	800604c <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	21a4      	movs	r1, #164	; 0xa4
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	505a      	str	r2, [r3, r1]
					break;
 800602e:	e00d      	b.n	800604c <xTaskGenericNotifyFromISR+0xa8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006030:	2313      	movs	r3, #19
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d004      	beq.n	8006044 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	21a4      	movs	r1, #164	; 0xa4
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006042:	e003      	b.n	800604c <xTaskGenericNotifyFromISR+0xa8>
						xReturn = pdFAIL;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
					break;
 8006048:	e000      	b.n	800604c <xTaskGenericNotifyFromISR+0xa8>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 800604a:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800604c:	2313      	movs	r3, #19
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d140      	bne.n	80060d8 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <xTaskGenericNotifyFromISR+0xbe>
 800605e:	b672      	cpsid	i
 8006060:	e7fe      	b.n	8006060 <xTaskGenericNotifyFromISR+0xbc>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <xTaskGenericNotifyFromISR+0x14c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11d      	bne.n	80060a6 <xTaskGenericNotifyFromISR+0x102>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3304      	adds	r3, #4
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff f921 	bl	80052b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <xTaskGenericNotifyFromISR+0x150>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d903      	bls.n	8006088 <xTaskGenericNotifyFromISR+0xe4>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <xTaskGenericNotifyFromISR+0x150>)
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	0013      	movs	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	189b      	adds	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <xTaskGenericNotifyFromISR+0x154>)
 8006096:	189a      	adds	r2, r3, r2
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	3304      	adds	r3, #4
 800609c:	0019      	movs	r1, r3
 800609e:	0010      	movs	r0, r2
 80060a0:	f7ff f8b1 	bl	8005206 <vListInsertEnd>
 80060a4:	e007      	b.n	80060b6 <xTaskGenericNotifyFromISR+0x112>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3318      	adds	r3, #24
 80060aa:	001a      	movs	r2, r3
 80060ac:	4b13      	ldr	r3, [pc, #76]	; (80060fc <xTaskGenericNotifyFromISR+0x158>)
 80060ae:	0011      	movs	r1, r2
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7ff f8a8 	bl	8005206 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <xTaskGenericNotifyFromISR+0x15c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d909      	bls.n	80060d8 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e002      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x134>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <xTaskGenericNotifyFromISR+0x160>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff f9e0 	bl	80054a0 <vClearInterruptMaskFromISR>

		return xReturn;
 80060e0:	69fb      	ldr	r3, [r7, #28]
	}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b008      	add	sp, #32
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	0800665c 	.word	0x0800665c
 80060f0:	200015c0 	.word	0x200015c0
 80060f4:	200015a0 	.word	0x200015a0
 80060f8:	2000149c 	.word	0x2000149c
 80060fc:	20001558 	.word	0x20001558
 8006100:	20001498 	.word	0x20001498
 8006104:	200015ac 	.word	0x200015ac

08006108 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006112:	4b21      	ldr	r3, [pc, #132]	; (8006198 <prvAddCurrentTaskToDelayedList+0x90>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006118:	4b20      	ldr	r3, [pc, #128]	; (800619c <prvAddCurrentTaskToDelayedList+0x94>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3304      	adds	r3, #4
 800611e:	0018      	movs	r0, r3
 8006120:	f7ff f8c9 	bl	80052b6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3301      	adds	r3, #1
 8006128:	d10b      	bne.n	8006142 <prvAddCurrentTaskToDelayedList+0x3a>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <prvAddCurrentTaskToDelayedList+0x94>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f7ff f863 	bl	8005206 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006140:	e026      	b.n	8006190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	18d3      	adds	r3, r2, r3
 8006148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <prvAddCurrentTaskToDelayedList+0x94>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	429a      	cmp	r2, r3
 8006158:	d209      	bcs.n	800616e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	0019      	movs	r1, r3
 8006166:	0010      	movs	r0, r2
 8006168:	f7ff f86f 	bl	800524a <vListInsert>
}
 800616c:	e010      	b.n	8006190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvAddCurrentTaskToDelayedList+0x94>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3304      	adds	r3, #4
 8006178:	0019      	movs	r1, r3
 800617a:	0010      	movs	r0, r2
 800617c:	f7ff f865 	bl	800524a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	d202      	bcs.n	8006190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	601a      	str	r2, [r3, #0]
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b004      	add	sp, #16
 8006196:	bd80      	pop	{r7, pc}
 8006198:	2000159c 	.word	0x2000159c
 800619c:	20001498 	.word	0x20001498
 80061a0:	20001584 	.word	0x20001584
 80061a4:	20001554 	.word	0x20001554
 80061a8:	20001550 	.word	0x20001550
 80061ac:	200015b8 	.word	0x200015b8

080061b0 <_ZN3Enc3RSAC1Ev>:
 */

#include "Encryption.h"
#include "primes.h"

Enc::RSA::RSA() {}
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 f820 	bl	8006200 <_ZN3Enc10EncryptionC1Ev>
 80061c0:	4a03      	ldr	r2, [pc, #12]	; (80061d0 <_ZN3Enc3RSAC1Ev+0x20>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b002      	add	sp, #8
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08006678 	.word	0x08006678

080061d4 <_ZN3Enc3RSA7encryptEPKhjPhRj>:
Enc::RSA::RSA(RSAKey_t& pub, RSAKey_t& priv) {}
void Enc::RSA::encrypt(const uint8_t* plain, const size_t pLen,
									uint8_t* enc, size_t& eLen) {}
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b004      	add	sp, #16
 80061e8:	bd80      	pop	{r7, pc}

080061ea <_ZN3Enc3RSA7decryptEPKhjPhRj>:
void Enc::RSA::decrypt(const uint8_t* enc, const size_t eLen,
									uint8_t* plain, size_t& pLen) {}
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	46c0      	nop			; (mov r8, r8)
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b004      	add	sp, #16
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN3Enc10EncryptionC1Ev>:

Enc::Encryption::Encryption() {}
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4a03      	ldr	r2, [pc, #12]	; (8006218 <_ZN3Enc10EncryptionC1Ev+0x18>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}
 8006218:	08006690 	.word	0x08006690

0800621c <_ZN3Enc10EncryptionD1Ev>:
Enc::Encryption::~Encryption() {}
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	4a03      	ldr	r2, [pc, #12]	; (8006234 <_ZN3Enc10EncryptionD1Ev+0x18>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0018      	movs	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}
 8006234:	08006690 	.word	0x08006690

08006238 <_ZN3Enc10EncryptionD0Ev>:
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	0018      	movs	r0, r3
 8006244:	f7ff ffea 	bl	800621c <_ZN3Enc10EncryptionD1Ev>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2104      	movs	r1, #4
 800624c:	0018      	movs	r0, r3
 800624e:	f000 f81b 	bl	8006288 <_ZdlPvj>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b002      	add	sp, #8
 800625a:	bd80      	pop	{r7, pc}

0800625c <_ZN3Enc10Encryption7encryptEPKhjPhRj>:
void Enc::Encryption::encrypt(const uint8_t* plain, const size_t pLen,
									uint8_t* enc, size_t& eLen) {}
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	46bd      	mov	sp, r7
 800626e:	b004      	add	sp, #16
 8006270:	bd80      	pop	{r7, pc}

08006272 <_ZN3Enc10Encryption7decryptEPKhjPhRj>:
void Enc::Encryption::decrypt(const uint8_t* enc, const size_t eLen,
									uint8_t* plain, size_t& pLen) {}
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b004      	add	sp, #16
 8006286:	bd80      	pop	{r7, pc}

08006288 <_ZdlPvj>:
 8006288:	b510      	push	{r4, lr}
 800628a:	f000 f804 	bl	8006296 <_ZdlPv>
 800628e:	bd10      	pop	{r4, pc}

08006290 <_ZSt25__throw_bad_function_callv>:
 8006290:	b510      	push	{r4, lr}
 8006292:	f000 f804 	bl	800629e <abort>

08006296 <_ZdlPv>:
 8006296:	b510      	push	{r4, lr}
 8006298:	f000 f834 	bl	8006304 <free>
 800629c:	bd10      	pop	{r4, pc}

0800629e <abort>:
 800629e:	2006      	movs	r0, #6
 80062a0:	b510      	push	{r4, lr}
 80062a2:	f000 f933 	bl	800650c <raise>
 80062a6:	2001      	movs	r0, #1
 80062a8:	f7fb fad4 	bl	8001854 <_exit>

080062ac <__errno>:
 80062ac:	4b01      	ldr	r3, [pc, #4]	; (80062b4 <__errno+0x8>)
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	4770      	bx	lr
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	2000001c 	.word	0x2000001c

080062b8 <__libc_init_array>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	2600      	movs	r6, #0
 80062bc:	4d0c      	ldr	r5, [pc, #48]	; (80062f0 <__libc_init_array+0x38>)
 80062be:	4c0d      	ldr	r4, [pc, #52]	; (80062f4 <__libc_init_array+0x3c>)
 80062c0:	1b64      	subs	r4, r4, r5
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	42a6      	cmp	r6, r4
 80062c6:	d109      	bne.n	80062dc <__libc_init_array+0x24>
 80062c8:	2600      	movs	r6, #0
 80062ca:	f000 f94f 	bl	800656c <_init>
 80062ce:	4d0a      	ldr	r5, [pc, #40]	; (80062f8 <__libc_init_array+0x40>)
 80062d0:	4c0a      	ldr	r4, [pc, #40]	; (80062fc <__libc_init_array+0x44>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	d105      	bne.n	80062e6 <__libc_init_array+0x2e>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	00b3      	lsls	r3, r6, #2
 80062de:	58eb      	ldr	r3, [r5, r3]
 80062e0:	4798      	blx	r3
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7ee      	b.n	80062c4 <__libc_init_array+0xc>
 80062e6:	00b3      	lsls	r3, r6, #2
 80062e8:	58eb      	ldr	r3, [r5, r3]
 80062ea:	4798      	blx	r3
 80062ec:	3601      	adds	r6, #1
 80062ee:	e7f2      	b.n	80062d6 <__libc_init_array+0x1e>
 80062f0:	08006700 	.word	0x08006700
 80062f4:	08006700 	.word	0x08006700
 80062f8:	08006700 	.word	0x08006700
 80062fc:	08006708 	.word	0x08006708

08006300 <__retarget_lock_acquire_recursive>:
 8006300:	4770      	bx	lr

08006302 <__retarget_lock_release_recursive>:
 8006302:	4770      	bx	lr

08006304 <free>:
 8006304:	b510      	push	{r4, lr}
 8006306:	4b03      	ldr	r3, [pc, #12]	; (8006314 <free+0x10>)
 8006308:	0001      	movs	r1, r0
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	f000 f816 	bl	800633c <_free_r>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	2000001c 	.word	0x2000001c

08006318 <memcpy>:
 8006318:	2300      	movs	r3, #0
 800631a:	b510      	push	{r4, lr}
 800631c:	429a      	cmp	r2, r3
 800631e:	d100      	bne.n	8006322 <memcpy+0xa>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	5ccc      	ldrb	r4, [r1, r3]
 8006324:	54c4      	strb	r4, [r0, r3]
 8006326:	3301      	adds	r3, #1
 8006328:	e7f8      	b.n	800631c <memcpy+0x4>

0800632a <memset>:
 800632a:	0003      	movs	r3, r0
 800632c:	1882      	adds	r2, r0, r2
 800632e:	4293      	cmp	r3, r2
 8006330:	d100      	bne.n	8006334 <memset+0xa>
 8006332:	4770      	bx	lr
 8006334:	7019      	strb	r1, [r3, #0]
 8006336:	3301      	adds	r3, #1
 8006338:	e7f9      	b.n	800632e <memset+0x4>
	...

0800633c <_free_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	0005      	movs	r5, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	d010      	beq.n	8006366 <_free_r+0x2a>
 8006344:	1f0c      	subs	r4, r1, #4
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	da00      	bge.n	800634e <_free_r+0x12>
 800634c:	18e4      	adds	r4, r4, r3
 800634e:	0028      	movs	r0, r5
 8006350:	f000 f8fc 	bl	800654c <__malloc_lock>
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <_free_r+0x90>)
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <_free_r+0x2c>
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	6014      	str	r4, [r2, #0]
 8006360:	0028      	movs	r0, r5
 8006362:	f000 f8fb 	bl	800655c <__malloc_unlock>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	42a3      	cmp	r3, r4
 800636a:	d908      	bls.n	800637e <_free_r+0x42>
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	1860      	adds	r0, r4, r1
 8006370:	4283      	cmp	r3, r0
 8006372:	d1f3      	bne.n	800635c <_free_r+0x20>
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	1841      	adds	r1, r0, r1
 800637a:	6021      	str	r1, [r4, #0]
 800637c:	e7ee      	b.n	800635c <_free_r+0x20>
 800637e:	001a      	movs	r2, r3
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <_free_r+0x4e>
 8006386:	42a3      	cmp	r3, r4
 8006388:	d9f9      	bls.n	800637e <_free_r+0x42>
 800638a:	6811      	ldr	r1, [r2, #0]
 800638c:	1850      	adds	r0, r2, r1
 800638e:	42a0      	cmp	r0, r4
 8006390:	d10b      	bne.n	80063aa <_free_r+0x6e>
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1809      	adds	r1, r1, r0
 8006396:	1850      	adds	r0, r2, r1
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	4283      	cmp	r3, r0
 800639c:	d1e0      	bne.n	8006360 <_free_r+0x24>
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	1841      	adds	r1, r0, r1
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	6053      	str	r3, [r2, #4]
 80063a8:	e7da      	b.n	8006360 <_free_r+0x24>
 80063aa:	42a0      	cmp	r0, r4
 80063ac:	d902      	bls.n	80063b4 <_free_r+0x78>
 80063ae:	230c      	movs	r3, #12
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	e7d5      	b.n	8006360 <_free_r+0x24>
 80063b4:	6821      	ldr	r1, [r4, #0]
 80063b6:	1860      	adds	r0, r4, r1
 80063b8:	4283      	cmp	r3, r0
 80063ba:	d103      	bne.n	80063c4 <_free_r+0x88>
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	1841      	adds	r1, r0, r1
 80063c2:	6021      	str	r1, [r4, #0]
 80063c4:	6063      	str	r3, [r4, #4]
 80063c6:	6054      	str	r4, [r2, #4]
 80063c8:	e7ca      	b.n	8006360 <_free_r+0x24>
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	200015c8 	.word	0x200015c8

080063d0 <cleanup_glue>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	000d      	movs	r5, r1
 80063d4:	6809      	ldr	r1, [r1, #0]
 80063d6:	0004      	movs	r4, r0
 80063d8:	2900      	cmp	r1, #0
 80063da:	d001      	beq.n	80063e0 <cleanup_glue+0x10>
 80063dc:	f7ff fff8 	bl	80063d0 <cleanup_glue>
 80063e0:	0029      	movs	r1, r5
 80063e2:	0020      	movs	r0, r4
 80063e4:	f7ff ffaa 	bl	800633c <_free_r>
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080063ec <_reclaim_reent>:
 80063ec:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <_reclaim_reent+0xc8>)
 80063ee:	b570      	push	{r4, r5, r6, lr}
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	0004      	movs	r4, r0
 80063f4:	4283      	cmp	r3, r0
 80063f6:	d049      	beq.n	800648c <_reclaim_reent+0xa0>
 80063f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <_reclaim_reent+0x28>
 80063fe:	2500      	movs	r5, #0
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	42ab      	cmp	r3, r5
 8006404:	d147      	bne.n	8006496 <_reclaim_reent+0xaa>
 8006406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	2900      	cmp	r1, #0
 800640c:	d002      	beq.n	8006414 <_reclaim_reent+0x28>
 800640e:	0020      	movs	r0, r4
 8006410:	f7ff ff94 	bl	800633c <_free_r>
 8006414:	6961      	ldr	r1, [r4, #20]
 8006416:	2900      	cmp	r1, #0
 8006418:	d002      	beq.n	8006420 <_reclaim_reent+0x34>
 800641a:	0020      	movs	r0, r4
 800641c:	f7ff ff8e 	bl	800633c <_free_r>
 8006420:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006422:	2900      	cmp	r1, #0
 8006424:	d002      	beq.n	800642c <_reclaim_reent+0x40>
 8006426:	0020      	movs	r0, r4
 8006428:	f7ff ff88 	bl	800633c <_free_r>
 800642c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800642e:	2900      	cmp	r1, #0
 8006430:	d002      	beq.n	8006438 <_reclaim_reent+0x4c>
 8006432:	0020      	movs	r0, r4
 8006434:	f7ff ff82 	bl	800633c <_free_r>
 8006438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800643a:	2900      	cmp	r1, #0
 800643c:	d002      	beq.n	8006444 <_reclaim_reent+0x58>
 800643e:	0020      	movs	r0, r4
 8006440:	f7ff ff7c 	bl	800633c <_free_r>
 8006444:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006446:	2900      	cmp	r1, #0
 8006448:	d002      	beq.n	8006450 <_reclaim_reent+0x64>
 800644a:	0020      	movs	r0, r4
 800644c:	f7ff ff76 	bl	800633c <_free_r>
 8006450:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006452:	2900      	cmp	r1, #0
 8006454:	d002      	beq.n	800645c <_reclaim_reent+0x70>
 8006456:	0020      	movs	r0, r4
 8006458:	f7ff ff70 	bl	800633c <_free_r>
 800645c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800645e:	2900      	cmp	r1, #0
 8006460:	d002      	beq.n	8006468 <_reclaim_reent+0x7c>
 8006462:	0020      	movs	r0, r4
 8006464:	f7ff ff6a 	bl	800633c <_free_r>
 8006468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646a:	2900      	cmp	r1, #0
 800646c:	d002      	beq.n	8006474 <_reclaim_reent+0x88>
 800646e:	0020      	movs	r0, r4
 8006470:	f7ff ff64 	bl	800633c <_free_r>
 8006474:	69a3      	ldr	r3, [r4, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <_reclaim_reent+0xa0>
 800647a:	0020      	movs	r0, r4
 800647c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800647e:	4798      	blx	r3
 8006480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006482:	2900      	cmp	r1, #0
 8006484:	d002      	beq.n	800648c <_reclaim_reent+0xa0>
 8006486:	0020      	movs	r0, r4
 8006488:	f7ff ffa2 	bl	80063d0 <cleanup_glue>
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	5949      	ldr	r1, [r1, r5]
 8006490:	2900      	cmp	r1, #0
 8006492:	d108      	bne.n	80064a6 <_reclaim_reent+0xba>
 8006494:	3504      	adds	r5, #4
 8006496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	2d80      	cmp	r5, #128	; 0x80
 800649c:	d1f7      	bne.n	800648e <_reclaim_reent+0xa2>
 800649e:	0020      	movs	r0, r4
 80064a0:	f7ff ff4c 	bl	800633c <_free_r>
 80064a4:	e7af      	b.n	8006406 <_reclaim_reent+0x1a>
 80064a6:	680e      	ldr	r6, [r1, #0]
 80064a8:	0020      	movs	r0, r4
 80064aa:	f7ff ff47 	bl	800633c <_free_r>
 80064ae:	0031      	movs	r1, r6
 80064b0:	e7ee      	b.n	8006490 <_reclaim_reent+0xa4>
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	2000001c 	.word	0x2000001c

080064b8 <_raise_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	0004      	movs	r4, r0
 80064bc:	000d      	movs	r5, r1
 80064be:	291f      	cmp	r1, #31
 80064c0:	d904      	bls.n	80064cc <_raise_r+0x14>
 80064c2:	2316      	movs	r3, #22
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	2001      	movs	r0, #1
 80064c8:	4240      	negs	r0, r0
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <_raise_r+0x24>
 80064d2:	008a      	lsls	r2, r1, #2
 80064d4:	189b      	adds	r3, r3, r2
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	2a00      	cmp	r2, #0
 80064da:	d108      	bne.n	80064ee <_raise_r+0x36>
 80064dc:	0020      	movs	r0, r4
 80064de:	f000 f831 	bl	8006544 <_getpid_r>
 80064e2:	002a      	movs	r2, r5
 80064e4:	0001      	movs	r1, r0
 80064e6:	0020      	movs	r0, r4
 80064e8:	f000 f81a 	bl	8006520 <_kill_r>
 80064ec:	e7ed      	b.n	80064ca <_raise_r+0x12>
 80064ee:	2000      	movs	r0, #0
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	d0ea      	beq.n	80064ca <_raise_r+0x12>
 80064f4:	1c51      	adds	r1, r2, #1
 80064f6:	d103      	bne.n	8006500 <_raise_r+0x48>
 80064f8:	2316      	movs	r3, #22
 80064fa:	3001      	adds	r0, #1
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	e7e4      	b.n	80064ca <_raise_r+0x12>
 8006500:	2400      	movs	r4, #0
 8006502:	0028      	movs	r0, r5
 8006504:	601c      	str	r4, [r3, #0]
 8006506:	4790      	blx	r2
 8006508:	0020      	movs	r0, r4
 800650a:	e7de      	b.n	80064ca <_raise_r+0x12>

0800650c <raise>:
 800650c:	b510      	push	{r4, lr}
 800650e:	4b03      	ldr	r3, [pc, #12]	; (800651c <raise+0x10>)
 8006510:	0001      	movs	r1, r0
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	f7ff ffd0 	bl	80064b8 <_raise_r>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	2000001c 	.word	0x2000001c

08006520 <_kill_r>:
 8006520:	2300      	movs	r3, #0
 8006522:	b570      	push	{r4, r5, r6, lr}
 8006524:	4d06      	ldr	r5, [pc, #24]	; (8006540 <_kill_r+0x20>)
 8006526:	0004      	movs	r4, r0
 8006528:	0008      	movs	r0, r1
 800652a:	0011      	movs	r1, r2
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f7fb f981 	bl	8001834 <_kill>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d103      	bne.n	800653e <_kill_r+0x1e>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d000      	beq.n	800653e <_kill_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	200015cc 	.word	0x200015cc

08006544 <_getpid_r>:
 8006544:	b510      	push	{r4, lr}
 8006546:	f7fb f96f 	bl	8001828 <_getpid>
 800654a:	bd10      	pop	{r4, pc}

0800654c <__malloc_lock>:
 800654c:	b510      	push	{r4, lr}
 800654e:	4802      	ldr	r0, [pc, #8]	; (8006558 <__malloc_lock+0xc>)
 8006550:	f7ff fed6 	bl	8006300 <__retarget_lock_acquire_recursive>
 8006554:	bd10      	pop	{r4, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	200015c4 	.word	0x200015c4

0800655c <__malloc_unlock>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4802      	ldr	r0, [pc, #8]	; (8006568 <__malloc_unlock+0xc>)
 8006560:	f7ff fecf 	bl	8006302 <__retarget_lock_release_recursive>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	200015c4 	.word	0x200015c4

0800656c <_init>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr

08006578 <_fini>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr
