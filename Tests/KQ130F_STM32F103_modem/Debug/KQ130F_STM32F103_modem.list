
KQ130F_STM32F103_modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005358  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005558  08005558  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005558  08005558  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b20  20000074  080055d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b94  080055d4  00021b94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001785b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363a  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052e0  00000000  00000000  0003d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001606b  00000000  00000000  00042af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009797d  00000000  00000000  00058b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f04d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae8  00000000  00000000  000f0528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005450 	.word	0x08005450

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005450 	.word	0x08005450

08000150 <_Z7ledFuncPv>:
void ledFunc(void* arg);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledFunc(void* arg) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin);
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	4805      	ldr	r0, [pc, #20]	; (8000174 <_Z7ledFuncPv+0x24>)
 800015e:	f000 fe7d 	bl	8000e5c <HAL_GPIO_TogglePin>
	osDelayUntil(pdMS_TO_TICKS(500));
 8000162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000166:	f002 fc77 	bl	8002a58 <osDelayUntil>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40011000 	.word	0x40011000

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b08a      	sub	sp, #40	; 0x28
 800017c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017e:	f000 fba3 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000182:	f000 f833 	bl	80001ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000186:	f000 f971 	bl	800046c <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 800018a:	f000 f89f 	bl	80002cc <_ZL11MX_CRC_Initv>
  MX_USART1_UART_Init();
 800018e:	f000 f90f 	bl	80003b0 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8000192:	f000 f93d 	bl	8000410 <_ZL19MX_USART3_UART_Initv>
  MX_RTC_Init();
 8000196:	f000 f8b1 	bl	80002fc <_ZL11MX_RTC_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800019a:	f002 fb1f 	bl	80027dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <main+0x60>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x64>)
 80001a4:	f002 fb80 	bl	80028a8 <osThreadNew>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <main+0x68>)
 80001ac:	6013      	str	r3, [r2, #0]
  osThreadAttr_t properties = { .name = "ledBlinkTask", .stack_size = 128, .priority = (osPriority_t) osPriorityNormal};
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	2224      	movs	r2, #36	; 0x24
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f005 f885 	bl	80052c4 <memset>
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <main+0x6c>)
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	2380      	movs	r3, #128	; 0x80
 80001c0:	61bb      	str	r3, [r7, #24]
 80001c2:	2318      	movs	r3, #24
 80001c4:	61fb      	str	r3, [r7, #28]
  osThreadNew(ledFunc, NULL, &properties);
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	461a      	mov	r2, r3
 80001ca:	2100      	movs	r1, #0
 80001cc:	4806      	ldr	r0, [pc, #24]	; (80001e8 <main+0x70>)
 80001ce:	f002 fb6b 	bl	80028a8 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d2:	f002 fb35 	bl	8002840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d6:	e7fe      	b.n	80001d6 <main+0x5e>
 80001d8:	080054bc 	.word	0x080054bc
 80001dc:	08000539 	.word	0x08000539
 80001e0:	20000134 	.word	0x20000134
 80001e4:	08005474 	.word	0x08005474
 80001e8:	08000151 	.word	0x08000151

080001ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	; 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f005 f862 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800021c:	2309      	movs	r3, #9
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fe2e 	bl	8000ea8 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	bf14      	ite	ne
 8000252:	2301      	movne	r3, #1
 8000254:	2300      	moveq	r3, #0
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800025c:	f000 f986 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800026c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000270:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000272:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000276:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 f894 	bl	80013ac <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	bf14      	ite	ne
 800028a:	2301      	movne	r3, #1
 800028c:	2300      	moveq	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000294:	f000 f96a 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000298:	2301      	movs	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fa6f 	bl	8001788 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80002ba:	f000 f957 	bl	800056c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002be:	f001 f95f 	bl	8001580 <HAL_RCC_EnableCSS>
}
 80002c2:	bf00      	nop
 80002c4:	3750      	adds	r7, #80	; 0x50
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <_ZL11MX_CRC_Initv+0x28>)
 80002d2:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <_ZL11MX_CRC_Initv+0x2c>)
 80002d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <_ZL11MX_CRC_Initv+0x28>)
 80002d8:	f000 fc07 	bl	8000aea <HAL_CRC_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	bf14      	ite	ne
 80002e2:	2301      	movne	r3, #1
 80002e4:	2300      	moveq	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80002ec:	f000 f93e 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000090 	.word	0x20000090
 80002f8:	40023000 	.word	0x40023000

080002fc <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	460a      	mov	r2, r1
 8000308:	801a      	strh	r2, [r3, #0]
 800030a:	460a      	mov	r2, r1
 800030c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800030e:	2300      	movs	r3, #0
 8000310:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 8000314:	4a25      	ldr	r2, [pc, #148]	; (80003ac <_ZL11MX_RTC_Initv+0xb0>)
 8000316:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 800031a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800031e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 8000322:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000326:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 800032a:	f001 fba3 	bl	8001a74 <HAL_RTC_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	bf14      	ite	ne
 8000334:	2301      	movne	r3, #1
 8000336:	2300      	moveq	r3, #0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <_ZL11MX_RTC_Initv+0x46>
  {
    Error_Handler();
 800033e:	f000 f915 	bl	800056c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000342:	2300      	movs	r3, #0
 8000344:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000346:	2300      	movs	r3, #0
 8000348:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800034a:	2300      	movs	r3, #0
 800034c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2201      	movs	r2, #1
 8000352:	4619      	mov	r1, r3
 8000354:	4814      	ldr	r0, [pc, #80]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 8000356:	f001 fc23 	bl	8001ba0 <HAL_RTC_SetTime>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	bf14      	ite	ne
 8000360:	2301      	movne	r3, #1
 8000362:	2300      	moveq	r3, #0
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <_ZL11MX_RTC_Initv+0x72>
  {
    Error_Handler();
 800036a:	f000 f8ff 	bl	800056c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800036e:	2301      	movs	r3, #1
 8000370:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000372:	2301      	movs	r3, #1
 8000374:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000376:	2301      	movs	r3, #1
 8000378:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800037a:	2300      	movs	r3, #0
 800037c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	4808      	ldr	r0, [pc, #32]	; (80003a8 <_ZL11MX_RTC_Initv+0xac>)
 8000386:	f001 fca3 	bl	8001cd0 <HAL_RTC_SetDate>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	bf14      	ite	ne
 8000390:	2301      	movne	r3, #1
 8000392:	2300      	moveq	r3, #0
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <_ZL11MX_RTC_Initv+0xa2>
  {
    Error_Handler();
 800039a:	f000 f8e7 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000098 	.word	0x20000098
 80003ac:	40002800 	.word	0x40002800

080003b0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <_ZL19MX_USART1_UART_Initv+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e8:	4807      	ldr	r0, [pc, #28]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x58>)
 80003ea:	f002 f91b 	bl	8002624 <HAL_UART_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf14      	ite	ne
 80003f4:	2301      	movne	r3, #1
 80003f6:	2300      	moveq	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <_ZL19MX_USART1_UART_Initv+0x52>
  {
    Error_Handler();
 80003fe:	f000 f8b5 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000ac 	.word	0x200000ac
 800040c:	40013800 	.word	0x40013800

08000410 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 800041c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000446:	4807      	ldr	r0, [pc, #28]	; (8000464 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000448:	f002 f8ec 	bl	8002624 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	bf14      	ite	ne
 8000452:	2301      	movne	r3, #1
 8000454:	2300      	moveq	r3, #0
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 800045c:	f000 f886 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200000f0 	.word	0x200000f0
 8000468:	40004800 	.word	0x40004800

0800046c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b2a      	ldr	r3, [pc, #168]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a29      	ldr	r2, [pc, #164]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a23      	ldr	r2, [pc, #140]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a1d      	ldr	r2, [pc, #116]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a17      	ldr	r2, [pc, #92]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <_ZL12MX_GPIO_Initv+0xc0>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	4812      	ldr	r0, [pc, #72]	; (8000530 <_ZL12MX_GPIO_Initv+0xc4>)
 80004e8:	f000 fca0 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILT_IN_LED_Pin */
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <_ZL12MX_GPIO_Initv+0xc4>)
 8000506:	f000 fb0d 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIC_IntrfaceMode_Pin */
  GPIO_InitStruct.Pin = NIC_IntrfaceMode_Pin;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIC_IntrfaceMode_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <_ZL12MX_GPIO_Initv+0xc8>)
 8000520:	f000 fb00 	bl	8000b24 <HAL_GPIO_Init>

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	40011000 	.word	0x40011000
 8000534:	40010800 	.word	0x40010800

08000538 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f002 fa5b 	bl	80029fc <osDelay>
 8000546:	e7fb      	b.n	8000540 <_Z16StartDefaultTaskPv+0x8>

08000548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d101      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800055a:	f000 f9cb 	bl	80008f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012c00 	.word	0x40012c00

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_MspInit+0x68>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_MspInit+0x68>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_MspInit+0x68>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x68>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <HAL_MspInit+0x68>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x68>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	210f      	movs	r1, #15
 80005b2:	f06f 0001 	mvn.w	r0, #1
 80005b6:	f000 fa6e 	bl	8000a96 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x6c>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_MspInit+0x6c>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <HAL_CRC_MspInit+0x34>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d10b      	bne.n	8000612 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_CRC_MspInit+0x38>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <HAL_CRC_MspInit+0x38>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_CRC_MspInit+0x38>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40023000 	.word	0x40023000
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <HAL_RTC_MspInit+0x3c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d110      	bne.n	8000658 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000636:	f000 fc2b 	bl	8000e90 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_RTC_MspInit+0x40>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_RTC_MspInit+0x40>)
 8000640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_RTC_MspInit+0x40>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_RTC_MspInit+0x44>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40002800 	.word	0x40002800
 8000664:	40021000 	.word	0x40021000
 8000668:	4242043c 	.word	0x4242043c

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a38      	ldr	r2, [pc, #224]	; (8000768 <HAL_UART_MspInit+0xfc>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d132      	bne.n	80006f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <HAL_UART_MspInit+0x100>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a36      	ldr	r2, [pc, #216]	; (800076c <HAL_UART_MspInit+0x100>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <HAL_UART_MspInit+0x100>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <HAL_UART_MspInit+0x100>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a30      	ldr	r2, [pc, #192]	; (800076c <HAL_UART_MspInit+0x100>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <HAL_UART_MspInit+0x100>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = NIC_TX_Pin|NIC_RTS_Pin;
 80006bc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4619      	mov	r1, r3
 80006d0:	4827      	ldr	r0, [pc, #156]	; (8000770 <HAL_UART_MspInit+0x104>)
 80006d2:	f000 fa27 	bl	8000b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NIC_RX_Pin|NIC_CTS_Pin;
 80006d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0318 	add.w	r3, r7, #24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4821      	ldr	r0, [pc, #132]	; (8000770 <HAL_UART_MspInit+0x104>)
 80006ec:	f000 fa1a 	bl	8000b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006f0:	e036      	b.n	8000760 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <HAL_UART_MspInit+0x108>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d131      	bne.n	8000760 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <HAL_UART_MspInit+0x100>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <HAL_UART_MspInit+0x100>)
 8000702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_UART_MspInit+0x100>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_UART_MspInit+0x100>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_UART_MspInit+0x100>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_UART_MspInit+0x100>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PLM_TX_Pin;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PLM_TX_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	4619      	mov	r1, r3
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <HAL_UART_MspInit+0x10c>)
 8000742:	f000 f9ef 	bl	8000b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PLM_RX_Pin;
 8000746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800074a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PLM_RX_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4619      	mov	r1, r3
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <HAL_UART_MspInit+0x10c>)
 800075c:	f000 f9e2 	bl	8000b24 <HAL_GPIO_Init>
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40013800 	.word	0x40013800
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800
 8000774:	40004800 	.word	0x40004800
 8000778:	40010c00 	.word	0x40010c00

0800077c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	2019      	movs	r0, #25
 8000792:	f000 f980 	bl	8000a96 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000796:	2019      	movs	r0, #25
 8000798:	f000 f999 	bl	8000ace <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <HAL_InitTick+0xa0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_InitTick+0xa0>)
 80007a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b4:	f107 0210 	add.w	r2, r7, #16
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ff7a 	bl	80016b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80007c4:	f000 ff64 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_InitTick+0xa4>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	3b01      	subs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_InitTick+0xa8>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_InitTick+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_InitTick+0xa8>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_InitTick+0xa8>)
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_InitTick+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_InitTick+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <HAL_InitTick+0xa8>)
 80007fe:	f001 fcc7 	bl	8002190 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <HAL_InitTick+0xa8>)
 800080a:	f001 fd19 	bl	8002240 <HAL_TIM_Base_Start_IT>
 800080e:	4603      	mov	r3, r0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3730      	adds	r7, #48	; 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	431bde83 	.word	0x431bde83
 8000824:	20000138 	.word	0x20000138
 8000828:	40012c00 	.word	0x40012c00

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000830:	f000 ff72 	bl	8001718 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x8>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <TIM1_UP_IRQHandler+0x10>)
 8000862:	f001 fd3f 	bl	80022e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000138 	.word	0x20000138

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a2:	f7ff ffe5 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f004 fcd9 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fc65 	bl	8000178 <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008b8:	08005560 	.word	0x08005560
  ldr r2, =_sbss
 80008bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008c0:	20001b94 	.word	0x20001b94

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f8d1 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f7ff ff4c 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fe48 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000008 	.word	0x20000008
 8000914:	20000180 	.word	0x20000180

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000180 	.word	0x20000180

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <__NVIC_EnableIRQ+0x34>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff4f 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff64 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ffb2 	bl	8000a1c <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff81 	bl	80009c8 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff57 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e00e      	b.n	8000b1a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fd6b 	bl	80005e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e169      	b.n	8000e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 8158 	bne.w	8000e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4a9a      	ldr	r2, [pc, #616]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d05e      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b60:	4a98      	ldr	r2, [pc, #608]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d875      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b66:	4a98      	ldr	r2, [pc, #608]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d058      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b6c:	4a96      	ldr	r2, [pc, #600]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d86f      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b72:	4a96      	ldr	r2, [pc, #600]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d052      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b78:	4a94      	ldr	r2, [pc, #592]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d869      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d04c      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b84:	4a92      	ldr	r2, [pc, #584]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d863      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d046      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b90:	4a90      	ldr	r2, [pc, #576]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d85d      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d82a      	bhi.n	8000bf0 <HAL_GPIO_Init+0xcc>
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d859      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <HAL_GPIO_Init+0x80>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000bf9 	.word	0x08000bf9
 8000bac:	08000c0b 	.word	0x08000c0b
 8000bb0:	08000c4d 	.word	0x08000c4d
 8000bb4:	08000c53 	.word	0x08000c53
 8000bb8:	08000c53 	.word	0x08000c53
 8000bbc:	08000c53 	.word	0x08000c53
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000c53 	.word	0x08000c53
 8000bc8:	08000c53 	.word	0x08000c53
 8000bcc:	08000c53 	.word	0x08000c53
 8000bd0:	08000c53 	.word	0x08000c53
 8000bd4:	08000c53 	.word	0x08000c53
 8000bd8:	08000c53 	.word	0x08000c53
 8000bdc:	08000c53 	.word	0x08000c53
 8000be0:	08000c53 	.word	0x08000c53
 8000be4:	08000c53 	.word	0x08000c53
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000c15 	.word	0x08000c15
 8000bf0:	4a79      	ldr	r2, [pc, #484]	; (8000dd8 <HAL_GPIO_Init+0x2b4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf6:	e02c      	b.n	8000c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e029      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	3304      	adds	r3, #4
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e024      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e01f      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	330c      	adds	r3, #12
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e01a      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c26:	2304      	movs	r3, #4
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e013      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	611a      	str	r2, [r3, #16]
          break;
 8000c3e:	e009      	b.n	8000c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	615a      	str	r2, [r3, #20]
          break;
 8000c4a:	e003      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e000      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          break;
 8000c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d801      	bhi.n	8000c5e <HAL_GPIO_Init+0x13a>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	e001      	b.n	8000c62 <HAL_GPIO_Init+0x13e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3304      	adds	r3, #4
 8000c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d802      	bhi.n	8000c70 <HAL_GPIO_Init+0x14c>
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x152>
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3b08      	subs	r3, #8
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	6a39      	ldr	r1, [r7, #32]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80b1 	beq.w	8000e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cbc:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <HAL_GPIO_Init+0x2c0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d013      	beq.n	8000d10 <HAL_GPIO_Init+0x1ec>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3f      	ldr	r2, [pc, #252]	; (8000de8 <HAL_GPIO_Init+0x2c4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d00d      	beq.n	8000d0c <HAL_GPIO_Init+0x1e8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <HAL_GPIO_Init+0x2c8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x1e4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <HAL_GPIO_Init+0x2cc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <HAL_GPIO_Init+0x1e0>
 8000d00:	2303      	movs	r3, #3
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d04:	2304      	movs	r3, #4
 8000d06:	e004      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	492c      	ldr	r1, [pc, #176]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4928      	ldr	r1, [pc, #160]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4922      	ldr	r1, [pc, #136]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	491e      	ldr	r1, [pc, #120]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4918      	ldr	r1, [pc, #96]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4914      	ldr	r1, [pc, #80]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	490e      	ldr	r1, [pc, #56]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	e021      	b.n	8000e06 <HAL_GPIO_Init+0x2e2>
 8000dc2:	bf00      	nop
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10310000 	.word	0x10310000
 8000dcc:	10220000 	.word	0x10220000
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4909      	ldr	r1, [pc, #36]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	3301      	adds	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	fa22 f303 	lsr.w	r3, r2, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae8e 	bne.w	8000b38 <HAL_GPIO_Init+0x14>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	372c      	adds	r7, #44	; 0x2c
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43d9      	mvns	r1, r3
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	420e0020 	.word	0x420e0020

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e272      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8087 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec8:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d00c      	beq.n	8000eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed4:	4b8f      	ldr	r3, [pc, #572]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d112      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eec:	d10b      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d06c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d168      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e24c      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x76>
 8000f10:	4b80      	ldr	r3, [pc, #512]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e02e      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x98>
 8000f26:	4b7b      	ldr	r3, [pc, #492]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b78      	ldr	r3, [pc, #480]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a77      	ldr	r2, [pc, #476]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e01d      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0xbc>
 8000f4a:	4b72      	ldr	r3, [pc, #456]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a71      	ldr	r2, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6e      	ldr	r2, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e00b      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f64:	4b6b      	ldr	r3, [pc, #428]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6a      	ldr	r2, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b68      	ldr	r3, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a67      	ldr	r2, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fcc8 	bl	8000918 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fcc4 	bl	8000918 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e200      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0xe4>
 8000faa:	e014      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcb4 	bl	8000918 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fcb0 	bl	8000918 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1ec      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x10c>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d063      	beq.n	80010aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d11c      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d116      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e1c0      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4939      	ldr	r1, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	e03a      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fc69 	bl	8000918 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fc65 	bl	8000918 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e1a1      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fc48 	bl	8000918 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fc44 	bl	8000918 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e180      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d03a      	beq.n	800112c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d019      	beq.n	80010f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fc28 	bl	8000918 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc24 	bl	8000918 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e160      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fb28 	bl	8001740 <RCC_Delay>
 80010f0:	e01c      	b.n	800112c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fc0e 	bl	8000918 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fe:	e00f      	b.n	8001120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fc0a 	bl	8000918 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d908      	bls.n	8001120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e146      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	42420000 	.word	0x42420000
 800111c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	4b92      	ldr	r3, [pc, #584]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e9      	bne.n	8001100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a6 	beq.w	8001286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b88      	ldr	r3, [pc, #544]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a87      	ldr	r2, [pc, #540]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b85      	ldr	r3, [pc, #532]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_OscConfig+0x4c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x4c8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a7e      	ldr	r2, [pc, #504]	; (8001370 <HAL_RCC_OscConfig+0x4c8>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbcb 	bl	8000918 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fbc7 	bl	8000918 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e103      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b75      	ldr	r3, [pc, #468]	; (8001370 <HAL_RCC_OscConfig+0x4c8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x312>
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a6e      	ldr	r2, [pc, #440]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e02d      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x334>
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x356>
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a60      	ldr	r2, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a5d      	ldr	r2, [pc, #372]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e00b      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb7b 	bl	8000918 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb77 	bl	8000918 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0b1      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ee      	beq.n	8001226 <HAL_RCC_OscConfig+0x37e>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fb65 	bl	8000918 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fb61 	bl	8000918 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e09b      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a3b      	ldr	r2, [pc, #236]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8087 	beq.w	800139e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d061      	beq.n	8001360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d146      	bne.n	8001332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x4cc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb35 	bl	8000918 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff fb31 	bl	8000918 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e06d      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d108      	bne.n	80012ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4921      	ldr	r1, [pc, #132]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a19      	ldr	r1, [r3, #32]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	430b      	orrs	r3, r1
 80012fe:	491b      	ldr	r1, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_OscConfig+0x4cc>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fb05 	bl	8000918 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fb01 	bl	8000918 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e03d      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x46a>
 8001330:	e035      	b.n	800139e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_OscConfig+0x4cc>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff faee 	bl	8000918 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff faea 	bl	8000918 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e026      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCC_OscConfig+0x4c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x498>
 800135e:	e01e      	b.n	800139e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e019      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_OscConfig+0x500>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	429a      	cmp	r2, r3
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0d0      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d910      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b67      	ldr	r3, [pc, #412]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 0207 	bic.w	r2, r3, #7
 80013d6:	4965      	ldr	r1, [pc, #404]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b8      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800142a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d040      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d115      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e07f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e073      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e06b      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f023 0203 	bic.w	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4936      	ldr	r1, [pc, #216]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff fa3c 	bl	8000918 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a4:	f7ff fa38 	bl	8000918 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e053      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 020c 	and.w	r2, r3, #12
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1eb      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d210      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 0207 	bic.w	r2, r3, #7
 80014e2:	4922      	ldr	r1, [pc, #136]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e032      	b.n	8001562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4916      	ldr	r1, [pc, #88]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f82d 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800153e:	4602      	mov	r2, r0
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	490a      	ldr	r1, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x1c8>)
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1d0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f90e 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000
 8001570:	40021000 	.word	0x40021000
 8001574:	080054e0 	.word	0x080054e0
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_RCC_EnableCSS+0x14>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	4242004c 	.word	0x4242004c

08001598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b490      	push	{r4, r7}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_GetSysClockFreq+0xac>)
 80015a0:	1d3c      	adds	r4, r7, #4
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a8:	f240 2301 	movw	r3, #513	; 0x201
 80015ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d002      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x40>
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d003      	beq.n	80015de <HAL_RCC_GetSysClockFreq+0x46>
 80015d6:	e02b      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015da:	623b      	str	r3, [r7, #32]
      break;
 80015dc:	e02b      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3328      	adds	r3, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d012      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	0c5b      	lsrs	r3, r3, #17
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	3328      	adds	r3, #40	; 0x28
 8001606:	443b      	add	r3, r7
 8001608:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800160c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001612:	fb03 f202 	mul.w	r2, r3, r2
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e004      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	623b      	str	r3, [r7, #32]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	6a3b      	ldr	r3, [r7, #32]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bc90      	pop	{r4, r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	08005484 	.word	0x08005484
 8001648:	40021000 	.word	0x40021000
 800164c:	007a1200 	.word	0x007a1200
 8001650:	003d0900 	.word	0x003d0900

08001654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_RCC_GetHCLKFreq+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000000 	.word	0x20000000

08001668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800166c:	f7ff fff2 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <HAL_RCC_GetPCLK1Freq+0x24>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	080054f0 	.word	0x080054f0

08001690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001694:	f7ff ffde 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0adb      	lsrs	r3, r3, #11
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	080054f0 	.word	0x080054f0

080016b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	220f      	movs	r2, #15
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_RCC_GetClockConfig+0x58>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_RCC_GetClockConfig+0x58>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_GetClockConfig+0x58>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_RCC_GetClockConfig+0x58>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_GetClockConfig+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0207 	and.w	r2, r3, #7
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_NMI_IRQHandler+0x20>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d104      	bne.n	8001732 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001728:	f000 f828 	bl	800177c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_NMI_IRQHandler+0x24>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	701a      	strb	r2, [r3, #0]
  }
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	4002100a 	.word	0x4002100a

08001740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <RCC_Delay+0x34>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <RCC_Delay+0x38>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a5b      	lsrs	r3, r3, #9
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800175c:	bf00      	nop
  }
  while (Delay --);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f9      	bne.n	800175c <RCC_Delay+0x1c>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d07d      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a8:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10d      	bne.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	61d3      	str	r3, [r2, #28]
 80017c0:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d118      	bne.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a42      	ldr	r2, [pc, #264]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f896 	bl	8000918 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	e008      	b.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f0:	f7ff f892 	bl	8000918 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e06d      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d02e      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d027      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001842:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d014      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f861 	bl	8000918 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f85d 	bl	8000918 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e036      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ee      	beq.n	800185a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800188a:	4313      	orrs	r3, r2
 800188c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	490b      	ldr	r1, [pc, #44]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	4904      	ldr	r1, [pc, #16]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40007000 	.word	0x40007000
 80018f0:	42420440 	.word	0x42420440

080018f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08d      	sub	sp, #52	; 0x34
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80018fe:	f107 040c 	add.w	r4, r7, #12
 8001902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001908:	f240 2301 	movw	r3, #513	; 0x201
 800190c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d00a      	beq.n	800193e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b10      	cmp	r3, #16
 800192c:	f200 808e 	bhi.w	8001a4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d049      	beq.n	80019ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d079      	beq.n	8001a30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800193c:	e086      	b.n	8001a4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d07f      	beq.n	8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	3330      	adds	r3, #48	; 0x30
 800195a:	443b      	add	r3, r7
 800195c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001960:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0c5b      	lsrs	r3, r3, #17
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	3330      	adds	r3, #48	; 0x30
 8001978:	443b      	add	r3, r7
 800197a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00d      	beq.n	80019a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199a:	e004      	b.n	80019a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d102      	bne.n	80019ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019b8:	e04a      	b.n	8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019c8:	e042      	b.n	8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019da:	d108      	bne.n	80019ee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80019e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ec:	e01f      	b.n	8001a2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d109      	bne.n	8001a0e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001a06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0c:	e00f      	b.n	8001a2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001a26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a2c:	e012      	b.n	8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001a2e:	e011      	b.n	8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a30:	f7ff fe2e 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0b9b      	lsrs	r3, r3, #14
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a4a:	e004      	b.n	8001a56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001a4c:	bf00      	nop
 8001a4e:	e002      	b.n	8001a56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001a50:	bf00      	nop
 8001a52:	e000      	b.n	8001a56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001a54:	bf00      	nop
    }
  }
  return (frequency);
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3734      	adds	r7, #52	; 0x34
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	08005494 	.word	0x08005494
 8001a64:	40021000 	.word	0x40021000
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	003d0900 	.word	0x003d0900
 8001a70:	aaaaaaab 	.word	0xaaaaaaab

08001a74 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e084      	b.n	8001b94 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7c5b      	ldrb	r3, [r3, #17]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fdc2 	bl	8000624 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f9c8 	bl	8001e3c <HAL_RTC_WaitForSynchro>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e06b      	b.n	8001b94 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fa81 	bl	8001fc4 <RTC_EnterInitMode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e060      	b.n	8001b94 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0207 	bic.w	r2, r2, #7
 8001ae0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_RTC_Init+0x128>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_RTC_Init+0x128>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RTC_Init+0x128>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4926      	ldr	r1, [pc, #152]	; (8001b9c <HAL_RTC_Init+0x128>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b10:	d003      	beq.n	8001b1a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e00e      	b.n	8001b38 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff feea 	bl	80018f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b20:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e030      	b.n	8001b94 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 010f 	bic.w	r1, r3, #15
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0c1a      	lsrs	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	b291      	uxth	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa55 	bl	8002014 <RTC_ExitInitMode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00c      	b.n	8001b94 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
  }
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40006c00 	.word	0x40006c00

08001ba0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RTC_SetTime+0x20>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e080      	b.n	8001cc6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	7c1b      	ldrb	r3, [r3, #16]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_RTC_SetTime+0x30>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e07a      	b.n	8001cc6 <HAL_RTC_SetTime+0x126>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001bec:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a5b      	subs	r3, r3, r1
 8001bfc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001bfe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e01e      	b.n	8001c48 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fa28 	bl	8002064 <RTC_Bcd2ToByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c1c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fa1d 	bl	8002064 <RTC_Bcd2ToByte>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c36:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	789b      	ldrb	r3, [r3, #2]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fa11 	bl	8002064 <RTC_Bcd2ToByte>
 8001c42:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c44:	4423      	add	r3, r4
 8001c46:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f953 	bl	8001ef6 <RTC_WriteTimeCounter>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e02f      	b.n	8001cc6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0205 	bic.w	r2, r2, #5
 8001c74:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f964 	bl	8001f44 <RTC_ReadAlarmCounter>
 8001c7c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c84:	d018      	beq.n	8001cb8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d214      	bcs.n	8001cb8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001c94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c98:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c9a:	6939      	ldr	r1, [r7, #16]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f96a 	bl	8001f76 <RTC_WriteAlarmCounter>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2204      	movs	r2, #4
 8001cac:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e006      	b.n	8001cc6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
	...

08001cd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_RTC_SetDate+0x24>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e097      	b.n	8001e28 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	7c1b      	ldrb	r3, [r3, #16]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RTC_SetDate+0x34>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e091      	b.n	8001e28 <HAL_RTC_SetDate+0x158>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	78da      	ldrb	r2, [r3, #3]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	785a      	ldrb	r2, [r3, #1]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	789a      	ldrb	r2, [r3, #2]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	739a      	strb	r2, [r3, #14]
 8001d2e:	e01a      	b.n	8001d66 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f995 	bl	8002064 <RTC_Bcd2ToByte>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f98c 	bl	8002064 <RTC_Bcd2ToByte>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f983 	bl	8002064 <RTC_Bcd2ToByte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	7bdb      	ldrb	r3, [r3, #15]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	7b59      	ldrb	r1, [r3, #13]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	7b9b      	ldrb	r3, [r3, #14]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f000 f993 	bl	80020a0 <RTC_WeekDayNum>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	7b1a      	ldrb	r2, [r3, #12]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f883 	bl	8001e96 <RTC_ReadTimeCounter>
 8001d90:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_RTC_SetDate+0x160>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0adb      	lsrs	r3, r3, #11
 8001d9c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b18      	cmp	r3, #24
 8001da2:	d93a      	bls.n	8001e1a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_RTC_SetDate+0x164>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_RTC_SetDate+0x168>)
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dba:	69f9      	ldr	r1, [r7, #28]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f89a 	bl	8001ef6 <RTC_WriteTimeCounter>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e027      	b.n	8001e28 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f8b3 	bl	8001f44 <RTC_ReadAlarmCounter>
 8001dde:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de6:	d018      	beq.n	8001e1a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d214      	bcs.n	8001e1a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001df6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dfa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8b9 	bl	8001f76 <RTC_WriteAlarmCounter>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e006      	b.n	8001e28 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	91a2b3c5 	.word	0x91a2b3c5
 8001e34:	aaaaaaab 	.word	0xaaaaaaab
 8001e38:	00015180 	.word	0x00015180

08001e3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01d      	b.n	8001e8e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0208 	bic.w	r2, r2, #8
 8001e60:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001e62:	f7fe fd59 	bl	8000918 <HAL_GetTick>
 8001e66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e68:	e009      	b.n	8001e7e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e6a:	f7fe fd55 	bl	8000918 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e78:	d901      	bls.n	8001e7e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e007      	b.n	8001e8e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	827b      	strh	r3, [r7, #18]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	823b      	strh	r3, [r7, #16]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001ec6:	8a7a      	ldrh	r2, [r7, #18]
 8001ec8:	8a3b      	ldrh	r3, [r7, #16]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d008      	beq.n	8001ee0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001ece:	8a3b      	ldrh	r3, [r7, #16]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e004      	b.n	8001eea <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001ee0:	8a7b      	ldrh	r3, [r7, #18]
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001eea:	697b      	ldr	r3, [r7, #20]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f85d 	bl	8001fc4 <RTC_EnterInitMode>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e011      	b.n	8001f3a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	0c12      	lsrs	r2, r2, #16
 8001f1e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b292      	uxth	r2, r2
 8001f28:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f872 	bl	8002014 <RTC_ExitInitMode>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	81fb      	strh	r3, [r7, #14]
 8001f50:	2300      	movs	r3, #0
 8001f52:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f81d 	bl	8001fc4 <RTC_EnterInitMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e011      	b.n	8001fba <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	0c12      	lsrs	r2, r2, #16
 8001f9e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f832 	bl	8002014 <RTC_ExitInitMode>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001fd0:	f7fe fca2 	bl	8000918 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fd6:	e009      	b.n	8001fec <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fd8:	f7fe fc9e 	bl	8000918 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe6:	d901      	bls.n	8001fec <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e00f      	b.n	800200c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ee      	beq.n	8001fd8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0210 	orr.w	r2, r2, #16
 8002008:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0210 	bic.w	r2, r2, #16
 800202e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002030:	f7fe fc72 	bl	8000918 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002036:	e009      	b.n	800204c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002038:	f7fe fc6e 	bl	8000918 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002046:	d901      	bls.n	800204c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e007      	b.n	800205c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	4413      	add	r3, r2
 8002092:	b2db      	uxtb	r3, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020be:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d82d      	bhi.n	8002122 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <RTC_WeekDayNum+0xe4>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	085a      	lsrs	r2, r3, #1
 80020da:	78bb      	ldrb	r3, [r7, #2]
 80020dc:	441a      	add	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	441a      	add	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	4926      	ldr	r1, [pc, #152]	; (8002188 <RTC_WeekDayNum+0xe8>)
 80020f0:	fba1 1303 	umull	r1, r3, r1, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	1ad2      	subs	r2, r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	4922      	ldr	r1, [pc, #136]	; (8002188 <RTC_WeekDayNum+0xe8>)
 80020fe:	fba1 1303 	umull	r1, r3, r1, r3
 8002102:	09db      	lsrs	r3, r3, #7
 8002104:	4413      	add	r3, r2
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <RTC_WeekDayNum+0xec>)
 800210a:	fba3 1302 	umull	r1, r3, r3, r2
 800210e:	1ad1      	subs	r1, r2, r3
 8002110:	0849      	lsrs	r1, r1, #1
 8002112:	440b      	add	r3, r1
 8002114:	0899      	lsrs	r1, r3, #2
 8002116:	460b      	mov	r3, r1
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	1a5b      	subs	r3, r3, r1
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e029      	b.n	8002176 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <RTC_WeekDayNum+0xe4>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	085a      	lsrs	r2, r3, #1
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	441a      	add	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	441a      	add	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4910      	ldr	r1, [pc, #64]	; (8002188 <RTC_WeekDayNum+0xe8>)
 8002148:	fba1 1303 	umull	r1, r3, r1, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	490d      	ldr	r1, [pc, #52]	; (8002188 <RTC_WeekDayNum+0xe8>)
 8002154:	fba1 1303 	umull	r1, r3, r1, r3
 8002158:	09db      	lsrs	r3, r3, #7
 800215a:	4413      	add	r3, r2
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <RTC_WeekDayNum+0xec>)
 8002160:	fba3 1302 	umull	r1, r3, r3, r2
 8002164:	1ad1      	subs	r1, r2, r3
 8002166:	0849      	lsrs	r1, r1, #1
 8002168:	440b      	add	r3, r1
 800216a:	0899      	lsrs	r1, r3, #2
 800216c:	460b      	mov	r3, r1
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a5b      	subs	r3, r3, r1
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	b2db      	uxtb	r3, r3
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	38e38e39 	.word	0x38e38e39
 8002188:	51eb851f 	.word	0x51eb851f
 800218c:	24924925 	.word	0x24924925

08002190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e041      	b.n	8002226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f839 	bl	800222e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 f9b4 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d001      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e03a      	b.n	80022ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00e      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x58>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d009      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x58>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_TIM_Base_Start_IT+0x9c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x58>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d111      	bne.n	80022bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d010      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	e007      	b.n	80022cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40000800 	.word	0x40000800

080022e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d122      	bne.n	8002340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d11b      	bne.n	8002340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0202 	mvn.w	r2, #2
 8002310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8ed 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8e0 	bl	80024f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f8ef 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b04      	cmp	r3, #4
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0204 	mvn.w	r2, #4
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8c3 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8b6 	bl	80024f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8c5 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0208 	mvn.w	r2, #8
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2204      	movs	r2, #4
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f899 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f88c 	bl	80024f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f89b 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b10      	cmp	r3, #16
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0210 	mvn.w	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f86f 	bl	8002506 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f862 	bl	80024f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f871 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0201 	mvn.w	r2, #1
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe f870 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8bf 	bl	8002612 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f835 	bl	800252a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0220 	mvn.w	r2, #32
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f88a 	bl	8002600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00b      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d007      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <TIM_Base_SetConfig+0xbc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d108      	bne.n	800257e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <TIM_Base_SetConfig+0xbc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <TIM_Base_SetConfig+0xb8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	615a      	str	r2, [r3, #20]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800

08002600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e03f      	b.n	80026b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe f80e 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f829 	bl	80026c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800267c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800268c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026fa:	f023 030c 	bic.w	r3, r3, #12
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	430b      	orrs	r3, r1
 8002706:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <UART_SetConfig+0x114>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002728:	f7fe ffb2 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	e002      	b.n	8002736 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002730:	f7fe ff9a 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	0119      	lsls	r1, r3, #4
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <UART_SetConfig+0x118>)
 800276e:	fba3 0302 	umull	r0, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2064      	movs	r0, #100	; 0x64
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	; 0x32
 8002780:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <UART_SetConfig+0x118>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278c:	4419      	add	r1, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009a      	lsls	r2, r3, #2
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <UART_SetConfig+0x118>)
 80027a6:	fba3 0302 	umull	r0, r3, r3, r2
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2064      	movs	r0, #100	; 0x64
 80027ae:	fb00 f303 	mul.w	r3, r0, r3
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	3332      	adds	r3, #50	; 0x32
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <UART_SetConfig+0x118>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	f003 020f 	and.w	r2, r3, #15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	440a      	add	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013800 	.word	0x40013800
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e2:	f3ef 8305 	mrs	r3, IPSR
 80027e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80027e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	607b      	str	r3, [r7, #4]
  return(result);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <osKernelInitialize+0x32>
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <osKernelInitialize+0x60>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d109      	bne.n	8002816 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002802:	f3ef 8311 	mrs	r3, BASEPRI
 8002806:	603b      	str	r3, [r7, #0]
  return(result);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800280e:	f06f 0305 	mvn.w	r3, #5
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e00c      	b.n	8002830 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <osKernelInitialize+0x60>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <osKernelInitialize+0x60>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e002      	b.n	8002830 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000184 	.word	0x20000184

08002840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002846:	f3ef 8305 	mrs	r3, IPSR
 800284a:	60bb      	str	r3, [r7, #8]
  return(result);
 800284c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	607b      	str	r3, [r7, #4]
  return(result);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <osKernelStart+0x32>
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <osKernelStart+0x64>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d109      	bne.n	800287a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002866:	f3ef 8311 	mrs	r3, BASEPRI
 800286a:	603b      	str	r3, [r7, #0]
  return(result);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002872:	f06f 0305 	mvn.w	r3, #5
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e00e      	b.n	8002898 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <osKernelStart+0x64>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <osKernelStart+0x64>)
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002888:	f001 f900 	bl	8003a8c <vTaskStartScheduler>
      stat = osOK;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e002      	b.n	8002898 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002896:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002898:	68fb      	ldr	r3, [r7, #12]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000184 	.word	0x20000184

080028a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b092      	sub	sp, #72	; 0x48
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b8:	f3ef 8305 	mrs	r3, IPSR
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 8094 	bne.w	80029ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ca:	623b      	str	r3, [r7, #32]
  return(result);
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 808d 	bne.w	80029ee <osThreadNew+0x146>
 80028d4:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <osThreadNew+0x150>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d106      	bne.n	80028ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028dc:	f3ef 8311 	mrs	r3, BASEPRI
 80028e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8082 	bne.w	80029ee <osThreadNew+0x146>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d07e      	beq.n	80029ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80028f4:	2318      	movs	r3, #24
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80028f8:	2300      	movs	r3, #0
 80028fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80028fc:	f107 031b 	add.w	r3, r7, #27
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d045      	beq.n	800299a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <osThreadNew+0x74>
        name = attr->name;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <osThreadNew+0x9a>
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b38      	cmp	r3, #56	; 0x38
 8002934:	d805      	bhi.n	8002942 <osThreadNew+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <osThreadNew+0x9e>
        return (NULL);
 8002942:	2300      	movs	r3, #0
 8002944:	e054      	b.n	80029f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <osThreadNew+0xd4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2bbb      	cmp	r3, #187	; 0xbb
 8002964:	d90a      	bls.n	800297c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <osThreadNew+0xd4>
        mem = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	e010      	b.n	800299e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10c      	bne.n	800299e <osThreadNew+0xf6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d108      	bne.n	800299e <osThreadNew+0xf6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <osThreadNew+0xf6>
          mem = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
 8002998:	e001      	b.n	800299e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d110      	bne.n	80029c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029ac:	9202      	str	r2, [sp, #8]
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fe14 	bl	80035e8 <xTaskCreateStatic>
 80029c0:	4603      	mov	r3, r0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e013      	b.n	80029ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d110      	bne.n	80029ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fe5e 	bl	80036a0 <xTaskCreate>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <osThreadNew+0x146>
          hTask = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3738      	adds	r7, #56	; 0x38
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000184 	.word	0x20000184

080029fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a04:	f3ef 8305 	mrs	r3, IPSR
 8002a08:	613b      	str	r3, [r7, #16]
  return(result);
 8002a0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a10:	f3ef 8310 	mrs	r3, PRIMASK
 8002a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <osDelay+0x34>
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <osDelay+0x58>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d109      	bne.n	8002a38 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a24:	f3ef 8311 	mrs	r3, BASEPRI
 8002a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <osDelay+0x3c>
    stat = osErrorISR;
 8002a30:	f06f 0305 	mvn.w	r3, #5
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e007      	b.n	8002a48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 ffee 	bl	8003a24 <vTaskDelay>
    }
  }

  return (stat);
 8002a48:	697b      	ldr	r3, [r7, #20]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000184 	.word	0x20000184

08002a58 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a60:	f3ef 8305 	mrs	r3, IPSR
 8002a64:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a66:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a70:	617b      	str	r3, [r7, #20]
  return(result);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <osDelayUntil+0x34>
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <osDelayUntil+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d109      	bne.n	8002a94 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a80:	f3ef 8311 	mrs	r3, BASEPRI
 8002a84:	613b      	str	r3, [r7, #16]
  return(result);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8002a8c:	f06f 0305 	mvn.w	r3, #5
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e00e      	b.n	8002ab2 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8002a98:	f001 f906 	bl	8003ca8 <xTaskGetTickCount>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 ff3b 	bl	8003928 <vTaskDelayUntil>
  }

  return (stat);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000184 	.word	0x20000184

08002ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <vApplicationGetIdleTaskMemory+0x28>)
 8002ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <vApplicationGetIdleTaskMemory+0x2c>)
 8002ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	601a      	str	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	20000188 	.word	0x20000188
 8002aec:	20000244 	.word	0x20000244

08002af0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <vApplicationGetTimerTaskMemory+0x2c>)
 8002b00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <vApplicationGetTimerTaskMemory+0x30>)
 8002b06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000444 	.word	0x20000444
 8002b20:	20000500 	.word	0x20000500

08002b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 0208 	add.w	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f103 0208 	add.w	r2, r3, #8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 0208 	add.w	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd6:	d103      	bne.n	8002be0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e00c      	b.n	8002bfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3308      	adds	r3, #8
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e002      	b.n	8002bee <vListInsert+0x2e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d2f6      	bcs.n	8002be8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d103      	bne.n	8002c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cac:	f001 fffe 	bl	8004cac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	22ff      	movs	r2, #255	; 0xff
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00f      	beq.n	8002d2a <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3310      	adds	r3, #16
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f928 	bl	8003f64 <xTaskRemoveFromEventList>
 8002d14:	e009      	b.n	8002d2a <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3310      	adds	r3, #16
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff02 	bl	8002b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fefd 	bl	8002b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d2a:	f001 ffef 	bl	8004d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <xQueueGenericCreateStatic+0x52>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <xQueueGenericCreateStatic+0x56>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericCreateStatic+0x58>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueGenericCreateStatic+0x7e>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueGenericCreateStatic+0x82>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueGenericCreateStatic+0x84>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61fb      	str	r3, [r7, #28]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dd6:	2350      	movs	r3, #80	; 0x50
 8002dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d00a      	beq.n	8002df6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61bb      	str	r3, [r7, #24]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f805 	bl	8002e26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e002      	b.n	8002e48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e54:	2101      	movs	r1, #1
 8002e56:	69b8      	ldr	r0, [r7, #24]
 8002e58:	f7ff ff13 	bl	8002c82 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xQueueGenericSend+0x32>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <xQueueGenericSend+0x40>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <xQueueGenericSend+0x44>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <xQueueGenericSend+0x46>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <xQueueGenericSend+0x60>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d103      	bne.n	8002eda <xQueueGenericSend+0x6e>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <xQueueGenericSend+0x72>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <xQueueGenericSend+0x74>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericSend+0x8e>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	623b      	str	r3, [r7, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002efa:	f001 f9f3 	bl	80042e4 <xTaskGetSchedulerState>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <xQueueGenericSend+0x9e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <xQueueGenericSend+0xa2>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericSend+0xa4>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	61fb      	str	r3, [r7, #28]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f2a:	f001 febf 	bl	8004cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <xQueueGenericSend+0xd4>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d112      	bne.n	8002f66 <xQueueGenericSend+0xfa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 f9e3 	bl	8003310 <prvCopyDataToQueue>
 8002f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	3324      	adds	r3, #36	; 0x24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f803 	bl	8003f64 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f5e:	f001 fed5 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e062      	b.n	800302c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f6c:	f001 fece 	bl	8004d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e05b      	b.n	800302c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f854 	bl	800402c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f88:	f001 fec0 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f8c:	f000 fdee 	bl	8003b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f90:	f001 fe8c 	bl	8004cac <vPortEnterCritical>
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa0:	d103      	bne.n	8002faa <xQueueGenericSend+0x13e>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGenericSend+0x154>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fea4 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fc4:	1d3a      	adds	r2, r7, #4
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f843 	bl	8004058 <xTaskCheckForTimeOut>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d123      	bne.n	8003020 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fda:	f000 fa91 	bl	8003500 <prvIsQueueFull>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ff69 	bl	8003ec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff4:	f000 fa1c 	bl	8003430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ff8:	f000 fdc6 	bl	8003b88 <xTaskResumeAll>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d193      	bne.n	8002f2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <xQueueGenericSend+0x1c8>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	e78a      	b.n	8002f2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003016:	f000 fa0b 	bl	8003430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800301a:	f000 fdb5 	bl	8003b88 <xTaskResumeAll>
 800301e:	e784      	b.n	8002f2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003022:	f000 fa05 	bl	8003430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003026:	f000 fdaf 	bl	8003b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800302a:	2300      	movs	r3, #0
		}
	}
}
 800302c:	4618      	mov	r0, r3
 800302e:	3738      	adds	r7, #56	; 0x38
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <xQueueGenericSendFromISR+0x3c>
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <xQueueGenericSendFromISR+0x40>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <xQueueGenericSendFromISR+0x42>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	623b      	str	r3, [r7, #32]
}
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d103      	bne.n	80030a2 <xQueueGenericSendFromISR+0x6a>
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <xQueueGenericSendFromISR+0x6e>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueGenericSendFromISR+0x70>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61fb      	str	r3, [r7, #28]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030c2:	f001 feb5 	bl	8004e30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030c6:	f3ef 8211 	mrs	r2, BASEPRI
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	61ba      	str	r2, [r7, #24]
 80030dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <xQueueGenericSendFromISR+0xbc>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d12c      	bne.n	800314e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003104:	f000 f904 	bl	8003310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003108:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003110:	d112      	bne.n	8003138 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	3324      	adds	r3, #36	; 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f000 ff20 	bl	8003f64 <xTaskRemoveFromEventList>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800313c:	3301      	adds	r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	b25a      	sxtb	r2, r3
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800314c:	e001      	b.n	8003152 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800315c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003160:	4618      	mov	r0, r3
 8003162:	3738      	adds	r7, #56	; 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	; 0x30
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <xQueueReceive+0x30>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	623b      	str	r3, [r7, #32]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <xQueueReceive+0x3e>
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <xQueueReceive+0x42>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueReceive+0x44>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueReceive+0x5e>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61fb      	str	r3, [r7, #28]
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031c6:	f001 f88d 	bl	80042e4 <xTaskGetSchedulerState>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <xQueueReceive+0x6e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <xQueueReceive+0x72>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueReceive+0x74>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueReceive+0x8e>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61bb      	str	r3, [r7, #24]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031f6:	f001 fd59 	bl	8004cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320a:	f000 f8eb 	bl	80033e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	3310      	adds	r3, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fe9e 	bl	8003f64 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003228:	f001 fd70 	bl	8004d0c <vPortExitCritical>
				return pdPASS;
 800322c:	2301      	movs	r3, #1
 800322e:	e069      	b.n	8003304 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003236:	f001 fd69 	bl	8004d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800323a:	2300      	movs	r3, #0
 800323c:	e062      	b.n	8003304 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f000 feef 	bl	800402c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800324e:	2301      	movs	r3, #1
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003252:	f001 fd5b 	bl	8004d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003256:	f000 fc89 	bl	8003b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800325a:	f001 fd27 	bl	8004cac <vPortEnterCritical>
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003264:	b25b      	sxtb	r3, r3
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326a:	d103      	bne.n	8003274 <xQueueReceive+0x10c>
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003280:	d103      	bne.n	800328a <xQueueReceive+0x122>
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800328a:	f001 fd3f 	bl	8004d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800328e:	1d3a      	adds	r2, r7, #4
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fede 	bl	8004058 <xTaskCheckForTimeOut>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d123      	bne.n	80032ea <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a4:	f000 f916 	bl	80034d4 <prvIsQueueEmpty>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	3324      	adds	r3, #36	; 0x24
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fe04 	bl	8003ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032be:	f000 f8b7 	bl	8003430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032c2:	f000 fc61 	bl	8003b88 <xTaskResumeAll>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d194      	bne.n	80031f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <xQueueReceive+0x1a4>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	e78b      	b.n	80031f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e0:	f000 f8a6 	bl	8003430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032e4:	f000 fc50 	bl	8003b88 <xTaskResumeAll>
 80032e8:	e785      	b.n	80031f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ec:	f000 f8a0 	bl	8003430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032f0:	f000 fc4a 	bl	8003b88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f6:	f000 f8ed 	bl	80034d4 <prvIsQueueEmpty>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f43f af7a 	beq.w	80031f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003304:	4618      	mov	r0, r3
 8003306:	3730      	adds	r7, #48	; 0x30
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d14d      	bne.n	80033d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fff0 	bl	8004320 <xTaskPriorityDisinherit>
 8003340:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	e043      	b.n	80033d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d119      	bne.n	8003384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6898      	ldr	r0, [r3, #8]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	461a      	mov	r2, r3
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	f001 ffa4 	bl	80052a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	441a      	add	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d32b      	bcc.n	80033d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	e026      	b.n	80033d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68d8      	ldr	r0, [r3, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	461a      	mov	r2, r3
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	f001 ff8a 	bl	80052a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	425b      	negs	r3, r3
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d207      	bcs.n	80033c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	425b      	negs	r3, r3
 80033ba:	441a      	add	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d105      	bne.n	80033d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033da:	697b      	ldr	r3, [r7, #20]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d303      	bcc.n	8003418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68d9      	ldr	r1, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	461a      	mov	r2, r3
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	f001 ff40 	bl	80052a8 <memcpy>
	}
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003438:	f001 fc38 	bl	8004cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003444:	e011      	b.n	800346a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3324      	adds	r3, #36	; 0x24
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fd86 	bl	8003f64 <xTaskRemoveFromEventList>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800345e:	f000 fe5d 	bl	800411c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	3b01      	subs	r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dce9      	bgt.n	8003446 <prvUnlockQueue+0x16>
 8003472:	e000      	b.n	8003476 <prvUnlockQueue+0x46>
					break;
 8003474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800347e:	f001 fc45 	bl	8004d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003482:	f001 fc13 	bl	8004cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348e:	e011      	b.n	80034b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3310      	adds	r3, #16
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd61 	bl	8003f64 <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034a8:	f000 fe38 	bl	800411c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034ac:	7bbb      	ldrb	r3, [r7, #14]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dce9      	bgt.n	8003490 <prvUnlockQueue+0x60>
 80034bc:	e000      	b.n	80034c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	22ff      	movs	r2, #255	; 0xff
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034c8:	f001 fc20 	bl	8004d0c <vPortExitCritical>
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034dc:	f001 fbe6 	bl	8004cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e001      	b.n	80034f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f2:	f001 fc0b 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003508:	f001 fbd0 	bl	8004cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	429a      	cmp	r2, r3
 8003516:	d102      	bne.n	800351e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003518:	2301      	movs	r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e001      	b.n	8003522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003522:	f001 fbf3 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e014      	b.n	800356a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <vQueueAddToRegistry+0x4c>)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800354c:	490b      	ldr	r1, [pc, #44]	; (800357c <vQueueAddToRegistry+0x4c>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <vQueueAddToRegistry+0x4c>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003562:	e006      	b.n	8003572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b07      	cmp	r3, #7
 800356e:	d9e7      	bls.n	8003540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000900 	.word	0x20000900

08003580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003590:	f001 fb8c 	bl	8004cac <vPortEnterCritical>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a0:	d103      	bne.n	80035aa <vQueueWaitForMessageRestricted+0x2a>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b6:	d103      	bne.n	80035c0 <vQueueWaitForMessageRestricted+0x40>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c0:	f001 fba4 	bl	8004d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fc99 	bl	8003f0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff28 	bl	8003430 <prvUnlockQueue>
	}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	623b      	str	r3, [r7, #32]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCreateStatic+0x46>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61fb      	str	r3, [r7, #28]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800362e:	23bc      	movs	r3, #188	; 0xbc
 8003630:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2bbc      	cmp	r3, #188	; 0xbc
 8003636:	d00a      	beq.n	800364e <xTaskCreateStatic+0x66>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	61bb      	str	r3, [r7, #24]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01e      	beq.n	8003692 <xTaskCreateStatic+0xaa>
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01b      	beq.n	8003692 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003662:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	2202      	movs	r2, #2
 8003668:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800366c:	2300      	movs	r3, #0
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f851 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800368a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800368c:	f000 f8ec 	bl	8003868 <prvAddNewTaskToReadyList>
 8003690:	e001      	b.n	8003696 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003696:	697b      	ldr	r3, [r7, #20]
	}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fbf9 	bl	8004eac <pvPortMalloc>
 80036ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036c2:	20bc      	movs	r0, #188	; 0xbc
 80036c4:	f001 fbf2 	bl	8004eac <pvPortMalloc>
 80036c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
 80036d6:	e005      	b.n	80036e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d8:	6978      	ldr	r0, [r7, #20]
 80036da:	f001 fcab 	bl	8005034 <vPortFree>
 80036de:	e001      	b.n	80036e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	2300      	movs	r3, #0
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f80f 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800370e:	69f8      	ldr	r0, [r7, #28]
 8003710:	f000 f8aa 	bl	8003868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e002      	b.n	8003720 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003720:	69bb      	ldr	r3, [r7, #24]
	}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	461a      	mov	r2, r3
 8003744:	21a5      	movs	r1, #165	; 0xa5
 8003746:	f001 fdbd 	bl	80052c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003754:	3b01      	subs	r3, #1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <prvInitialiseNewTask+0x58>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	617b      	str	r3, [r7, #20]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e012      	b.n	80037b0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	7819      	ldrb	r1, [r3, #0]
 8003792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	3334      	adds	r3, #52	; 0x34
 800379a:	460a      	mov	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d9e9      	bls.n	800378a <prvInitialiseNewTask+0x5e>
 80037b6:	e000      	b.n	80037ba <prvInitialiseNewTask+0x8e>
		{
			break;
 80037b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2b37      	cmp	r3, #55	; 0x37
 80037c6:	d901      	bls.n	80037cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c8:	2337      	movs	r3, #55	; 0x37
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2200      	movs	r2, #0
 80037dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	3304      	adds	r3, #4
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f9bd 	bl	8002b62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	3318      	adds	r3, #24
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f9b8 	bl	8002b62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	3354      	adds	r3, #84	; 0x54
 800381c:	2260      	movs	r2, #96	; 0x60
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f001 fd4f 	bl	80052c4 <memset>
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <prvInitialiseNewTask+0x130>)
 800382a:	659a      	str	r2, [r3, #88]	; 0x58
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <prvInitialiseNewTask+0x134>)
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <prvInitialiseNewTask+0x138>)
 8003836:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	69b8      	ldr	r0, [r7, #24]
 800383e:	f001 f943 	bl	8004ac8 <pxPortInitialiseStack>
 8003842:	4602      	mov	r2, r0
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003854:	bf00      	nop
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	08005518 	.word	0x08005518
 8003860:	08005538 	.word	0x08005538
 8003864:	080054f8 	.word	0x080054f8

08003868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003870:	f001 fa1c 	bl	8004cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <prvAddNewTaskToReadyList+0xa8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <prvAddNewTaskToReadyList+0xa8>)
 800387c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800387e:	4b25      	ldr	r3, [pc, #148]	; (8003914 <prvAddNewTaskToReadyList+0xac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <prvAddNewTaskToReadyList+0xac>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <prvAddNewTaskToReadyList+0xa8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d110      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003894:	f000 fc60 	bl	8004158 <prvInitialiseTaskLists>
 8003898:	e00d      	b.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <prvAddNewTaskToReadyList+0xb0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <prvAddNewTaskToReadyList+0xac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d802      	bhi.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <prvAddNewTaskToReadyList+0xac>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <prvAddNewTaskToReadyList+0xb4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <prvAddNewTaskToReadyList+0xb4>)
 80038be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <prvAddNewTaskToReadyList+0xb4>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <prvAddNewTaskToReadyList+0xb8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d903      	bls.n	80038dc <prvAddNewTaskToReadyList+0x74>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <prvAddNewTaskToReadyList+0xb8>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <prvAddNewTaskToReadyList+0xbc>)
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7ff f941 	bl	8002b7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038f8:	f001 fa08 	bl	8004d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvAddNewTaskToReadyList+0xb0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <prvAddNewTaskToReadyList+0xac>)
 8003906:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000e14 	.word	0x20000e14
 8003914:	20000940 	.word	0x20000940
 8003918:	20000e20 	.word	0x20000e20
 800391c:	20000e30 	.word	0x20000e30
 8003920:	20000e1c 	.word	0x20000e1c
 8003924:	20000944 	.word	0x20000944

08003928 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <vTaskDelayUntil+0x2a>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	617b      	str	r3, [r7, #20]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <vTaskDelayUntil+0x46>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	613b      	str	r3, [r7, #16]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <vTaskDelayUntil+0xf0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <vTaskDelayUntil+0x64>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60fb      	str	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800398c:	f000 f8ee 	bl	8003b6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <vTaskDelayUntil+0xf4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20b      	bcs.n	80039c2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d211      	bcs.n	80039d8 <vTaskDelayUntil+0xb0>
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d90d      	bls.n	80039d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e00a      	b.n	80039d8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d303      	bcc.n	80039d4 <vTaskDelayUntil+0xac>
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d901      	bls.n	80039d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd05 	bl	80043fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80039f2:	f000 f8c9 	bl	8003b88 <xTaskResumeAll>
 80039f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d107      	bne.n	8003a0e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <vTaskDelayUntil+0xf8>)
 8003a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000e3c 	.word	0x20000e3c
 8003a1c:	20000e18 	.word	0x20000e18
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d017      	beq.n	8003a66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <vTaskDelay+0x60>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <vTaskDelay+0x30>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60bb      	str	r3, [r7, #8]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a54:	f000 f88a 	bl	8003b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fcce 	bl	80043fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a60:	f000 f892 	bl	8003b88 <xTaskResumeAll>
 8003a64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <vTaskDelay+0x64>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000e3c 	.word	0x20000e3c
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	1d39      	adds	r1, r7, #4
 8003a9e:	f107 0308 	add.w	r3, r7, #8
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff f80c 	bl	8002ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	9202      	str	r2, [sp, #8]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	460a      	mov	r2, r1
 8003aba:	4924      	ldr	r1, [pc, #144]	; (8003b4c <vTaskStartScheduler+0xc0>)
 8003abc:	4824      	ldr	r0, [pc, #144]	; (8003b50 <vTaskStartScheduler+0xc4>)
 8003abe:	f7ff fd93 	bl	80035e8 <xTaskCreateStatic>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <vTaskStartScheduler+0xc8>)
 8003ac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ac8:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <vTaskStartScheduler+0xc8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e001      	b.n	8003ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d102      	bne.n	8003ae6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ae0:	f000 fce0 	bl	80044a4 <xTimerCreateTimerTask>
 8003ae4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d11b      	bne.n	8003b24 <vTaskStartScheduler+0x98>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	613b      	str	r3, [r7, #16]
}
 8003afe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <vTaskStartScheduler+0xcc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3354      	adds	r3, #84	; 0x54
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <vTaskStartScheduler+0xd0>)
 8003b08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <vTaskStartScheduler+0xd4>)
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <vTaskStartScheduler+0xd8>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <vTaskStartScheduler+0xdc>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b1e:	f001 f853 	bl	8004bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b22:	e00e      	b.n	8003b42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2a:	d10a      	bne.n	8003b42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <vTaskStartScheduler+0xb4>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	080054a4 	.word	0x080054a4
 8003b50:	08004135 	.word	0x08004135
 8003b54:	20000e38 	.word	0x20000e38
 8003b58:	20000940 	.word	0x20000940
 8003b5c:	20000010 	.word	0x20000010
 8003b60:	20000e34 	.word	0x20000e34
 8003b64:	20000e20 	.word	0x20000e20
 8003b68:	20000e18 	.word	0x20000e18

08003b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <vTaskSuspendAll+0x18>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a03      	ldr	r2, [pc, #12]	; (8003b84 <vTaskSuspendAll+0x18>)
 8003b78:	6013      	str	r3, [r2, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000e3c 	.word	0x20000e3c

08003b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b96:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <xTaskResumeAll+0x100>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	603b      	str	r3, [r7, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bb4:	f001 f87a 	bl	8004cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <xTaskResumeAll+0x100>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <xTaskResumeAll+0x100>)
 8003bc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc2:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <xTaskResumeAll+0x100>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d156      	bne.n	8003c78 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <xTaskResumeAll+0x104>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d052      	beq.n	8003c78 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd2:	e02f      	b.n	8003c34 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <xTaskResumeAll+0x108>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f825 	bl	8002c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f820 	bl	8002c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <xTaskResumeAll+0x10c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d903      	bls.n	8003c04 <xTaskResumeAll+0x7c>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <xTaskResumeAll+0x10c>)
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <xTaskResumeAll+0x110>)
 8003c12:	441a      	add	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7fe ffad 	bl	8002b7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <xTaskResumeAll+0x114>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <xTaskResumeAll+0x118>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <xTaskResumeAll+0x108>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1cb      	bne.n	8003bd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c42:	f000 fb2b 	bl	800429c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <xTaskResumeAll+0x11c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c52:	f000 f837 	bl	8003cc4 <xTaskIncrementTick>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <xTaskResumeAll+0x118>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f1      	bne.n	8003c52 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <xTaskResumeAll+0x11c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <xTaskResumeAll+0x118>)
 8003c76:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c78:	f001 f848 	bl	8004d0c <vPortExitCritical>

	return xAlreadyYielded;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000e3c 	.word	0x20000e3c
 8003c8c:	20000e14 	.word	0x20000e14
 8003c90:	20000dd4 	.word	0x20000dd4
 8003c94:	20000e1c 	.word	0x20000e1c
 8003c98:	20000944 	.word	0x20000944
 8003c9c:	20000940 	.word	0x20000940
 8003ca0:	20000e28 	.word	0x20000e28
 8003ca4:	20000e24 	.word	0x20000e24

08003ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cae:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <xTaskGetTickCount+0x18>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000e18 	.word	0x20000e18

08003cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cce:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <xTaskIncrementTick+0x114>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d175      	bne.n	8003dc2 <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <xTaskIncrementTick+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cde:	4a3f      	ldr	r2, [pc, #252]	; (8003ddc <xTaskIncrementTick+0x118>)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d120      	bne.n	8003d2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <xTaskIncrementTick+0x11c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <xTaskIncrementTick+0x46>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	603b      	str	r3, [r7, #0]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xTaskIncrementTick+0x44>
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <xTaskIncrementTick+0x11c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <xTaskIncrementTick+0x120>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <xTaskIncrementTick+0x11c>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <xTaskIncrementTick+0x120>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <xTaskIncrementTick+0x124>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <xTaskIncrementTick+0x124>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	f000 fab8 	bl	800429c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <xTaskIncrementTick+0x128>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d34a      	bcc.n	8003dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <xTaskIncrementTick+0x11c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xTaskIncrementTick+0x80>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <xTaskIncrementTick+0x82>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4a:	4b28      	ldr	r3, [pc, #160]	; (8003dec <xTaskIncrementTick+0x128>)
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d50:	601a      	str	r2, [r3, #0]
					break;
 8003d52:	e03b      	b.n	8003dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <xTaskIncrementTick+0x11c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d203      	bcs.n	8003d74 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <xTaskIncrementTick+0x128>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6013      	str	r3, [r2, #0]
						break;
 8003d72:	e02b      	b.n	8003dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe ff59 	bl	8002c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3318      	adds	r3, #24
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe ff50 	bl	8002c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <xTaskIncrementTick+0x12c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d903      	bls.n	8003da4 <xTaskIncrementTick+0xe0>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <xTaskIncrementTick+0x12c>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <xTaskIncrementTick+0x130>)
 8003db2:	441a      	add	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7fe fedd 	bl	8002b7a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc0:	e7b9      	b.n	8003d36 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <xTaskIncrementTick+0x134>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <xTaskIncrementTick+0x134>)
 8003dca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000e3c 	.word	0x20000e3c
 8003ddc:	20000e18 	.word	0x20000e18
 8003de0:	20000dcc 	.word	0x20000dcc
 8003de4:	20000dd0 	.word	0x20000dd0
 8003de8:	20000e2c 	.word	0x20000e2c
 8003dec:	20000e34 	.word	0x20000e34
 8003df0:	20000e1c 	.word	0x20000e1c
 8003df4:	20000944 	.word	0x20000944
 8003df8:	20000e24 	.word	0x20000e24

08003dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e02:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <vTaskSwitchContext+0xb0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e0a:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <vTaskSwitchContext+0xb4>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e10:	e046      	b.n	8003ea0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <vTaskSwitchContext+0xb4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <vTaskSwitchContext+0xb8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e010      	b.n	8003e42 <vTaskSwitchContext+0x46>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	607b      	str	r3, [r7, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <vTaskSwitchContext+0x3e>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	491d      	ldr	r1, [pc, #116]	; (8003eb8 <vTaskSwitchContext+0xbc>)
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0e4      	beq.n	8003e20 <vTaskSwitchContext+0x24>
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <vTaskSwitchContext+0xbc>)
 8003e62:	4413      	add	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3308      	adds	r3, #8
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d104      	bne.n	8003e86 <vTaskSwitchContext+0x8a>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <vTaskSwitchContext+0xc0>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <vTaskSwitchContext+0xb8>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <vTaskSwitchContext+0xc0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3354      	adds	r3, #84	; 0x54
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <vTaskSwitchContext+0xc4>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000e3c 	.word	0x20000e3c
 8003eb0:	20000e28 	.word	0x20000e28
 8003eb4:	20000e1c 	.word	0x20000e1c
 8003eb8:	20000944 	.word	0x20000944
 8003ebc:	20000940 	.word	0x20000940
 8003ec0:	20000010 	.word	0x20000010

08003ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <vTaskPlaceOnEventList+0x44>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3318      	adds	r3, #24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fe64 	bl	8002bc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ef8:	2101      	movs	r1, #1
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f000 fa7e 	bl	80043fc <prvAddCurrentTaskToDelayedList>
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000940 	.word	0x20000940

08003f0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	617b      	str	r3, [r7, #20]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fe fe1c 	bl	8002b7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f000 fa53 	bl	80043fc <prvAddCurrentTaskToDelayedList>
	}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000940 	.word	0x20000940

08003f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60fb      	str	r3, [r7, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3318      	adds	r3, #24
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fe4b 	bl	8002c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <xTaskRemoveFromEventList+0xb0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fe42 	bl	8002c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <xTaskRemoveFromEventList+0xb4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d903      	bls.n	8003fc0 <xTaskRemoveFromEventList+0x5c>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a16      	ldr	r2, [pc, #88]	; (8004018 <xTaskRemoveFromEventList+0xb4>)
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <xTaskRemoveFromEventList+0xb8>)
 8003fce:	441a      	add	r2, r3
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f7fe fdcf 	bl	8002b7a <vListInsertEnd>
 8003fdc:	e005      	b.n	8003fea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480e      	ldr	r0, [pc, #56]	; (8004020 <xTaskRemoveFromEventList+0xbc>)
 8003fe6:	f7fe fdc8 	bl	8002b7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <xTaskRemoveFromEventList+0xc0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d905      	bls.n	8004004 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <xTaskRemoveFromEventList+0xc4>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e001      	b.n	8004008 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004008:	697b      	ldr	r3, [r7, #20]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000e3c 	.word	0x20000e3c
 8004018:	20000e1c 	.word	0x20000e1c
 800401c:	20000944 	.word	0x20000944
 8004020:	20000dd4 	.word	0x20000dd4
 8004024:	20000940 	.word	0x20000940
 8004028:	20000e28 	.word	0x20000e28

0800402c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <vTaskInternalSetTimeOutState+0x24>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <vTaskInternalSetTimeOutState+0x28>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000e2c 	.word	0x20000e2c
 8004054:	20000e18 	.word	0x20000e18

08004058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	613b      	str	r3, [r7, #16]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800409a:	f000 fe07 	bl	8004cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <xTaskCheckForTimeOut+0xbc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b6:	d102      	bne.n	80040be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e023      	b.n	8004106 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <xTaskCheckForTimeOut+0xc0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d007      	beq.n	80040da <xTaskCheckForTimeOut+0x82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	e015      	b.n	8004106 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d20b      	bcs.n	80040fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff9b 	bl	800402c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e004      	b.n	8004106 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004102:	2301      	movs	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004106:	f000 fe01 	bl	8004d0c <vPortExitCritical>

	return xReturn;
 800410a:	69fb      	ldr	r3, [r7, #28]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000e18 	.word	0x20000e18
 8004118:	20000e2c 	.word	0x20000e2c

0800411c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <vTaskMissedYield+0x14>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000e28 	.word	0x20000e28

08004134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800413c:	f000 f84c 	bl	80041d8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <prvIdleTask+0x20>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004150:	e7f4      	b.n	800413c <prvIdleTask+0x8>
 8004152:	bf00      	nop
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	e00c      	b.n	800417e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <prvInitialiseTaskLists+0x60>)
 8004170:	4413      	add	r3, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fcd6 	bl	8002b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b37      	cmp	r3, #55	; 0x37
 8004182:	d9ef      	bls.n	8004164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004184:	480d      	ldr	r0, [pc, #52]	; (80041bc <prvInitialiseTaskLists+0x64>)
 8004186:	f7fe fccd 	bl	8002b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800418a:	480d      	ldr	r0, [pc, #52]	; (80041c0 <prvInitialiseTaskLists+0x68>)
 800418c:	f7fe fcca 	bl	8002b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004190:	480c      	ldr	r0, [pc, #48]	; (80041c4 <prvInitialiseTaskLists+0x6c>)
 8004192:	f7fe fcc7 	bl	8002b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004196:	480c      	ldr	r0, [pc, #48]	; (80041c8 <prvInitialiseTaskLists+0x70>)
 8004198:	f7fe fcc4 	bl	8002b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <prvInitialiseTaskLists+0x74>)
 800419e:	f7fe fcc1 	bl	8002b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <prvInitialiseTaskLists+0x78>)
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <prvInitialiseTaskLists+0x64>)
 80041a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <prvInitialiseTaskLists+0x7c>)
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <prvInitialiseTaskLists+0x68>)
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000944 	.word	0x20000944
 80041bc:	20000da4 	.word	0x20000da4
 80041c0:	20000db8 	.word	0x20000db8
 80041c4:	20000dd4 	.word	0x20000dd4
 80041c8:	20000de8 	.word	0x20000de8
 80041cc:	20000e00 	.word	0x20000e00
 80041d0:	20000dcc 	.word	0x20000dcc
 80041d4:	20000dd0 	.word	0x20000dd0

080041d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041de:	e019      	b.n	8004214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041e0:	f000 fd64 	bl	8004cac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <prvCheckTasksWaitingTermination+0x50>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe fd1d 	bl	8002c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <prvCheckTasksWaitingTermination+0x54>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <prvCheckTasksWaitingTermination+0x54>)
 80041fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <prvCheckTasksWaitingTermination+0x58>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <prvCheckTasksWaitingTermination+0x58>)
 8004208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800420a:	f000 fd7f 	bl	8004d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f810 	bl	8004234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <prvCheckTasksWaitingTermination+0x58>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e1      	bne.n	80041e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000de8 	.word	0x20000de8
 800422c:	20000e14 	.word	0x20000e14
 8004230:	20000dfc 	.word	0x20000dfc

08004234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3354      	adds	r3, #84	; 0x54
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f855 	bl	80052f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	4618      	mov	r0, r3
 8004256:	f000 feed 	bl	8005034 <vPortFree>
				vPortFree( pxTCB );
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 feea 	bl	8005034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004260:	e018      	b.n	8004294 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004268:	2b01      	cmp	r3, #1
 800426a:	d103      	bne.n	8004274 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fee1 	bl	8005034 <vPortFree>
	}
 8004272:	e00f      	b.n	8004294 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800427a:	2b02      	cmp	r3, #2
 800427c:	d00a      	beq.n	8004294 <prvDeleteTCB+0x60>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60fb      	str	r3, [r7, #12]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <prvDeleteTCB+0x5e>
	}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <prvResetNextTaskUnblockTime+0x40>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <prvResetNextTaskUnblockTime+0x14>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <prvResetNextTaskUnblockTime+0x16>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvResetNextTaskUnblockTime+0x44>)
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042be:	e008      	b.n	80042d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvResetNextTaskUnblockTime+0x40>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <prvResetNextTaskUnblockTime+0x44>)
 80042d0:	6013      	str	r3, [r2, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000dcc 	.word	0x20000dcc
 80042e0:	20000e34 	.word	0x20000e34

080042e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <xTaskGetSchedulerState+0x34>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042f2:	2301      	movs	r3, #1
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e008      	b.n	800430a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <xTaskGetSchedulerState+0x38>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004300:	2302      	movs	r3, #2
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	e001      	b.n	800430a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800430a:	687b      	ldr	r3, [r7, #4]
	}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000e20 	.word	0x20000e20
 800431c:	20000e3c 	.word	0x20000e3c

08004320 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d056      	beq.n	80043e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004336:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <xTaskPriorityDisinherit+0xd0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d00a      	beq.n	8004356 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60bb      	str	r3, [r7, #8]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	429a      	cmp	r2, r3
 8004388:	d02c      	beq.n	80043e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438e:	2b00      	cmp	r3, #0
 8004390:	d128      	bne.n	80043e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	3304      	adds	r3, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fc4a 	bl	8002c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <xTaskPriorityDisinherit+0xd4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d903      	bls.n	80043c4 <xTaskPriorityDisinherit+0xa4>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <xTaskPriorityDisinherit+0xd4>)
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <xTaskPriorityDisinherit+0xd8>)
 80043d2:	441a      	add	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f7fe fbcd 	bl	8002b7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043e4:	697b      	ldr	r3, [r7, #20]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000940 	.word	0x20000940
 80043f4:	20000e1c 	.word	0x20000e1c
 80043f8:	20000944 	.word	0x20000944

080043fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <prvAddCurrentTaskToDelayedList+0x90>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <prvAddCurrentTaskToDelayedList+0x94>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fc0c 	bl	8002c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441e:	d10a      	bne.n	8004436 <prvAddCurrentTaskToDelayedList+0x3a>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <prvAddCurrentTaskToDelayedList+0x94>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4819      	ldr	r0, [pc, #100]	; (8004494 <prvAddCurrentTaskToDelayedList+0x98>)
 8004430:	f7fe fba3 	bl	8002b7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004434:	e026      	b.n	8004484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <prvAddCurrentTaskToDelayedList+0x94>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	429a      	cmp	r2, r3
 800444c:	d209      	bcs.n	8004462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <prvAddCurrentTaskToDelayedList+0x94>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7fe fbb0 	bl	8002bc0 <vListInsert>
}
 8004460:	e010      	b.n	8004484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <prvAddCurrentTaskToDelayedList+0x94>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7fe fba6 	bl	8002bc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d202      	bcs.n	8004484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000e18 	.word	0x20000e18
 8004490:	20000940 	.word	0x20000940
 8004494:	20000e00 	.word	0x20000e00
 8004498:	20000dd0 	.word	0x20000dd0
 800449c:	20000dcc 	.word	0x20000dcc
 80044a0:	20000e34 	.word	0x20000e34

080044a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ae:	f000 facb 	bl	8004a48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTimerCreateTimerTask+0x80>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d021      	beq.n	80044fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044c2:	1d3a      	adds	r2, r7, #4
 80044c4:	f107 0108 	add.w	r1, r7, #8
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fb0f 	bl	8002af0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	9202      	str	r2, [sp, #8]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	2302      	movs	r3, #2
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	460a      	mov	r2, r1
 80044e4:	4910      	ldr	r1, [pc, #64]	; (8004528 <xTimerCreateTimerTask+0x84>)
 80044e6:	4811      	ldr	r0, [pc, #68]	; (800452c <xTimerCreateTimerTask+0x88>)
 80044e8:	f7ff f87e 	bl	80035e8 <xTaskCreateStatic>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <xTimerCreateTimerTask+0x8c>)
 80044f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <xTimerCreateTimerTask+0x8c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044fa:	2301      	movs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000e70 	.word	0x20000e70
 8004528:	080054ac 	.word	0x080054ac
 800452c:	08004651 	.word	0x08004651
 8004530:	20000e74 	.word	0x20000e74

08004534 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xTimerGenericCommand+0x2e>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <xTimerGenericCommand+0x98>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02a      	beq.n	80045c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b05      	cmp	r3, #5
 800457a:	dc18      	bgt.n	80045ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800457c:	f7ff feb2 	bl	80042e4 <xTaskGetSchedulerState>
 8004580:	4603      	mov	r3, r0
 8004582:	2b02      	cmp	r3, #2
 8004584:	d109      	bne.n	800459a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <xTimerGenericCommand+0x98>)
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f107 0110 	add.w	r1, r7, #16
 800458e:	2300      	movs	r3, #0
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	f7fe fc6b 	bl	8002e6c <xQueueGenericSend>
 8004596:	6278      	str	r0, [r7, #36]	; 0x24
 8004598:	e012      	b.n	80045c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <xTimerGenericCommand+0x98>)
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f107 0110 	add.w	r1, r7, #16
 80045a2:	2300      	movs	r3, #0
 80045a4:	2200      	movs	r2, #0
 80045a6:	f7fe fc61 	bl	8002e6c <xQueueGenericSend>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24
 80045ac:	e008      	b.n	80045c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <xTimerGenericCommand+0x98>)
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	f107 0110 	add.w	r1, r7, #16
 80045b6:	2300      	movs	r3, #0
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	f7fe fd3d 	bl	8003038 <xQueueGenericSendFromISR>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000e70 	.word	0x20000e70

080045d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <prvProcessExpiredTimer+0x7c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fb21 	bl	8002c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d122      	bne.n	800463c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	18d1      	adds	r1, r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f000 f8c8 	bl	8004798 <prvInsertTimerInActiveList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800460e:	2300      	movs	r3, #0
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	2100      	movs	r1, #0
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f7ff ff8b 	bl	8004534 <xTimerGenericCommand>
 800461e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60fb      	str	r3, [r7, #12]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	6978      	ldr	r0, [r7, #20]
 8004642:	4798      	blx	r3
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000e68 	.word	0x20000e68

08004650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f857 	bl	8004710 <prvGetNextExpireTime>
 8004662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4619      	mov	r1, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f803 	bl	8004674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800466e:	f000 f8d5 	bl	800481c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004672:	e7f1      	b.n	8004658 <prvTimerTask+0x8>

08004674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800467e:	f7ff fa75 	bl	8003b6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004682:	f107 0308 	add.w	r3, r7, #8
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f866 	bl	8004758 <prvSampleTimeNow>
 800468c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d130      	bne.n	80046f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <prvProcessTimerOrBlockTask+0x3c>
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d806      	bhi.n	80046b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046a2:	f7ff fa71 	bl	8003b88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ff91 	bl	80045d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046ae:	e024      	b.n	80046fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <prvProcessTimerOrBlockTask+0x90>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <prvProcessTimerOrBlockTask+0x94>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f7fe ff53 	bl	8003580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046da:	f7ff fa55 	bl	8003b88 <xTaskResumeAll>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <prvProcessTimerOrBlockTask+0x98>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
}
 80046f4:	e001      	b.n	80046fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046f6:	f7ff fa47 	bl	8003b88 <xTaskResumeAll>
}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000e6c 	.word	0x20000e6c
 8004708:	20000e70 	.word	0x20000e70
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <prvGetNextExpireTime+0x44>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004736:	4b07      	ldr	r3, [pc, #28]	; (8004754 <prvGetNextExpireTime+0x44>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e001      	b.n	8004746 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004746:	68fb      	ldr	r3, [r7, #12]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000e68 	.word	0x20000e68

08004758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004760:	f7ff faa2 	bl	8003ca8 <xTaskGetTickCount>
 8004764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <prvSampleTimeNow+0x3c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d205      	bcs.n	800477c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004770:	f000 f908 	bl	8004984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e002      	b.n	8004782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <prvSampleTimeNow+0x3c>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004788:	68fb      	ldr	r3, [r7, #12]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000e78 	.word	0x20000e78

08004798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d812      	bhi.n	80047e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d302      	bcc.n	80047d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e01b      	b.n	800480a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <prvInsertTimerInActiveList+0x7c>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe f9ef 	bl	8002bc0 <vListInsert>
 80047e2:	e012      	b.n	800480a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d206      	bcs.n	80047fa <prvInsertTimerInActiveList+0x62>
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e007      	b.n	800480a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <prvInsertTimerInActiveList+0x80>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe f9db 	bl	8002bc0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800480a:	697b      	ldr	r3, [r7, #20]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000e6c 	.word	0x20000e6c
 8004818:	20000e68 	.word	0x20000e68

0800481c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004822:	e09d      	b.n	8004960 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da18      	bge.n	800485c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	3304      	adds	r3, #4
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	61fb      	str	r3, [r7, #28]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004852:	6850      	ldr	r0, [r2, #4]
 8004854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	4611      	mov	r1, r2
 800485a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db7d      	blt.n	800495e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe f9dc 	bl	8002c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004878:	463b      	mov	r3, r7
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff6c 	bl	8004758 <prvSampleTimeNow>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b09      	cmp	r3, #9
 8004886:	d86b      	bhi.n	8004960 <prvProcessReceivedCommands+0x144>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <prvProcessReceivedCommands+0x74>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048b9 	.word	0x080048b9
 800489c:	08004961 	.word	0x08004961
 80048a0:	08004915 	.word	0x08004915
 80048a4:	0800494d 	.word	0x0800494d
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048b9 	.word	0x080048b9
 80048b0:	08004961 	.word	0x08004961
 80048b4:	08004915 	.word	0x08004915
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	18d1      	adds	r1, r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c6:	f7ff ff67 	bl	8004798 <prvInsertTimerInActiveList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d047      	beq.n	8004960 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d13f      	bne.n	8004960 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	441a      	add	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	2100      	movs	r1, #0
 80048f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f2:	f7ff fe1f 	bl	8004534 <xTimerGenericCommand>
 80048f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d130      	bne.n	8004960 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	61bb      	str	r3, [r7, #24]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	617b      	str	r3, [r7, #20]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	18d1      	adds	r1, r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004946:	f7ff ff27 	bl	8004798 <prvInsertTimerInActiveList>
					break;
 800494a:	e009      	b.n	8004960 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004958:	f000 fb6c 	bl	8005034 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800495c:	e000      	b.n	8004960 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800495e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <prvProcessReceivedCommands+0x164>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	1d39      	adds	r1, r7, #4
 8004966:	2200      	movs	r2, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fbfd 	bl	8003168 <xQueueReceive>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	f47f af57 	bne.w	8004824 <prvProcessReceivedCommands+0x8>
	}
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000e70 	.word	0x20000e70

08004984 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800498a:	e045      	b.n	8004a18 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800498c:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe f943 	bl	8002c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d12e      	bne.n	8004a18 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d90e      	bls.n	80049ea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3304      	adds	r3, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f7fe f8ec 	bl	8002bc0 <vListInsert>
 80049e8:	e016      	b.n	8004a18 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	2100      	movs	r1, #0
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fd9d 	bl	8004534 <xTimerGenericCommand>
 80049fa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	603b      	str	r3, [r7, #0]
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1b4      	bne.n	800498c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <prvSwitchTimerLists+0xc0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <prvSwitchTimerLists+0xbc>)
 8004a2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a30:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <prvSwitchTimerLists+0xc0>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000e68 	.word	0x20000e68
 8004a44:	20000e6c 	.word	0x20000e6c

08004a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a4e:	f000 f92d 	bl	8004cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <prvCheckForValidListAndQueue+0x60>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d120      	bne.n	8004a9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a5a:	4814      	ldr	r0, [pc, #80]	; (8004aac <prvCheckForValidListAndQueue+0x64>)
 8004a5c:	f7fe f862 	bl	8002b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a60:	4813      	ldr	r0, [pc, #76]	; (8004ab0 <prvCheckForValidListAndQueue+0x68>)
 8004a62:	f7fe f85f 	bl	8002b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <prvCheckForValidListAndQueue+0x6c>)
 8004a68:	4a10      	ldr	r2, [pc, #64]	; (8004aac <prvCheckForValidListAndQueue+0x64>)
 8004a6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvCheckForValidListAndQueue+0x70>)
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <prvCheckForValidListAndQueue+0x68>)
 8004a70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <prvCheckForValidListAndQueue+0x74>)
 8004a78:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <prvCheckForValidListAndQueue+0x78>)
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	200a      	movs	r0, #10
 8004a7e:	f7fe f95b 	bl	8002d38 <xQueueGenericCreateStatic>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <prvCheckForValidListAndQueue+0x60>)
 8004a86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <prvCheckForValidListAndQueue+0x60>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <prvCheckForValidListAndQueue+0x60>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	490b      	ldr	r1, [pc, #44]	; (8004ac4 <prvCheckForValidListAndQueue+0x7c>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fd4a 	bl	8003530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a9c:	f000 f936 	bl	8004d0c <vPortExitCritical>
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000e70 	.word	0x20000e70
 8004aac:	20000e40 	.word	0x20000e40
 8004ab0:	20000e54 	.word	0x20000e54
 8004ab4:	20000e68 	.word	0x20000e68
 8004ab8:	20000e6c 	.word	0x20000e6c
 8004abc:	20000f1c 	.word	0x20000f1c
 8004ac0:	20000e7c 	.word	0x20000e7c
 8004ac4:	080054b4 	.word	0x080054b4

08004ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3b04      	subs	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 0201 	bic.w	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <pxPortInitialiseStack+0x54>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b14      	subs	r3, #20
 8004b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b20      	subs	r3, #32
 8004b0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	08004b21 	.word	0x08004b21

08004b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <prvTaskExitError+0x54>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b32:	d00a      	beq.n	8004b4a <prvTaskExitError+0x2a>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <prvTaskExitError+0x28>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b5e:	bf00      	nop
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0fc      	beq.n	8004b60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b9e:	4770      	bx	lr

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ba8:	4806      	ldr	r0, [pc, #24]	; (8004bc4 <prvPortStartFirstTask+0x1c>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	b662      	cpsie	i
 8004bb4:	b661      	cpsie	f
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	df00      	svc	0
 8004bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed08 	.word	0xe000ed08

08004bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bce:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <xPortStartScheduler+0xd0>)
 8004bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bfc:	e009      	b.n	8004c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d0ef      	beq.n	8004bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d00a      	beq.n	8004c40 <xPortStartScheduler+0x78>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	60bb      	str	r3, [r7, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c52:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <xPortStartScheduler+0xdc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <xPortStartScheduler+0xdc>)
 8004c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <xPortStartScheduler+0xdc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <xPortStartScheduler+0xdc>)
 8004c70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c76:	f000 f8b9 	bl	8004dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <xPortStartScheduler+0xe0>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c80:	f7ff ff92 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c84:	f7ff f8ba 	bl	8003dfc <vTaskSwitchContext>
	prvTaskExitError();
 8004c88:	f7ff ff4a 	bl	8004b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	e000e400 	.word	0xe000e400
 8004c9c:	20000f6c 	.word	0x20000f6c
 8004ca0:	20000f70 	.word	0x20000f70
 8004ca4:	e000ed20 	.word	0xe000ed20
 8004ca8:	2000000c 	.word	0x2000000c

08004cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	607b      	str	r3, [r7, #4]
}
 8004cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <vPortEnterCritical+0x58>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <vPortEnterCritical+0x58>)
 8004cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <vPortEnterCritical+0x58>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10f      	bne.n	8004cf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <vPortEnterCritical+0x5c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	603b      	str	r3, [r7, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vPortEnterCritical+0x4a>
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <vPortExitCritical+0x4c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <vPortExitCritical+0x24>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	607b      	str	r3, [r7, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <vPortExitCritical+0x4c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <vPortExitCritical+0x4c>)
 8004d38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <vPortExitCritical+0x4c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <vPortExitCritical+0x42>
 8004d42:	2300      	movs	r3, #0
 8004d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f383 8811 	msr	BASEPRI, r3
}
 8004d4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	00000000 	.word	0x00000000

08004d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d60:	f3ef 8009 	mrs	r0, PSP
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <pxCurrentTCBConst>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d70:	6010      	str	r0, [r2, #0]
 8004d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d7a:	f380 8811 	msr	BASEPRI, r0
 8004d7e:	f7ff f83d 	bl	8003dfc <vTaskSwitchContext>
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d96:	f380 8809 	msr	PSP, r0
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	4770      	bx	lr

08004da0 <pxCurrentTCBConst>:
 8004da0:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dc2:	f7fe ff7f 	bl	8003cc4 <xTaskIncrementTick>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <SysTick_Handler+0x40>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <vPortSetupTimerInterrupt+0x30>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <vPortSetupTimerInterrupt+0x38>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <vPortSetupTimerInterrupt+0x3c>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <vPortSetupTimerInterrupt+0x40>)
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e0e:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <vPortSetupTimerInterrupt+0x30>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	e000e010 	.word	0xe000e010
 8004e20:	e000e018 	.word	0xe000e018
 8004e24:	20000000 	.word	0x20000000
 8004e28:	10624dd3 	.word	0x10624dd3
 8004e2c:	e000e014 	.word	0xe000e014

08004e30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e36:	f3ef 8305 	mrs	r3, IPSR
 8004e3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d914      	bls.n	8004e6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <vPortValidateInterruptPriority+0x6c>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e4c:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <vPortValidateInterruptPriority+0x70>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	7afa      	ldrb	r2, [r7, #11]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d20a      	bcs.n	8004e6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	607b      	str	r3, [r7, #4]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <vPortValidateInterruptPriority+0x74>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <vPortValidateInterruptPriority+0x78>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d90a      	bls.n	8004e92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	603b      	str	r3, [r7, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <vPortValidateInterruptPriority+0x60>
	}
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	e000e3f0 	.word	0xe000e3f0
 8004ea0:	20000f6c 	.word	0x20000f6c
 8004ea4:	e000ed0c 	.word	0xe000ed0c
 8004ea8:	20000f70 	.word	0x20000f70

08004eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004eb8:	f7fe fe58 	bl	8003b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ebc:	4b58      	ldr	r3, [pc, #352]	; (8005020 <pvPortMalloc+0x174>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ec4:	f000 f910 	bl	80050e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ec8:	4b56      	ldr	r3, [pc, #344]	; (8005024 <pvPortMalloc+0x178>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 808e 	bne.w	8004ff2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01d      	beq.n	8004f18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004edc:	2208      	movs	r2, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d014      	beq.n	8004f18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f023 0307 	bic.w	r3, r3, #7
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <pvPortMalloc+0x6c>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	617b      	str	r3, [r7, #20]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d069      	beq.n	8004ff2 <pvPortMalloc+0x146>
 8004f1e:	4b42      	ldr	r3, [pc, #264]	; (8005028 <pvPortMalloc+0x17c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d864      	bhi.n	8004ff2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f28:	4b40      	ldr	r3, [pc, #256]	; (800502c <pvPortMalloc+0x180>)
 8004f2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f2c:	4b3f      	ldr	r3, [pc, #252]	; (800502c <pvPortMalloc+0x180>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f32:	e004      	b.n	8004f3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d903      	bls.n	8004f50 <pvPortMalloc+0xa4>
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f1      	bne.n	8004f34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f50:	4b33      	ldr	r3, [pc, #204]	; (8005020 <pvPortMalloc+0x174>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d04b      	beq.n	8004ff2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2208      	movs	r2, #8
 8004f60:	4413      	add	r3, r2
 8004f62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	2308      	movs	r3, #8
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d91f      	bls.n	8004fbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <pvPortMalloc+0xf8>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	613b      	str	r3, [r7, #16]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fb6:	69b8      	ldr	r0, [r7, #24]
 8004fb8:	f000 f8f8 	bl	80051ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <pvPortMalloc+0x17c>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <pvPortMalloc+0x17c>)
 8004fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fca:	4b17      	ldr	r3, [pc, #92]	; (8005028 <pvPortMalloc+0x17c>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b18      	ldr	r3, [pc, #96]	; (8005030 <pvPortMalloc+0x184>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d203      	bcs.n	8004fde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <pvPortMalloc+0x17c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a15      	ldr	r2, [pc, #84]	; (8005030 <pvPortMalloc+0x184>)
 8004fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <pvPortMalloc+0x178>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ff2:	f7fe fdc9 	bl	8003b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <pvPortMalloc+0x16a>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <pvPortMalloc+0x168>
	return pvReturn;
 8005016:	69fb      	ldr	r3, [r7, #28]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3728      	adds	r7, #40	; 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001b7c 	.word	0x20001b7c
 8005024:	20001b88 	.word	0x20001b88
 8005028:	20001b80 	.word	0x20001b80
 800502c:	20001b74 	.word	0x20001b74
 8005030:	20001b84 	.word	0x20001b84

08005034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d048      	beq.n	80050d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005046:	2308      	movs	r3, #8
 8005048:	425b      	negs	r3, r3
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4413      	add	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <vPortFree+0xac>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <vPortFree+0x44>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60fb      	str	r3, [r7, #12]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <vPortFree+0x62>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60bb      	str	r3, [r7, #8]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <vPortFree+0xac>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d019      	beq.n	80050d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d115      	bne.n	80050d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortFree+0xac>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	401a      	ands	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050bc:	f7fe fd56 	bl	8003b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <vPortFree+0xb0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	4a06      	ldr	r2, [pc, #24]	; (80050e4 <vPortFree+0xb0>)
 80050cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ce:	6938      	ldr	r0, [r7, #16]
 80050d0:	f000 f86c 	bl	80051ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80050d4:	f7fe fd58 	bl	8003b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050d8:	bf00      	nop
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20001b88 	.word	0x20001b88
 80050e4:	20001b80 	.word	0x20001b80

080050e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <prvHeapInit+0xac>)
 80050f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3307      	adds	r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <prvHeapInit+0xac>)
 8005118:	4413      	add	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <prvHeapInit+0xb0>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <prvHeapInit+0xb0>)
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005134:	2208      	movs	r2, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <prvHeapInit+0xb4>)
 8005148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <prvHeapInit+0xb4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <prvHeapInit+0xb4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <prvHeapInit+0xb4>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <prvHeapInit+0xb8>)
 8005176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <prvHeapInit+0xbc>)
 800517e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <prvHeapInit+0xc0>)
 8005182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000f74 	.word	0x20000f74
 8005198:	20001b74 	.word	0x20001b74
 800519c:	20001b7c 	.word	0x20001b7c
 80051a0:	20001b84 	.word	0x20001b84
 80051a4:	20001b80 	.word	0x20001b80
 80051a8:	20001b88 	.word	0x20001b88

080051ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b4:	4b27      	ldr	r3, [pc, #156]	; (8005254 <prvInsertBlockIntoFreeList+0xa8>)
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e002      	b.n	80051c0 <prvInsertBlockIntoFreeList+0x14>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d8f7      	bhi.n	80051ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d108      	bne.n	80051ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d118      	bne.n	8005234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvInsertBlockIntoFreeList+0xac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d00d      	beq.n	800522a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e008      	b.n	800523c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <prvInsertBlockIntoFreeList+0xac>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e003      	b.n	800523c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d002      	beq.n	800524a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	20001b74 	.word	0x20001b74
 8005258:	20001b7c 	.word	0x20001b7c

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	2600      	movs	r6, #0
 8005260:	4d0c      	ldr	r5, [pc, #48]	; (8005294 <__libc_init_array+0x38>)
 8005262:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005264:	1b64      	subs	r4, r4, r5
 8005266:	10a4      	asrs	r4, r4, #2
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	f000 f8f0 	bl	8005450 <_init>
 8005270:	2600      	movs	r6, #0
 8005272:	4d0a      	ldr	r5, [pc, #40]	; (800529c <__libc_init_array+0x40>)
 8005274:	4c0a      	ldr	r4, [pc, #40]	; (80052a0 <__libc_init_array+0x44>)
 8005276:	1b64      	subs	r4, r4, r5
 8005278:	10a4      	asrs	r4, r4, #2
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08005558 	.word	0x08005558
 8005298:	08005558 	.word	0x08005558
 800529c:	08005558 	.word	0x08005558
 80052a0:	0800555c 	.word	0x0800555c

080052a4 <__retarget_lock_acquire_recursive>:
 80052a4:	4770      	bx	lr

080052a6 <__retarget_lock_release_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <memcpy>:
 80052a8:	440a      	add	r2, r1
 80052aa:	4291      	cmp	r1, r2
 80052ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052b0:	d100      	bne.n	80052b4 <memcpy+0xc>
 80052b2:	4770      	bx	lr
 80052b4:	b510      	push	{r4, lr}
 80052b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ba:	4291      	cmp	r1, r2
 80052bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052c0:	d1f9      	bne.n	80052b6 <memcpy+0xe>
 80052c2:	bd10      	pop	{r4, pc}

080052c4 <memset>:
 80052c4:	4603      	mov	r3, r0
 80052c6:	4402      	add	r2, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <cleanup_glue>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	460c      	mov	r4, r1
 80052d8:	6809      	ldr	r1, [r1, #0]
 80052da:	4605      	mov	r5, r0
 80052dc:	b109      	cbz	r1, 80052e2 <cleanup_glue+0xe>
 80052de:	f7ff fff9 	bl	80052d4 <cleanup_glue>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ea:	f000 b869 	b.w	80053c0 <_free_r>
	...

080052f0 <_reclaim_reent>:
 80052f0:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <_reclaim_reent+0xb4>)
 80052f2:	b570      	push	{r4, r5, r6, lr}
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4604      	mov	r4, r0
 80052f8:	4283      	cmp	r3, r0
 80052fa:	d051      	beq.n	80053a0 <_reclaim_reent+0xb0>
 80052fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052fe:	b143      	cbz	r3, 8005312 <_reclaim_reent+0x22>
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d14a      	bne.n	800539c <_reclaim_reent+0xac>
 8005306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	b111      	cbz	r1, 8005312 <_reclaim_reent+0x22>
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f857 	bl	80053c0 <_free_r>
 8005312:	6961      	ldr	r1, [r4, #20]
 8005314:	b111      	cbz	r1, 800531c <_reclaim_reent+0x2c>
 8005316:	4620      	mov	r0, r4
 8005318:	f000 f852 	bl	80053c0 <_free_r>
 800531c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800531e:	b111      	cbz	r1, 8005326 <_reclaim_reent+0x36>
 8005320:	4620      	mov	r0, r4
 8005322:	f000 f84d 	bl	80053c0 <_free_r>
 8005326:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005328:	b111      	cbz	r1, 8005330 <_reclaim_reent+0x40>
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f848 	bl	80053c0 <_free_r>
 8005330:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005332:	b111      	cbz	r1, 800533a <_reclaim_reent+0x4a>
 8005334:	4620      	mov	r0, r4
 8005336:	f000 f843 	bl	80053c0 <_free_r>
 800533a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800533c:	b111      	cbz	r1, 8005344 <_reclaim_reent+0x54>
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f83e 	bl	80053c0 <_free_r>
 8005344:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005346:	b111      	cbz	r1, 800534e <_reclaim_reent+0x5e>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f839 	bl	80053c0 <_free_r>
 800534e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005350:	b111      	cbz	r1, 8005358 <_reclaim_reent+0x68>
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f834 	bl	80053c0 <_free_r>
 8005358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800535a:	b111      	cbz	r1, 8005362 <_reclaim_reent+0x72>
 800535c:	4620      	mov	r0, r4
 800535e:	f000 f82f 	bl	80053c0 <_free_r>
 8005362:	69a3      	ldr	r3, [r4, #24]
 8005364:	b1e3      	cbz	r3, 80053a0 <_reclaim_reent+0xb0>
 8005366:	4620      	mov	r0, r4
 8005368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800536a:	4798      	blx	r3
 800536c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800536e:	b1b9      	cbz	r1, 80053a0 <_reclaim_reent+0xb0>
 8005370:	4620      	mov	r0, r4
 8005372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005376:	f7ff bfad 	b.w	80052d4 <cleanup_glue>
 800537a:	5949      	ldr	r1, [r1, r5]
 800537c:	b941      	cbnz	r1, 8005390 <_reclaim_reent+0xa0>
 800537e:	3504      	adds	r5, #4
 8005380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005382:	2d80      	cmp	r5, #128	; 0x80
 8005384:	68d9      	ldr	r1, [r3, #12]
 8005386:	d1f8      	bne.n	800537a <_reclaim_reent+0x8a>
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f819 	bl	80053c0 <_free_r>
 800538e:	e7ba      	b.n	8005306 <_reclaim_reent+0x16>
 8005390:	680e      	ldr	r6, [r1, #0]
 8005392:	4620      	mov	r0, r4
 8005394:	f000 f814 	bl	80053c0 <_free_r>
 8005398:	4631      	mov	r1, r6
 800539a:	e7ef      	b.n	800537c <_reclaim_reent+0x8c>
 800539c:	2500      	movs	r5, #0
 800539e:	e7ef      	b.n	8005380 <_reclaim_reent+0x90>
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	bf00      	nop
 80053a4:	20000010 	.word	0x20000010

080053a8 <__malloc_lock>:
 80053a8:	4801      	ldr	r0, [pc, #4]	; (80053b0 <__malloc_lock+0x8>)
 80053aa:	f7ff bf7b 	b.w	80052a4 <__retarget_lock_acquire_recursive>
 80053ae:	bf00      	nop
 80053b0:	20001b8c 	.word	0x20001b8c

080053b4 <__malloc_unlock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__malloc_unlock+0x8>)
 80053b6:	f7ff bf76 	b.w	80052a6 <__retarget_lock_release_recursive>
 80053ba:	bf00      	nop
 80053bc:	20001b8c 	.word	0x20001b8c

080053c0 <_free_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d040      	beq.n	800544a <_free_r+0x8a>
 80053c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053cc:	1f0c      	subs	r4, r1, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfb8      	it	lt
 80053d2:	18e4      	addlt	r4, r4, r3
 80053d4:	f7ff ffe8 	bl	80053a8 <__malloc_lock>
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <_free_r+0x8c>)
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	b933      	cbnz	r3, 80053ec <_free_r+0x2c>
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	6014      	str	r4, [r2, #0]
 80053e2:	4628      	mov	r0, r5
 80053e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e8:	f7ff bfe4 	b.w	80053b4 <__malloc_unlock>
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	d908      	bls.n	8005402 <_free_r+0x42>
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	1821      	adds	r1, r4, r0
 80053f4:	428b      	cmp	r3, r1
 80053f6:	bf01      	itttt	eq
 80053f8:	6819      	ldreq	r1, [r3, #0]
 80053fa:	685b      	ldreq	r3, [r3, #4]
 80053fc:	1809      	addeq	r1, r1, r0
 80053fe:	6021      	streq	r1, [r4, #0]
 8005400:	e7ed      	b.n	80053de <_free_r+0x1e>
 8005402:	461a      	mov	r2, r3
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	b10b      	cbz	r3, 800540c <_free_r+0x4c>
 8005408:	42a3      	cmp	r3, r4
 800540a:	d9fa      	bls.n	8005402 <_free_r+0x42>
 800540c:	6811      	ldr	r1, [r2, #0]
 800540e:	1850      	adds	r0, r2, r1
 8005410:	42a0      	cmp	r0, r4
 8005412:	d10b      	bne.n	800542c <_free_r+0x6c>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	4401      	add	r1, r0
 8005418:	1850      	adds	r0, r2, r1
 800541a:	4283      	cmp	r3, r0
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	d1e0      	bne.n	80053e2 <_free_r+0x22>
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4401      	add	r1, r0
 8005426:	6011      	str	r1, [r2, #0]
 8005428:	6053      	str	r3, [r2, #4]
 800542a:	e7da      	b.n	80053e2 <_free_r+0x22>
 800542c:	d902      	bls.n	8005434 <_free_r+0x74>
 800542e:	230c      	movs	r3, #12
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	e7d6      	b.n	80053e2 <_free_r+0x22>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	1821      	adds	r1, r4, r0
 8005438:	428b      	cmp	r3, r1
 800543a:	bf01      	itttt	eq
 800543c:	6819      	ldreq	r1, [r3, #0]
 800543e:	685b      	ldreq	r3, [r3, #4]
 8005440:	1809      	addeq	r1, r1, r0
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6054      	str	r4, [r2, #4]
 8005448:	e7cb      	b.n	80053e2 <_free_r+0x22>
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20001b90 	.word	0x20001b90

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
